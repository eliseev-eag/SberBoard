{
  "url": "https://api.github.com/repos/facebook/react/issues/13719",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13719/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13719/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13719/events",
  "html_url": "https://github.com/facebook/react/issues/13719",
  "id": 363324287,
  "node_id": "MDU6SXNzdWUzNjMzMjQyODc=",
  "number": 13719,
  "title": "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined",
  "user": {
    "login": "thaprozz",
    "id": 25793350,
    "node_id": "MDQ6VXNlcjI1NzkzMzUw",
    "avatar_url": "https://avatars2.githubusercontent.com/u/25793350?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/thaprozz",
    "html_url": "https://github.com/thaprozz",
    "followers_url": "https://api.github.com/users/thaprozz/followers",
    "following_url": "https://api.github.com/users/thaprozz/following{/other_user}",
    "gists_url": "https://api.github.com/users/thaprozz/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/thaprozz/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/thaprozz/subscriptions",
    "organizations_url": "https://api.github.com/users/thaprozz/orgs",
    "repos_url": "https://api.github.com/users/thaprozz/repos",
    "events_url": "https://api.github.com/users/thaprozz/events{/privacy}",
    "received_events_url": "https://api.github.com/users/thaprozz/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-09-24T21:17:42Z",
  "updated_at": "2018-09-26T12:54:57Z",
  "closed_at": "2018-09-24T23:10:00Z",
  "author_association": "NONE",
  "body": "I'm dealing with a JSON response in React Native that's coming from the WordPress REST API, containing pages with each an (profile page) ID, title and featured image.\r\n\r\nUsing a FlatList, I have created a screen with featured images and titles for each (Artist) page. I want to add the functionality to navigate to each individual page by clicking on an item in the FlatList, and passing the title, featured image and (later) the content of the regarding page to the next screen to display this information (probably based on the ID). \r\n\r\nLinksScreen.js\r\n\r\n```\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Artist from './Artist';\r\nimport { createStackNavigator } from 'react-navigation';\r\nimport {\r\n  ScrollView,\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  Image,\r\n  FlatList,\r\n  ActivityIndicator,\r\n  TouchableHighlight,\r\n} from 'react-native';\r\n\r\nexport default class LinksScreen extends React.Component {\r\n\r\nconstructor(props) {\r\n        super(props);\r\n        this._onAlertTypePressed = this._onAlertTypePressed.bind(this);\r\n        this.state = {\r\n            data: [],\r\n        }\r\n    }\r\n\r\n  _onAlertTypePressed(typeId: any, typeName: any, imageUrl: any){\r\n\r\n        this.props.navigator.push({\r\n            screen: 'Artist',\r\n            title: 'Artist',\r\n            passProps: {\r\n                alertId: typeId,\r\n                alertName: typeName,\r\n                alertImage: imageUrl,\r\n            }\r\n        });\r\n    }\r\n\r\n    _renderListItem = ({ item }) => (\r\n        <Artist\r\n            itemName={ item.title.rendered }\r\n            itemId={ item.id }\r\n            itemImageUrl={ item.better_featured_image.source_url}\r\n            onPressItem={ this._onAlertTypePressed }\r\n        />\r\n    );\r\n\r\n  static navigationOptions = {\r\n    title: 'Links',\r\n  };\r\n\r\n  state = {\r\n    data: [],\r\n    isLoading: true,\r\n    isError: false,\r\n  };\r\n\r\n  static propTypes = {\r\n    navigation: PropTypes.shape({\r\n      navigate: PropTypes.func.isRequired,\r\n    }).isRequired,\r\n  }\r\n\r\n  componentWillMount() {\r\n    fetch('http://54.168.73.151/wp-json/wp/v2/pages?parent=38&per_page=100')\r\n      .then(response => response.json())\r\n      .then((responseJson) => {\r\n        responseJson.sort((a, b) => a.title.rendered < b.title.rendered ? -1 : 1);\r\n        this.setState({\r\n          data: responseJson,\r\n          isLoading: false,\r\n          isError: false,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        this.setState({\r\n          isLoading: false,\r\n          isError: true,\r\n        });\r\n        console.error(error);\r\n      });\r\n  }\r\n\r\n  renderRow = item => (\r\n    <View style={styles.grid}>\r\n      <Image\r\n        style={styles.thumb}\r\n        source={{\r\n          uri: item.better_featured_image\r\n            ? item.better_featured_image.source_url\r\n            : 'http://54.168.73.151/wp-content/uploads/2018/04/brand-logo.jpg',\r\n        }}\r\n      />\r\n      <Text style={styles.title}>{item.title.rendered}</Text>\r\n    </View>\r\n  );\r\n\r\n  getKey = item => String(item.id);\r\n\r\n  renderComponent() {\r\n    if (this.state.isLoading) {\r\n      return <ActivityIndicator />;\r\n    } else if (this.state.isError) {\r\n      return <Text>Error loading data</Text>;\r\n    } else {\r\n      return (\r\n        <FlatList\r\n          numColumns={3}\r\n          contentContainerStyle={styles.elementsContainer}\r\n          data={this.state.data}\r\n          renderItem={({ item }) => this._renderListItem}\r\n          keyExtractor={this.getKey}\r\n        />\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text\r\n          style={{\r\n            fontSize: 20,\r\n            color: '#FFFFFF',\r\n            marginLeft: 4,\r\n            marginTop: 10,\r\n          }}>\r\n          RESIDENTS\r\n        </Text>\r\n        {this.renderComponent()}\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#000000',\r\n  },\r\n  elementsContainer: {\r\n    backgroundColor: '#000000',\r\n  },\r\n  grid: {\r\n    marginTop: 15,\r\n    marginBottom: 15,\r\n    marginLeft: 5,\r\n    height: 125,\r\n    width: 115,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#191970',\r\n  },\r\n  title: {\r\n    color: '#FFFFFF',\r\n    textAlign: 'left',\r\n    fontSize: 12,\r\n  },\r\n  thumb: {\r\n    height: 110,\r\n    width: 110,\r\n    resizeMode: 'cover',\r\n  },\r\n});\r\n```\r\nArtist.js\r\n\r\n```\r\nimport React, { Component } from 'react';\r\nimport { createStackNavigator } from 'react-navigation';\r\nimport {\r\n  ScrollView,\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  Image,\r\n} from 'react-native';\r\n\r\nexport class Artist extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  _onPress = () => {\r\n    this.props.onPressItem(\r\n      String(this.props.itemId),\r\n      String(this.props.itemName),\r\n      String(this.props.itemImageUrl)\r\n    );\r\n  };\r\n\r\n  static navigationOptions = {\r\n    title: 'Artist',\r\n  };\r\n\r\n  render() {\r\n    // const artist = this.props.navigation.state.params.artist;\r\n    return (\r\n      <TouchableOpacity\r\n        {...this.props}\r\n        style={styles.container}\r\n        onPress={this._onPress}>\r\n        <Image\r\n          style={styles.image}\r\n          source={{\r\n            uri: this.props.itemImageUrl\r\n              ? this.props.itemImageUrl\r\n              : 'http://54.168.73.151/wp-content/uploads/2018/04/brand-logo.jpg',\r\n          }}\r\n        />\r\n        <Text style={styles.title}>{this.props.itemName}</Text>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: '#000000',\r\n  },\r\n  title: {\r\n    color: '#FFFFFF',\r\n    textAlign: 'left',\r\n    fontSize: 12,\r\n  },\r\n  image: {\r\n    height: 350,\r\n    width: 350,\r\n    resizeMode: 'cover',\r\n  },\r\n});\r\n\r\n```\r\nI'm getting an error at the moment - saying that the a string is expected, but an undefined type was found. I used to do it in a different way, but I'm unable to pass the ID (which should be the identifier to pass the data to the next screen) to open a specific generated screen for each artist.\r\n\r\nError:\r\n\r\n![image](https://user-images.githubusercontent.com/25793350/45979413-5244f380-c04f-11e8-9f9c-737e48e45d3e.png)\r\n\r\nHere is the edible code:\r\n\r\n[https://snack.expo.io/@jvdl2711/artist-navigation](url)\r\n\r\nIt used to be like this:\r\n\r\n[https://snack.expo.io/@jvdl2711/artists](url) (working grid version, but no navigation functionality. I'm sure it gives a good indication of how it's supposed to work.)\r\n\r\nNotes\r\n\r\nPlease, don't mind the titles at the moment. I still have a small unsolved issue regarding unicodes, but I think this won't matter when passing the titles to another screen.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
