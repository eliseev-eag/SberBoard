{
  "url": "https://api.github.com/repos/facebook/react/issues/13681",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13681/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13681/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13681/events",
  "html_url": "https://github.com/facebook/react/issues/13681",
  "id": 361413793,
  "node_id": "MDU6SXNzdWUzNjE0MTM3OTM=",
  "number": 13681,
  "title": "How to prevent ReactDOM.render errors from bubbling when otherwise explicitly handled",
  "user": {
    "login": "jneander",
    "id": 880186,
    "node_id": "MDQ6VXNlcjg4MDE4Ng==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/880186?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jneander",
    "html_url": "https://github.com/jneander",
    "followers_url": "https://api.github.com/users/jneander/followers",
    "following_url": "https://api.github.com/users/jneander/following{/other_user}",
    "gists_url": "https://api.github.com/users/jneander/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jneander/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jneander/subscriptions",
    "organizations_url": "https://api.github.com/users/jneander/orgs",
    "repos_url": "https://api.github.com/users/jneander/repos",
    "events_url": "https://api.github.com/users/jneander/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jneander/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-09-18T17:48:47Z",
  "updated_at": "2019-10-02T00:27:48Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nThis is a bug. Ordinarily, this would probably be considered a feature request. However, the stated purpose of the feature referenced below is being violated in certain environments.\r\n\r\n**What is the current behavior?** \r\n\r\nReact 16+ surfaces an uncaught error during render, even when using `componentDidCatch` as designed or using try/catch around the render. As described in the comment [above the related code](https://github.com/facebook/react/blob/master/packages/shared/invokeGuardedCallbackImpl.js#L32:L49), this is a convenience provided for developers using DevTools for debugging purposes. However, the convenience provided for development debugging is changing behavior in specs, causing failures for otherwise protected code paths, which goes against this statement from the comment description for the code:\r\n\r\n> But because the error happens in a different event loop context, it does not interrupt the normal program flow.\r\n\r\nWhen the error occurs, a spec runner such as Mocha will fail the test with the uncaught error, then continue with the next test. After advancing, the second render of the component will complete and call the ReactDOM.render callback, which continues code from the already-failed test while a subsequent test is in progress. This pollutes the spec suite and leads to other issues that are not produced when using the Production version of React.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nAll relevant code and content has been included in [this CodeSandbox](https://codesandbox.io/s/vvmv7q7o7y). Due to the use of karma/mocha, tests must be run locally. Inline comments add detail to behavior and expectations.\r\n\r\nTo see the tests pass, switch \"test\" to \"production\" in the `karma.js` file.\r\n\r\n**What is the expected behavior?**\r\n\r\nTypically, DevTools are used in a different context from running specsâ€”automation vs investigation, for lack of more precise terms. It should be an option rather than the default when using React in a non-production environment. At least in an environment of `test`, where spec runners are conditionally sensitive to global errors, developers must have the option to disable or disallow this behavior as it is implemented at this time.\r\n\r\nFor a second, perhaps more intuitive option, refer to this portion of the mentioned comment, talking about \"pause on caught exceptions\":\r\n\r\n> This is untintuitive, though, because even though React has caught the error, from the developer's perspective, the error is uncaught.\r\n\r\nWhen an exception during render is captured using `componentDidCatch` or try/catch as mentioned above, the exception should be considered \"caught,\" as the developer has explicitly created an error boundary around this render. In this case, expected behavior would be for the error to not be surfaced globally and for the developer to debug any exceptions within the error boundary they defined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is present only in the non-production version of React 16+. The `development` or `test` environments of React 16+ feature this behavior. React 15.* and below do not have this issue. Prior to React 16, explicit try/catch handlers were solely responsible for being an error boundary during render.",
  "closed_by": null
}
