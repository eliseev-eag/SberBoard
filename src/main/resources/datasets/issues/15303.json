{
  "url": "https://api.github.com/repos/facebook/react/issues/15303",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15303/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15303/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15303/events",
  "html_url": "https://github.com/facebook/react/issues/15303",
  "id": 428570533,
  "node_id": "MDU6SXNzdWU0Mjg1NzA1MzM=",
  "number": 15303,
  "title": "Bug involving `warnAboutUpdateOnUnmounted` when using hooks",
  "user": {
    "login": "jamesplease",
    "id": 2322305,
    "node_id": "MDQ6VXNlcjIzMjIzMDU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/2322305?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jamesplease",
    "html_url": "https://github.com/jamesplease",
    "followers_url": "https://api.github.com/users/jamesplease/followers",
    "following_url": "https://api.github.com/users/jamesplease/following{/other_user}",
    "gists_url": "https://api.github.com/users/jamesplease/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jamesplease/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jamesplease/subscriptions",
    "organizations_url": "https://api.github.com/users/jamesplease/orgs",
    "repos_url": "https://api.github.com/users/jamesplease/repos",
    "events_url": "https://api.github.com/users/jamesplease/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jamesplease/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1109410193,
      "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
      "name": "Component: Hooks",
      "color": "c2f27b",
      "default": false
    },
    {
      "id": 710722093,
      "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
      "name": "Type: Needs Investigation",
      "color": "fbca04",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-04-03T05:16:14Z",
  "updated_at": "2019-07-30T18:42:33Z",
  "closed_at": "2019-04-03T15:36:40Z",
  "author_association": "NONE",
  "body": "**tl;dr**\r\n\r\nWhile using hooks, I have run into a number number of situations where particular arrangements of `useContext`, `useState`, and `useReducer` hooks lead to behaviors that I think might be a bug. But it might just also be my lack of understanding of how hooks work and/or hooks best practices.\r\n\r\nI'll try to open issues here to track the problemos. Unfortunately, the smallest reproducible examples will likely always be complicated! This is the first one, which is about a warning that seems difficult to avoid.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (possibly).\r\n\r\n**What is the current behavior?**\r\n\r\nConsider a child component that is conditionally rendered by its parent based on the parent's state. When the user clicks on the child, an asynchronous action is called that ultimately updates the parent's state, unmounting the child. (This asynchronous action represents a successful network request to delete the child.)\r\n\r\nThe child also happens to have its own state that it is keeping track of using `useReducer`. At the end of the asynchronous action, it checks to see if it has been unmounted or not. If it is not unmounted, then it dispatches an update. Otherwise, it doesn't.\r\n\r\nThe child \"knows\" when it unmounts using an \"unmounted hook\":\r\n\r\n```js\r\nconst isUnmountedRef = useRef(false);\r\n  useEffect(() => {\r\n    return () => {\r\n      isUnmountedRef.current = true;\r\n    };\r\n  }, []);\r\n```\r\n\r\nSo that's the setup. Onto the problem:\r\n\r\nWhen the child is conditionally rendered \"simply,\", then you get no warning, because the unmount hook is called _before_ the dispatch call. What I mean by \"simply\" is that when the child tells the parent to unmount it, it _directly_ updates the state that causes it to unmount. There is no \"chain\" of hooks before that state gets updated.\r\n\r\nHowever, if there is instead a \"chain\" of `useEffect` hooks that cause the child to unmount, then `dispatch` will be called _before_ the unmount hook is called within the Child component., But due to the order of how the hooks are resolved, the reducer won't actually be called until _after_ the component unmounts. React doesn't like this, and it warns you.\r\n\r\n![image](https://user-images.githubusercontent.com/2322305/55487856-c1de0180-55e3-11e9-8ab2-edbf7e56ebde.png)\r\n\r\nI think this is a problem because:\r\n\r\n1. there is no way for the child to know if it is conditionally mounted \"simply\" or not\r\n2. I've found that composing hooks naturally leads to \"chains\" of updates\r\n\r\n**Link to CodeSandbox: https://codesandbox.io/s/n34k2z321l**\r\n\r\nIn the CodeSandbox, the \"mirrored\" state within Parent represents the chain of hooks, whereas `renderChild` represents the \"simple\" version.\r\n\r\n> Note 1: this example of \"mirroring\" the state unnecessarily might seem contrived, but this has taken me a couple of hours to simplify a significantly more complex library that creates this situation internally. The tl;dr is that I am writing a collection of independent hooks and composing them in a way that creates the \"chain.\" I'd be happy to provide the source code of the lib if it would be useful.\r\n\r\n> Note 2: you must hit the in-page \"reload\" button for the warning to re-appear after it appears once, as I believe CodeSandbox is using HMR-like technology.\r\n\r\n**What is the expected behavior?**\r\n\r\nI didn't expect chaining hooks to cause this warning. I recognize that the warning says that it is a no-op, but there are a few problems with ignoring it:\r\n\r\n1. this for a library that I expect others to use, and they probably won't feel very confident in the library if it is warning out of the box\r\n2. the warning only logs once per app reload, so this lib could hide other areas of the app where there are problems\r\n3. the only way that I know to avoid this with certainty would be to use `useLayoutEffect` anytime that you compose hooks together like in this example, but that doesn't seem ideal\r\n\r\nIf you update the code to be `useLayoutEffect` for the \"mirroring\" code, it solves the problem, but it seems like it will be a challenge to determine whether to use `useLayoutEffect` or `useEffect` based on how something \"downstream\" will respond to the state changes.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions: \r\n\r\n`react`: 16.8.3\r\n`react-dom`: 16.8.3\r\n\r\nI am not sure if this works in previous versions of React.",
  "closed_by": {
    "login": "jamesplease",
    "id": 2322305,
    "node_id": "MDQ6VXNlcjIzMjIzMDU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/2322305?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jamesplease",
    "html_url": "https://github.com/jamesplease",
    "followers_url": "https://api.github.com/users/jamesplease/followers",
    "following_url": "https://api.github.com/users/jamesplease/following{/other_user}",
    "gists_url": "https://api.github.com/users/jamesplease/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jamesplease/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jamesplease/subscriptions",
    "organizations_url": "https://api.github.com/users/jamesplease/orgs",
    "repos_url": "https://api.github.com/users/jamesplease/repos",
    "events_url": "https://api.github.com/users/jamesplease/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jamesplease/received_events",
    "type": "User",
    "site_admin": false
  }
}
