{
  "url": "https://api.github.com/repos/facebook/react/issues/15472",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15472/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15472/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15472/events",
  "html_url": "https://github.com/facebook/react/issues/15472",
  "id": 435934993,
  "node_id": "MDU6SXNzdWU0MzU5MzQ5OTM=",
  "number": 15472,
  "title": "Umbrella: act",
  "user": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 139734344,
      "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
      "name": "Component: Test Utils",
      "color": "eb6420",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "threepointone",
      "id": 18808,
      "node_id": "MDQ6VXNlcjE4ODA4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/threepointone",
      "html_url": "https://github.com/threepointone",
      "followers_url": "https://api.github.com/users/threepointone/followers",
      "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
      "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
      "organizations_url": "https://api.github.com/users/threepointone/orgs",
      "repos_url": "https://api.github.com/users/threepointone/repos",
      "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
      "received_events_url": "https://api.github.com/users/threepointone/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2019-04-22T23:34:49Z",
  "updated_at": "2019-08-09T00:30:37Z",
  "closed_at": "2019-07-04T18:15:34Z",
  "author_association": "MEMBER",
  "body": "## Action items\r\n\r\n- [x] Before waiting for microtasks to flush, React should call `Scheduler.flushAll` to flush pending Scheduler work. https://github.com/facebook/react/pull/15591\r\n- [x] `act` should not flush anything until the outermost `act` call exits (except for the updates that always flush early like `flushSync` and serial events). https://github.com/facebook/react/pull/15682\r\n- [x] Add `act` warning to React DOM's `root.update()` (since `createRoot` is a new API). https://github.com/facebook/react/pull/15756\r\n- [x] React should warn if an update is scheduled but is nested inside the wrong renderer's `act` (e.g. a DOM update nested inside Test Renderer's `act`), regardless of whether the update was triggered by a legacy API. https://github.com/facebook/react/pull/15756\r\n- [x] React should warn if a passive effect is scheduled by an update outside of `act`, regardless of whether the update was triggered by a legacy API (e.g. `this.setState` or `ReactDOM.render`) https://github.com/facebook/react/pull/15763\r\n- [x] nested `act`s from different renderers should work (eg - a react-art update inside a react-dom tree shouldn't warn https://github.com/facebook/react/pull/15816\r\n- [x] `act` should force pending fallbacks to commit at the end, ignoring how much time has passed, without affecting unrelated timers.\r\n- [ ] `act` should warn if it's called from inside a React event handler or React effect/lifecycle.\r\n- [ ] `act` should have the same behavior regardless of whether the result is awaited.\r\n\r\n## Discussion\r\n- In Legacy Mode, updates that happen after the first `await` will not be batched, but they shouldn't fire the warning. We should still wait to flush passive effects, Scheduler, and microtasks until the end.\r\n- Because passive effects are scheduled with Scheduler, they are flushed by `Scheduler.flushAll`. That means we don't need to call `flushPassiveEffects` separately in order to flush them. However, we currently use the return value of `flushPassiveEffects` to determine if additional passive effects were scheduled. So perhaps we should export a method like `hasPendingEffects` instead.\r\n- The recommendation is to await the result of `act` even if the handler is synchronous, because that ensures that any dangling microtasks are flushed before the test proceeds. However, it's hard to fire a warning if the user neglects to do this, because such a warning needs to happen in an async task, and the test could exit before the async task fires. The warning is also controversial because of the additional boilerplate. But regardless of whether we fire a warning, we should stick to our recommendation to always await `act`.\r\n- The API is designed primarily for Batched/Concurrent Mode. That's why we wait until the outermost `act` exits before flushing anything.\r\n  - The behavior is slightly different in Legacy Mode, but they are the same in the simple case of a single event handler inside a single `act`. For the remaining cases, our suggestion is to switch to the Batched Mode API.\r\n- No longer need to count the `act` \"depth\" because nested `act`s are a no-op in Batched Mode.\r\n\r\n## Idiomatic examples\r\n\r\n### Single event handler\r\n\r\n```js\r\nawait act(() => setState());\r\n```\r\n\r\n### Using a testing framework\r\n\r\n```js\r\nawait simulate('click', domElement);\r\n```\r\n\r\nwhere `simulate` is imported from a testing framework and looks something like:\r\n\r\n```js\r\nasync function simulate(eventType, domElement) {\r\n  const event = new Event(eventType);\r\n  await act(() => domElement.dispatchEvent(event));\r\n}\r\n```\r\n\r\n### Advanced: Multiple events that occur in sequence\r\n\r\nIn Batched Mode, these would all be flushed in a single batch, so we group them together with an outer `act`. \r\n\r\n```js\r\nawait act(async () => {\r\n  await simulate(domElement, 'mousedown');\r\n  await simulate(domElement, 'mouseup');\r\n});\r\n```",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
