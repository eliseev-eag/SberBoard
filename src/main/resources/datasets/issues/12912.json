{
  "url": "https://api.github.com/repos/facebook/react/issues/12912",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12912/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12912/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12912/events",
  "html_url": "https://github.com/facebook/react/issues/12912",
  "id": 326729019,
  "node_id": "MDU6SXNzdWUzMjY3MjkwMTk=",
  "number": 12912,
  "title": "16.4 broke `getDerivedStateFromProps()`",
  "user": {
    "login": "catamphetamine",
    "id": 477167,
    "node_id": "MDQ6VXNlcjQ3NzE2Nw==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/477167?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/catamphetamine",
    "html_url": "https://github.com/catamphetamine",
    "followers_url": "https://api.github.com/users/catamphetamine/followers",
    "following_url": "https://api.github.com/users/catamphetamine/following{/other_user}",
    "gists_url": "https://api.github.com/users/catamphetamine/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/catamphetamine/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/catamphetamine/subscriptions",
    "organizations_url": "https://api.github.com/users/catamphetamine/orgs",
    "repos_url": "https://api.github.com/users/catamphetamine/repos",
    "events_url": "https://api.github.com/users/catamphetamine/events{/privacy}",
    "received_events_url": "https://api.github.com/users/catamphetamine/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-05-26T10:47:38Z",
  "updated_at": "2018-05-26T15:42:29Z",
  "closed_at": "2018-05-26T12:33:03Z",
  "author_association": "CONTRIBUTOR",
  "body": "In your recent [blog post](https://reactjs.org/blog/2018/05/23/react-v-16-4.html#bugfix-for-getderivedstatefromprops) you announced a \"bugfix\" for `getDerivedStateFromProps()`:\r\n\r\n> getDerivedStateFromProps is now called every time a component is rendered, regardless of the cause of the update.\r\n\r\nBut in reality it broke a real-world library.\r\n\r\nNow `getDerivedStateFromProps()` gets called on every re-render.\r\n\r\nSuppose a component watches for a property change.\r\nThe recommended approach is to store the property value in `state`, like `this.state.value`.\r\n\r\nThen, a user changes the input value, so both `this.state.value` and the property must be updated:\r\n\r\n```js\r\nonChange = (event) => {\r\n  this.setState({ value: ... })\r\n  this.props.onChange(...)\r\n}\r\n\r\nstatic getDerivedStateFromProps(props, state) {\r\n  if (props.value !== state.value) {\r\n    return {\r\n      value: props.value\r\n    }\r\n  }\r\n  return null\r\n}\r\n```\r\n\r\nThe timeline is:\r\n\r\n* First both `this.props.value` and `this.state.value` are `undefined`.\r\n* Then `onChange(event)` handler triggers and calls `this.setState({ value: ... })`.\r\n* Because the state got updated `getDerivedStateFromProps()` is called in the new React 16.4.\r\n* `props.value` hasn't been updated yet, but `state.value` has, so the `if` condition triggers because `props.value === undefined` and `state.value = ...`. Hence `this.state.value` gets reset by this `if` condition and becomes `undefined` (which is already a bug) because `props` are the \"single source of truth\" as per the official React recommendations.\r\n* Next, `this.props.onChange(...)` line executes which updates `this.props.value` which in turn calls `getDerivedStateFromProps()` again.\r\n* The `if` condition triggers again because `props.value === ...` and `state.value = undefined` and so `this.state.value` becomes `...` again.\r\n\r\nIn my case it actually [breaks the phone number input component](https://github.com/catamphetamine/react-phone-number-input/issues/131):\r\n\r\n```js\r\nstatic getDerivedStateFromProps(props, state) {\r\n  if (props.value !== state.value) {\r\n    return {\r\n      value: props.value,\r\n      country: getCountryFromPhoneNumber(props.value)\r\n    }\r\n  }\r\n  return null\r\n}\r\n```\r\n\r\nThe design requirement is to let a user set `value` externally which in turn must update the country flag icon.\r\nIt worked in React 16.3.\r\nIn React 16.4 though `getDerivedStateFromProps()` gets called on each internal state update resulting in the country flag being reset every time a user types a character (because an incomplete phone number can't be a source of a country flag, e.g. USA and Canada both start with `+1`, not to mention the whole NANPA region).",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
