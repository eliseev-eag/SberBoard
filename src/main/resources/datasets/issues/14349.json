{
  "url": "https://api.github.com/repos/facebook/react/issues/14349",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14349/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14349/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14349/events",
  "html_url": "https://github.com/facebook/react/pull/14349",
  "id": 385315408,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjM0MzEzOTAz",
  "number": 14349,
  "title": "Suggestion, Hook: Avoid rerender if useReducer's dispatch is called before the hook",
  "user": {
    "login": "Volune",
    "id": 767553,
    "node_id": "MDQ6VXNlcjc2NzU1Mw==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/767553?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Volune",
    "html_url": "https://github.com/Volune",
    "followers_url": "https://api.github.com/users/Volune/followers",
    "following_url": "https://api.github.com/users/Volune/following{/other_user}",
    "gists_url": "https://api.github.com/users/Volune/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Volune/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Volune/subscriptions",
    "organizations_url": "https://api.github.com/users/Volune/orgs",
    "repos_url": "https://api.github.com/users/Volune/repos",
    "events_url": "https://api.github.com/users/Volune/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Volune/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-11-28T15:15:31Z",
  "updated_at": "2018-11-28T15:23:17Z",
  "closed_at": null,
  "author_association": "NONE",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/14349",
    "html_url": "https://github.com/facebook/react/pull/14349",
    "diff_url": "https://github.com/facebook/react/pull/14349.diff",
    "patch_url": "https://github.com/facebook/react/pull/14349.patch"
  },
  "body": "**Current behaviour**\r\nWhen rendering a component, if I call the `dispatch` (setState) function of `useReducer` before I actually call `useReducer`, it will trigger the component to be rerendered.\r\nThis behaviour is demonstrated [here](https://codesandbox.io/s/p75yo957w7), the custom hook's code is copied bellow.\r\n\r\n**Suggested behaviour**\r\nIn the current implementation, dispatched actions (and mostly the ones triggered during the render phase) are handled inside `useReducer`. If the `dispatch` function is called before `useReducer`, we don't have to wait to rerender to handle this action.\r\nThis new behaviour is demonstrated in the current Pull Request.\r\nI'm not expecting a negative effect because hooks are currently meant to be called always in same order and not conditionally.\r\n\r\n**Motivation**\r\nI came to this change trying to implement a custom hook `useDerivedState`:\r\n```\r\nconst useDerivedState = (computeDerivedState, inputs, initialState = null) => {\r\n  const setStateRef = useRef(null);\r\n  useMemo(() => {\r\n    if (setStateRef.current) {\r\n      const setState = setStateRef.current;\r\n      setState(prevState => {\r\n        const newState = computeDerivedState(prevState);\r\n        return newState !== undefined ? newState : prevState;\r\n      });\r\n    }\r\n  }, inputs);\r\n  const stateStuff = useState(() => {\r\n    let state = initialState;\r\n    if (typeof state === \"function\") {\r\n      state = state();\r\n    }\r\n    return computeDerivedState(state);\r\n  });\r\n  [, setStateRef.current] = stateStuff;\r\n  return stateStuff;\r\n};\r\n```",
  "closed_by": null
}
