{
  "url": "https://api.github.com/repos/facebook/react/issues/14021",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14021/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14021/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14021/events",
  "html_url": "https://github.com/facebook/react/issues/14021",
  "id": 375056837,
  "node_id": "MDU6SXNzdWUzNzUwNTY4Mzc=",
  "number": 14021,
  "title": "Enable nesting aware context provider",
  "user": {
    "login": "psachs21",
    "id": 11449728,
    "node_id": "MDQ6VXNlcjExNDQ5NzI4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/11449728?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/psachs21",
    "html_url": "https://github.com/psachs21",
    "followers_url": "https://api.github.com/users/psachs21/followers",
    "following_url": "https://api.github.com/users/psachs21/following{/other_user}",
    "gists_url": "https://api.github.com/users/psachs21/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/psachs21/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/psachs21/subscriptions",
    "organizations_url": "https://api.github.com/users/psachs21/orgs",
    "repos_url": "https://api.github.com/users/psachs21/repos",
    "events_url": "https://api.github.com/users/psachs21/events{/privacy}",
    "received_events_url": "https://api.github.com/users/psachs21/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-10-29T14:55:33Z",
  "updated_at": "2018-11-02T16:24:18Z",
  "closed_at": "2018-11-02T16:24:17Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently, if you have nested context providers, consumers will always get the closest provided value.\r\n\r\n```jsx\r\nconst Context = React.createContext();\r\n\r\nfunction Outer({ children }) {\r\n  return <Context.Provider value=\"Outer\">\r\n    {children}\r\n  </Context.Provider>\r\n}\r\n\r\nfunction Inner({ children }) {\r\n  return <Context.Provider value=\"Inner\">\r\n    {children}\r\n  </Context.Provider>\r\n}\r\n\r\nfunction App() {\r\n  return <Outer>\r\n    <Inner>\r\n      <Context.Consumer>\r\n        {value => value /* Will always be Inner*/}\r\n      </Context.Consumer>\r\n    </Inner>\r\n  </Outer>\r\n}\r\n```\r\n\r\n**Desired behavior**\r\n\r\nIf we could somehow provide a function to the provider that takes the previously set context value (if any) and set it's value accordingly. See this codesandbox as an example of doing just that: https://codesandbox.io/s/841z97o0jl.\r\n\r\nThe primary problem with this solution is that I cannot use my created context `NestedQaContext` with React hooks because it's really just a faked context, mimicking only Provider and Consumer.\r\n\r\n```jsx\r\nfunction() {\r\n  const value = useContext(NestedQaContext);\r\n  // This value will not contain the newly modified value\r\n}\r\n```\r\n\r\nI was thinking of how this would be done while maintaining backward compatibility, and it might look something like this:\r\n\r\n```jsx\r\nfunction Inner({ children }) {\r\n  return <Context.Provider valueSetter={prevValue => `${prevValue}.inner`}>\r\n    {children}\r\n  </Context.Provider>\r\n}\r\n```\r\n\r\nNot in love with this API though.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
