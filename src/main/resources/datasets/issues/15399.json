{
  "url": "https://api.github.com/repos/facebook/react/issues/15399",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15399/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15399/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15399/events",
  "html_url": "https://github.com/facebook/react/pull/15399",
  "id": 432612333,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwMDQ4NTMx",
  "number": 15399,
  "title": "using the wrong renderer's act() should warn",
  "user": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    },
    {
      "id": 139734344,
      "node_id": "MDU6TGFiZWwxMzk3MzQzNDQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Utils",
      "name": "Component: Test Utils",
      "color": "eb6420",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2019-04-12T15:05:11Z",
  "updated_at": "2019-05-28T22:47:27Z",
  "closed_at": "2019-05-28T22:47:27Z",
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/15399",
    "html_url": "https://github.com/facebook/react/pull/15399",
    "diff_url": "https://github.com/facebook/react/pull/15399.diff",
    "patch_url": "https://github.com/facebook/react/pull/15399.patch"
  },
  "body": "via #15319 \r\n\r\nSo tl;dr  this PR - \r\n\r\n- uses a renderer specific object (specifically, the `flushPassiveEffects` function itself) as the value of `ReactShouldWarnActingUpdates.current`\r\n- checks this value on 'initial' render \r\n- checks this value when setting a state hook's value\r\n- adds a fixture folder for `act()`\r\n\r\nThis solves 2 specific problems -\r\n\r\n- using the 'wrong' `act()` shouldn't silence the warning:\r\n  We do this by using a sigil unique to the renderer (as an elegant hack, we use `flushPassiveEffects` as the sigil, removing the need to make a new object). `act()` sets this object before the callback, and unsets it when it's over. Then in addition to `warnIfNotCurrentlyActingUpdatesInDev()`, we also check `warnIfNotScopedWithMatchingAct()` to confirm that`ReactShouldWarnActingUpdates.current` matches the expected sigil.\r\n\r\n- using the wrong `act()` logs a warning:\r\n  Using the same above method, we can check whether you're using the right version of act() for your code.\r\n\r\nNow, I first added this check only for state hook updates, but it didn't reliably catch the common failure case. Consider the following component -\r\n\r\n```jsx\r\nfunction App() {\r\n  let [state, setState] = useState(0);\r\n  async function ticker() {\r\n    await null;\r\n    setState(x => x + 1);\r\n  }\r\n  useEffect(() => {\r\n    ticker();\r\n  }, [Math.min(state, 4)]);\r\n  return state;\r\n}\r\n```\r\n\r\nLet's write a test for it using the shiny new async `act()`\r\n\r\n```jsx\r\nconst el = document.createElement(\"div\");\r\nawait ReactTestUtils.act(async () => {\r\n  ReactDOM.render(React.createElement(App), el);\r\n});\r\n// all 5 ticks present and accounted for\r\nconsole.log(el.innerHTML); // 5!\r\n```\r\n\r\nThis is the golden path - use the correct act with the matching renderer, and you'll get expected behaviour. Here's a quick diagram of the timeline it goes through\r\n\r\n![image](https://user-images.githubusercontent.com/18808/56094179-25f8a380-5ec9-11e9-9e79-a1975cf6d6a4.png)\r\n\r\nOf note, because we can check every time after calling `flushPassiveEffects()`, we can guarantee that the `act()` 'scope' will stay open until the effects queue is drained. Good.\r\n\r\nNow, let's use a mismatching `act()`-\r\n\r\n```jsx\r\nawait ReactTestUtils.act(async () => {\r\n  ReactTestRenderer.create(React.createElement(App));\r\n});\r\n```\r\n\r\nNow, let's say we'd added our sigil check _only for updates_, you'd think it would still trigger the warning. However, the timing of things has changed. There are 2 scenarios of how these will be sequenced out. The first, which is the 'good' version -\r\n\r\n![image](https://user-images.githubusercontent.com/18808/56094169-fa75b900-5ec8-11e9-82b8-db9f0f4b79c7.png)\r\n\r\nBecause we can't use `flushPassiveEffects()` as expected (ie - it's just a no op for other renderer instances), we have to rely on the browser/jest environment to flush to the 'screen', and then the effects/updates fire. In this 'good' case, at least one set state call happens inside the act scope, so we can do the sigil check and warn that they aren't using the right act version.\r\n\r\nHowever, the bad news is that this happens super rarely (in my rough estimation, only 1 in 20 'successes'). In reality, it usually happens outside the scope of the `act()` scope.\r\n\r\n![image](https://user-images.githubusercontent.com/18808/56094174-0a8d9880-5ec9-11e9-92d8-41ee63a10a12.png)\r\n\r\nHere, you'll see that the effects fire after the `act()` scope has closed, so when we do the sigil check, we can only warn that the dev hasn't wrapped their code with `act()` (which will confuse them, since they think they already have)\r\n\r\nSo how do we fix this? Well, I noticed that most of these failures happen at the very start, when they initialise (`TestRenderer.create()`, `ReactDOM.render()`, etc). I believe that if we also add just the sigil identity check in the reconciler's `.createContainer()`, we should be able to warn _for most cases_ asap that they're using the wrong version (and ofc, `createContainer` is synchronous and won't escape the `act()` scope).\r\n\r\nA quirk with our codebase is we don't allow multiple renderers in the same test, so I made a fixture folder `fixtures/act` to test these scenarios (see index.test.js for details). I used react-dom / react-test-renderer for the tests but I should probably add react-art as well. \r\n\r\nQuestions - \r\n\r\n- In a previous iteration of this PR, I made a separate new object as the sigil, but then replaced it with using `flushPassiveEffects` as the sigil itself. ok/not ok?\r\n",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
