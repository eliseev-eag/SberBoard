{
  "url": "https://api.github.com/repos/facebook/react/issues/12441",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12441/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12441/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12441/events",
  "html_url": "https://github.com/facebook/react/issues/12441",
  "id": 308069851,
  "node_id": "MDU6SXNzdWUzMDgwNjk4NTE=",
  "number": 12441,
  "title": "Dangerous strings can reach browser builtins",
  "user": {
    "login": "mikesamuel",
    "id": 368886,
    "node_id": "MDQ6VXNlcjM2ODg4Ng==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/368886?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mikesamuel",
    "html_url": "https://github.com/mikesamuel",
    "followers_url": "https://api.github.com/users/mikesamuel/followers",
    "following_url": "https://api.github.com/users/mikesamuel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mikesamuel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mikesamuel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mikesamuel/subscriptions",
    "organizations_url": "https://api.github.com/users/mikesamuel/orgs",
    "repos_url": "https://api.github.com/users/mikesamuel/repos",
    "events_url": "https://api.github.com/users/mikesamuel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mikesamuel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 127893911,
      "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
      "name": "Component: DOM",
      "color": "fef2c0",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2018-03-23T15:16:28Z",
  "updated_at": "2019-04-24T15:28:16Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug, but a well known and worked-around one.\r\n\r\n**What is the current behavior?**\r\n\r\n```jsx\r\nvar x = 'javascript:alert(1)';\r\nReactDOM.render(\r\n  (<a href={x}>Link</a>),\r\n  document.getElementById('container')\r\n);\r\n```\r\n\r\nproduces a link that alerts.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n* [Load the code above in the codepen REPL](https://jsfiddle.net/Luktwrdm/202/)\r\n* After the REPL loads, click the \"Run\" button at the top left.\r\n* You should see a blue \"link\" in the bottom-right pane.\r\n* Click it.  An alert will popup.\r\n\r\nThe alert should not pop up.\r\n\r\nA simple string that reaches an `href` attribute should not cause arbitrary code execution even with user interaction.\r\n\r\n\r\n**What is the expected behavior?**\r\nA string that reaches a browser builtin like the `HTMLAElement.prototype.href` setter should not cause code execution.\r\n\r\n**Discussion**\r\n\r\n[Polymer Resin](https://docs.google.com/presentation/d/1hepAXMroHSNTM0NV1aGlntjHrw0a0QOM5X5JvfXv_N0/edit#slide=id.g227691820f_0_198) uses hooks in another webcomponents framework to intercept value before they reach browser builtins where they can be vetted.  A similar approach could work for React.\r\n\r\nIt allows values to reach browser builtins when they are innocuous or have a runtime type that indicates that the author intentionally marked them as safe for that kind of browser builtin.\r\n\r\nFor example, an `instanceof SafeURL` would be allowed to reach `HTMLAElement.prototype.href` as would any string that is a relative URL, or one with a whitelisted protocol in (`http`, `https`, `mailto`, `tel`) but not `javascript:...`.\r\n\r\nMany developers know that `<a href={...}>` is risky, but if the link is an implementation detail of a custom React element, then developers don't have the context to know which attributes they need to be careful with.  They shouldn't have to either since it is an implementation detail.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI believe this is widespread across versions.\r\n\r\nAn earlier REPL I tried showed that it worked on version 16.2.0 from https://unpkg.com/react-dom/umd/react-dom.development.js but I don't know what version the jsfiddle above uses.\r\n",
  "closed_by": null
}
