{
  "url": "https://api.github.com/repos/facebook/react/issues/4000",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/4000/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/4000/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/4000/events",
  "html_url": "https://github.com/facebook/react/issues/4000",
  "id": 83781676,
  "node_id": "MDU6SXNzdWU4Mzc4MTY3Ng==",
  "number": 4000,
  "title": "Generating random/unique attributes server-side that don't break client-side mounting",
  "user": {
    "login": "jmar777",
    "id": 183199,
    "node_id": "MDQ6VXNlcjE4MzE5OQ==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/183199?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jmar777",
    "html_url": "https://github.com/jmar777",
    "followers_url": "https://api.github.com/users/jmar777/followers",
    "following_url": "https://api.github.com/users/jmar777/following{/other_user}",
    "gists_url": "https://api.github.com/users/jmar777/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jmar777/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jmar777/subscriptions",
    "organizations_url": "https://api.github.com/users/jmar777/orgs",
    "repos_url": "https://api.github.com/users/jmar777/repos",
    "events_url": "https://api.github.com/users/jmar777/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jmar777/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 17,
  "created_at": "2015-06-02T01:36:35Z",
  "updated_at": "2017-10-04T11:26:33Z",
  "closed_at": "2017-10-04T11:26:33Z",
  "author_association": "NONE",
  "body": "Consider, for example, a relatively generic `<Field />` component:\n\n``` javascript\nvar fieldCounter = 0;\n\nvar Field = React.createClass({\n    getInitialState: function() {\n        return { inputId: 'field-' + ++fieldCounter };\n    },\n    render: function() {\n        var props = this.props,\n            inputId = this.state.inputId;\n\n        return (\n            <div className='field'>\n                <label htmlFor={inputId}>{props.label}</label>\n                <input type={props.type} id={inputId} name={props.name} value='' />\n            </div>\n        );\n    }\n});\n```\n\nIn order for the `<label />` tag to be semantically related to the `<input />` tag, we obviously need to match the `for` attribute to the `<input />` tag's `id` attribute.  Outside of that requirement, however, we have no need of the `id` attribute, so a solution like the one above is convenient as it handles that all internally, with no need for a consuming component to pass in an actual `id` value.\n\nThe problem I'm running into, however, is that this causes the `id` attributes generated client-side to mismatch what was sent down by the server (the client-side `fieldCounter` restarts at `0` on every load, whereas the server-side reference obviously just keeps growing).\n\nThis mismatch then results in an error being thrown: \n\n`Invariant Violation: You're trying to render a component to the document using server rendering [...]`\n\nSo, my question is this: am I overlooking an obvious solution here? I would _like_ for the `<Field />` component to be able to simply internalize the `id` generation as an implementation detail, but I can't seem to come up with a good mechanism for then matching up that id generation client-side.\n\nThanks in advance!\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
