{
  "url": "https://api.github.com/repos/facebook/react/issues/10270",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10270/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10270/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10270/events",
  "html_url": "https://github.com/facebook/react/pull/10270",
  "id": 245225679,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTMyMTU3MjIz",
  "number": 10270,
  "title": "[invokeGuardedCallback] Handle nested errors across separate renderers",
  "user": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2017-07-24T22:14:49Z",
  "updated_at": "2017-07-25T23:28:46Z",
  "closed_at": "2017-07-25T16:44:44Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/10270",
    "html_url": "https://github.com/facebook/react/pull/10270",
    "diff_url": "https://github.com/facebook/react/pull/10270.diff",
    "patch_url": "https://github.com/facebook/react/pull/10270.patch"
  },
  "body": "`invokeGuardedCallback` is a function we use in place of try-catch statement. It accepts a function, and if the function throws, it captures the error. In production, the implementation is a normal try- catch. In development, we swap out the prod implementation for a special version designed to preserve \"Pause on all exceptions\" behavior of the browser DevTools.\r\n\r\n`invokeGuardedCallbackDev` works by dispatching an event to a dummy DOM node and calling the provided function inside a handler for that event. We also attach an error event handler to the window object. If the function throws, the global event handler is called and we can access the error.\r\n\r\nThe global event handler is added and removed right before and after the fake event is dispatched. But if `invokeGuardedCallbackDev` is nested — that is, if it's invoked inside the body of another `invokeGuardedCallbackDev` — multiple error event handlers will be attached simultaneously. We only want the handler that corresponds to the deepest level to handle the error. So we keep track of a depth counter, and within the event handler, we only handle the error if the current depth matches the depth at the time the function was invoked.\r\n\r\nThe problem that we discovered, and that this PR fixes, is that the depth counter is local to each renderer. So if you nest separate copies of `invokeGuardedCallback` from separate renderers, each renderer will have its own depth counter, and multiple error handlers will fire for a single, nested error.\r\n\r\n~~To solve this, I've made the depth counter a global property, stored on `window.__reactDevErrorDepth`. I'd prefer not to use a global, but it's necessary in this case because we're dealing with global event handlers. If there were some way to introspect an error event to determine the event that triggered it, we could avoid using a global counter. But since this is only in DEV, and we already use globals for this use case, I think this is fine.~~ Updated based on @sebmarkbage's [feedback](https://github.com/facebook/react/pull/10270#pullrequestreview-51919909)",
  "closed_by": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  }
}
