{
  "url": "https://api.github.com/repos/facebook/react/issues/13354",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13354/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13354/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13354/events",
  "html_url": "https://github.com/facebook/react/issues/13354",
  "id": 349175702,
  "node_id": "MDU6SXNzdWUzNDkxNzU3MDI=",
  "number": 13354,
  "title": "setState unexpectedly update non-state properties",
  "user": {
    "login": "hongphinguyen",
    "id": 35585987,
    "node_id": "MDQ6VXNlcjM1NTg1OTg3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/35585987?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hongphinguyen",
    "html_url": "https://github.com/hongphinguyen",
    "followers_url": "https://api.github.com/users/hongphinguyen/followers",
    "following_url": "https://api.github.com/users/hongphinguyen/following{/other_user}",
    "gists_url": "https://api.github.com/users/hongphinguyen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hongphinguyen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hongphinguyen/subscriptions",
    "organizations_url": "https://api.github.com/users/hongphinguyen/orgs",
    "repos_url": "https://api.github.com/users/hongphinguyen/repos",
    "events_url": "https://api.github.com/users/hongphinguyen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hongphinguyen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-08-09T15:21:25Z",
  "updated_at": "2018-08-09T16:14:32Z",
  "closed_at": "2018-08-09T16:14:32Z",
  "author_association": "NONE",
  "body": "I don't know if this is a known issue or an intended feature, but I have found an interesting problem.\r\n\r\nSo we all know that if we want to render a reactive value in React, we have to put the value in the state and use setState:\r\n\r\n```js\r\nconstructor() {\r\n  super();\r\n  this.state = { counter: 0 }\r\n  this.incrementButtonListener = (e) => {\r\n    e.preventDefault();\r\n    this.setState(prevState => ({ counter: prevState.counter + 1 }));\r\n  };\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <h1>{this.state.counter}</h1>\r\n      // When clicked, counter increments by 1 and re-renders\r\n      <button onChange={this.incrementButtonListener}>Increment</button> \r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nBut if we make `counter` as a field property, render() will only catch a snapshot of `counter` when the component is created, and even when `counter` is incremented, the result will not be displayed reactively in render():\r\n\r\n```js\r\nconstructor() {\r\n  super();\r\n  this.counter = 0;\r\n  this.incrementButtonListener = (e) => {\r\n    e.preventDefault();\r\n    this.counter++;\r\n  };\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <h1>{this.counter}</h1>\r\n      // When clicked, counter increments by 1 but the difference is NOT rendered\r\n      <button onChange={this.incrementButtonListener}>Increment</button> \r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nRight? Basic stuff.\r\n\r\nHowever, there's an interesting occurence when I try to fiddle around with this code. We keeps counter as a field property and everything else intact. The only difference is that, in the `incrementButtonListener`, I'm going to add a `setState` on `someStateProperty`:\r\n\r\n```js\r\nconstructor() {\r\n  super();\r\n  this.counter = 0;\r\n  this.incrementButtonListener = (e) => {\r\n    e.preventDefault();\r\n    this.counter++;\r\n    /*-------------------------------ADD THIS*/\r\n    this.setState({});\r\n    // You have to pass an object, even if it's empty. this.setState() won't work.\r\n    /*-----------------------------------------*/\r\n  };\r\n}\r\n\r\nrender() {\r\n  return (\r\n    <div>\r\n      <h1>{this.counter}</h1>\r\n      // Surprise surprise, now this.counter will update as if it was in the state! \r\n      <button onChange={this.incrementButtonListener}>Increment</button> \r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**This time, `this.counter` updates as if it was in the state!**\r\n\r\nSo my assumption is, every time setState is called (and even with an empty object as a parameter), render() runs again and `this.counter` will get recalculated and, thus, incremented. Of course, it won't be 100% as reactive as a state property. But, in this use case, the only time `this.counter` would change is when I click on the `Increment` button. So, if I put a setState in the listener, it would work as if `this.counter` is in the state.\r\n\r\nNow, I'm not sure if this is an accepted behavior or just an unexpected hack, and whether I should make use of it or not. Could anybody help me elaborate this?\r\n\r\nHere is a [fiddle](https://jsfiddle.net/Phiboi/69z2wepo/260234/) if you want to see the behavior in action. You can comment out the `this.setState({})` bit in line 7 to see the difference.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
