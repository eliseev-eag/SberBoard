{
  "url": "https://api.github.com/repos/facebook/react/issues/6698",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/6698/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/6698/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/6698/events",
  "html_url": "https://github.com/facebook/react/issues/6698",
  "id": 153052627,
  "node_id": "MDU6SXNzdWUxNTMwNTI2Mjc=",
  "number": 6698,
  "title": "Proposal: Validating object against propTypes object outside or render/context flows",
  "user": {
    "login": "zyrolasting",
    "id": 1312121,
    "node_id": "MDQ6VXNlcjEzMTIxMjE=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/1312121?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zyrolasting",
    "html_url": "https://github.com/zyrolasting",
    "followers_url": "https://api.github.com/users/zyrolasting/followers",
    "following_url": "https://api.github.com/users/zyrolasting/following{/other_user}",
    "gists_url": "https://api.github.com/users/zyrolasting/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zyrolasting/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zyrolasting/subscriptions",
    "organizations_url": "https://api.github.com/users/zyrolasting/orgs",
    "repos_url": "https://api.github.com/users/zyrolasting/repos",
    "events_url": "https://api.github.com/users/zyrolasting/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zyrolasting/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2016-05-04T16:09:02Z",
  "updated_at": "2017-10-18T22:45:40Z",
  "closed_at": "2016-05-04T16:27:40Z",
  "author_association": "NONE",
  "body": "To avoid using lots of event handling and manual prop chaining inside a parent form, I wrote a component that accumulates form data using a context like so:\n\n```\nimport React from 'react';\nimport RComponent from '...'; // React.Component subclass\n\n\nlet { func, string, object } = React.PropTypes;\n\nclass ReactForm extends RComponent {\n\n\n\n\n    constructor(props, context) {\n        super(props, context);\n        this.displayName = 'ReactForm';\n    }\n\n\n\n\n    matchSchema() {\n        //...returns true or false\n    }\n\n\n\n    static get defaultProps() {\n        return Object.assign(RComponent.defaultProps, {\n            klass: 'form',\n            schema: {},\n            process: () => {}\n        });\n    }\n\n\n\n\n    static get propTypes() {\n        return Object.assign(RComponent.defaultProps, {\n            klass: string.isRequired,\n            schema: object.isRequired,\n            process: func.isRequired\n        });\n    }\n\n\n\n\n\n    getChildContext() {\n        let me = this;\n        return {\n            report(k, v, ok) {  // Input components will take care of themselves and report in here.\n                if (ok)\n                    me.formdata[k] = v;\n                else\n                    delete me.formdata[k];                \n            }\n        };\n    }\n\n\n\n\n\n    onSubmit(e) {\n        e.preventDefault();\n\n        if (this.matchSchema())\n            this.props.process(this.formdata);\n    }\n\n\n\n\n\n\n    render() {\n\n        let { klass, children } = this.props;\n\n        return (\n            <form className={cx([klass])} onSubmit={this.onSubmit.bind(this)} >\n                { children }\n            </form>\n        );\n    }\n}\n\n\nReactForm.childContextTypes = {\n    report: func.isRequired\n};\n\n\nexport default ReactForm;\n```\n\nThe context just exposes a function where any child (namely an input) reports a final JSON key, value and validation status. Although I could bring in a 3rd party schema validator, I wanted to see if I could leverage the `schema` property as an object containing React proptypes.\n\nI understand that proptypes don't get checked when rendering in production, but I was hoping that in `matchSchema` I want to call whatever React uses to take an object and check it against the accumulated form data.\n\ni.e.\n\n```\n<ReactForm schema={ { firstname: React.PropTypes.string.isRequired } } />\n```\n\nFrom looking at the docs and StackOverflow, it looks like there is no exposed API to just validate against proptypes.  The only solution that I can find involves using [stateless components](https://github.com/yannickcr/eslint-plugin-react/issues/237) and [intercepting console messages](http://stackoverflow.com/a/29654112/394397).\n\nA paranoid solution might look like:\n\n```\nmatchSchema() {\n\n    // Prepare stateless components that attemps\n    // to render form data \n    let ss = () => <span {...this.formdata} />;\n    ss.propTypes = this.props.schema;\n\n    let success = true;\n\n    let { warn, error } = console;\n    console.warn = console.error = () => { throw new Error() };\n\n    try {\n        ss();\n    }\n    catch(e) {\n        success = false;\n    }\n\n    console.warn = warn;\n    console.error = error;\n\n    return success;\n}\n```\n\n...But this is not going to fly because I don't want to run React in dev mode in production.\n\nCan React expose a way to take advantage of its validation system regardless of its mode, so that I can test an object's shape and property types without hacking around the flow? \n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
