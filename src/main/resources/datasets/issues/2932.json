{
  "url": "https://api.github.com/repos/facebook/react/issues/2932",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/2932/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/2932/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/2932/events",
  "html_url": "https://github.com/facebook/react/issues/2932",
  "id": 55392883,
  "node_id": "MDU6SXNzdWU1NTM5Mjg4Mw==",
  "number": 2932,
  "title": "Consider Using JsonML as Notation for ReactElement",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 23,
  "created_at": "2015-01-25T02:31:21Z",
  "updated_at": "2018-03-29T09:55:48Z",
  "closed_at": "2017-10-02T00:19:51Z",
  "author_association": "MEMBER",
  "body": "DON'T GET TOO EXCITED, this probably won't work. This issue is more about documenting why we can't do it.\n\nWe could consider using [JsonML](http://www.jsonml.org/) as the notation for [ReactElement](http://facebook.github.io/react/docs/glossary.html#formal-type-definitions).\n\nThis would make this **JSX**...\n\n``` javascript\nrender() {\n  return <div className=\"container\"><FancyButton disabled /><span /></div>;\n}\n```\n\n...which **currently** looks like this...\n\n``` javascript\nrender() {\n  return { type: 'div', props: { className: 'container', children: [\n           { type: FancyButton, props: { disabled: true } },\n           { type: 'span' },\n         ] } };\n}\n```\n\n...into a **much nicer** non-JSX declaration.\n\n``` javascript\nrender() {\n  return ['div', { className: 'container' }, [FancyButton, { disabled: true }], ['span']]\n}\n```\n\nIt would also align us with a spec which is not ours. Almost like a standard.\n\n**Children are Special**\n\nJsonML is designed in a way that children can be distinguished from other attributes. We don't really care about this property because we've already merged them, but we could undo that. NBD.\n\nOne problem is that you constantly need to slice off the children from the outer array as you're passing it into a component. This can become a performance problem.\n\n**`key` and `ref`**\n\nThe problem with JsonML is that we don't have a way to attach custom attributes to the element, that are not props. I.e. `key` and `ref`. It is important that these are treated differently than other props because they should not be available to the component itself. Conceptually the parent is responsible for keying the element and changing the key should not affect the behavior of a component. Same for refs. It is also important that props can be transferred to a child without that affecting its behavior.\n\nOne possible solution would be to wrap the elements in another object:\n\n``` javascript\nrenderButton(data) {\n  return { key: data.id, element: [FancyButton, { disabled: true }] };\n}\nrender() {\n  return { ref: c => this.container = c, element:\n    ['div', { className: 'container' }, this.props.data.map(this.renderButton)]\n  };\n}\n```\n\nIt's still ugly. It also means that you now have to reason about two types of element (with or without wrapper). These children are also ambiguous in the first position of an attribute-less element.\n\n**Constant Destructuring**\n\nAny time you need to clone or reason about an element you need to destructure the system.\n\n``` javascript\nvar [tag, props, ...children] = element;\nreturn <tag {...props} foo={10}>{...children}</tag>;\n```\n\n``` javascript\nvar [tag, props, ...children] = element;\nreturn [tag, {...props, foo: 10}, ...children];\n```\n\n``` javascript\nreturn <element.type {...element.props} foo={10} />;\n```\n\n```\nreturn { ...element, props: {...element.props, foo: 10 } };\n```\n\n**Nested Arrays**\n\nWe can't distinguish between a nested array of elements and just an element. This would only work if we enforced that children are always provided as flat lists and explicitly flattened as needed.\n\nE.g. `['div', ...this.props.children, ['div', { className: 'extra-child' }]]`\n\nFlattening makes it very difficult to preserve keys though.\n\n**What About Allowing Both?**\n\nA component that receives a ReactElement from the outside should not need to reason about two different kinds of abstractions and use two different patterns for accessing the type or props. It is important that the React community doesn't diverge too far from each other.\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
