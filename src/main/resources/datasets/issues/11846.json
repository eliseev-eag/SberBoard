{
  "url": "https://api.github.com/repos/facebook/react/issues/11846",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11846/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11846/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11846/events",
  "html_url": "https://github.com/facebook/react/issues/11846",
  "id": 281836303,
  "node_id": "MDU6SXNzdWUyODE4MzYzMDM=",
  "number": 11846,
  "title": "React 16's new error handling functionality seems to be doing more harm than good",
  "user": {
    "login": "jchitel",
    "id": 530108,
    "node_id": "MDQ6VXNlcjUzMDEwOA==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/530108?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jchitel",
    "html_url": "https://github.com/jchitel",
    "followers_url": "https://api.github.com/users/jchitel/followers",
    "following_url": "https://api.github.com/users/jchitel/following{/other_user}",
    "gists_url": "https://api.github.com/users/jchitel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jchitel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jchitel/subscriptions",
    "organizations_url": "https://api.github.com/users/jchitel/orgs",
    "repos_url": "https://api.github.com/users/jchitel/repos",
    "events_url": "https://api.github.com/users/jchitel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jchitel/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-12-13T17:39:03Z",
  "updated_at": "2018-06-14T16:22:42Z",
  "closed_at": "2018-06-14T16:22:42Z",
  "author_association": "NONE",
  "body": "I wasn't sure where to report this, but this is a problem I'm having with a new feature.\r\n\r\nI just finished upgrading my team to React 16. Overall, I think the upgrade is great. We are using fragments and the relaxed constraints on what you can return from render(), and I'm overall very happy with it.\r\n\r\nMy only issue is with error boundaries. The feature seems to be well-intended, and does help out quite a bit. The improved error reporting especially is beautiful and will make debugging a dream.\r\n\r\nThe problem is that I believe we are leaving our users in a worse state by having to display fallback UIs. In a perfect world, we would have no client side errors and none of this would even be a discussion. But unfortunately we do have to deal with client-side errors. I agree that leaving the UI in an unpredictable state is less than desired, but I would argue that it's still better than taking away the UI completely. If a user triggers a client-side error, but the UI is still there, they can continue to use the site with little-to-no issue in the case of *most* errors. But with React 16's new functionality, even the smallest of errors will unmount the UI.\r\n\r\nOur options are:\r\n- Go with the easy route and implement a top-level error boundary that will unmount the whole UI, replacing it with a fallback that does nothing for the user.\r\n- Take significant developer time to implement fine-grained error boundaries that will still leave most of the UI untouched, only replacing components in error. But overall, this will still be taking functionality away from the user.\r\n\r\nEither way, with this new functionality, we need to have at least a top-level error boundary to display *something* to the user. Our top-level boundary still displays our navigation bar so that the user can still navigate away from the page and use other parts of the site. The alternative is that they will need to refresh the page because everything will be unmounted.\r\n\r\nI agree that displaying a fallback UI can be useful in instances where you *expect* an error in some cases (for example, when loading an image from a third party CDN or something). But in cases where a bug is producing an *unexpected* error, we should still be able to keep the UI in its previous state.\r\n\r\nThis is how I envision it working:\r\n- Error boundaries are still exactly as they are today, except...\r\n- If the error was thrown inside the render() of a component, that component will either not be mounted (if it hasn't yet been mounted) or be left in its prior state (if it has already been successfully mounted). The parent of the offending component and all of the parent's other children are still rendered.\r\n- If the error was thrown inside a lifecycle method, the offending component's tree is left as it was, and other children of its parent can still be updated.\r\n- Error boundaries can *still* display a fallback UI if they want. componentDidMount() still has the ability to set state.\r\n\r\nIf you are handling an *expected* error, you should display a fallback UI. If you are handling an *unexpected* error, you should try to leave the UI in the most unbroken state possible for the user. The error should still be reported and caught by a top-level error boundary so that it can be logged, but the UI should not need to be replaced in all instances.\r\n\r\nPerhaps I'm missing out on a standard process for handling these problems I'm talking about, and I am happy to hear what other people are doing to get around this, but I believe this feature as it exists today means more work for developers, and poor functionality for users.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
