{
  "url": "https://api.github.com/repos/facebook/react/issues/4068",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/4068/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/4068/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/4068/events",
  "html_url": "https://github.com/facebook/react/issues/4068",
  "id": 86762268,
  "node_id": "MDU6SXNzdWU4Njc2MjI2OA==",
  "number": 4068,
  "title": "React, leafletjs (or any other external library) and DOM",
  "user": {
    "login": "afilp",
    "id": 7850073,
    "node_id": "MDQ6VXNlcjc4NTAwNzM=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/7850073?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/afilp",
    "html_url": "https://github.com/afilp",
    "followers_url": "https://api.github.com/users/afilp/followers",
    "following_url": "https://api.github.com/users/afilp/following{/other_user}",
    "gists_url": "https://api.github.com/users/afilp/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/afilp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/afilp/subscriptions",
    "organizations_url": "https://api.github.com/users/afilp/orgs",
    "repos_url": "https://api.github.com/users/afilp/repos",
    "events_url": "https://api.github.com/users/afilp/events{/privacy}",
    "received_events_url": "https://api.github.com/users/afilp/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2015-06-09T22:58:19Z",
  "updated_at": "2015-06-10T09:39:16Z",
  "closed_at": "2015-06-09T23:15:25Z",
  "author_association": "NONE",
  "body": "Hello, I am trying to use React with the `leafletjs` library for maps and I am not sure how to implement this best.\n\nI know that there is a `react-leaflet` github project out there, but in my case I need to use the _raw_ (javaScript) `leafletjs` library (in order to use more unsupported features, such as the `divIcon` that  supports html on the Marker: http://leafletjs.com/reference.html#divicon)\n\nThe following code that I wrote is definitely **not** the _React way_ (as it removes and unmounts everything and then recreates and mounts everything) but it works (after many hours of trial and error).\n\nI have around 300 Markers (cars) on the map and with different criteria I hide some of them. I also retrieve slightly updated data from the server. \n\nThe problem is that before I use the `unmountComponentAtNode` method, the React devtools showed that 300 components were added on each rerender. So, I had 3000 components at some time and growing, despite their underlying (real DOM) DIVs where deleted by the window.map.carsLayerGroup.clearLayers(); method.\n\nSo:\n1. Shouldn't the removal of the DOM \"DIVs\" (by an external library) also automatically \"unmount\" the related mounted components? Is there a way to do so?\n2. If not, is there a way to unmount all 300+ Car components alltogether without looping? For example, something like React.unmountComponents(\"Car\"). Because my loop is not full-proof: when I retrieve new data, some old items will still remain mounted because they do not appear in the new list that will be looped for unmounting.\n3. Any ideas on how to approach this? The (non-react) DOM DIV per Marker needs to exist, so I need to find a way for the React component to be rendered there and use the React lifecycles without having to unmount it and recreate it on every rerender.\n\nThank you!\n\n```\n componentWillUpdate() {\n\n    const {props, state} = this;\n    const {cars} = props;\n\n\n    cars.map((car,i) => {     //Clean the previous React components\n      try {\n        React.unmountComponentAtNode(document.getElementById(`s${car.id}`));\n      }\n      catch (e) {\n        //do nothing, continue execution\n      }});\n\n      window.map.carsLayerGroup.clearLayers();\n\n      cars.map((car,i) => {\n         var myIcon = L.divIcon({\n          //className: '',\n          iconSize: [24, 24],\n          html: `<div id=\"s${car.id}\"></div>`,\n        });\n        var ang = 45;\n        var lat = car.lat+0.02220,\n            lon =  car.lon+0.02220;\n        var marker = L.marker([lat, lon], {icon: myIcon});\n        window.map.carsLayerGroup.addLayer(marker);\n\n        if (myData.filters[`checkCarsOfType${car.type}`])\n          React.render(<Car key={car.id} car={car} carIndex={i} {...props}/>,document.getElementById(`${car.id}`));\n      });\n```\n",
  "closed_by": {
    "login": "zpao",
    "id": 8445,
    "node_id": "MDQ6VXNlcjg0NDU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zpao",
    "html_url": "https://github.com/zpao",
    "followers_url": "https://api.github.com/users/zpao/followers",
    "following_url": "https://api.github.com/users/zpao/following{/other_user}",
    "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
    "organizations_url": "https://api.github.com/users/zpao/orgs",
    "repos_url": "https://api.github.com/users/zpao/repos",
    "events_url": "https://api.github.com/users/zpao/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zpao/received_events",
    "type": "User",
    "site_admin": false
  }
}
