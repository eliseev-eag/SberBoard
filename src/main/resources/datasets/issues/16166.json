{
  "url": "https://api.github.com/repos/facebook/react/issues/16166",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16166/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16166/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16166/events",
  "html_url": "https://github.com/facebook/react/pull/16166",
  "id": 470621207,
  "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk5NTI3MjIw",
  "number": 16166,
  "title": "[Scheduler] Use rIC to post first callback",
  "user": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-07-20T01:39:17Z",
  "updated_at": "2019-07-22T20:12:34Z",
  "closed_at": "2019-07-22T20:12:34Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/16166",
    "html_url": "https://github.com/facebook/react/pull/16166",
    "diff_url": "https://github.com/facebook/react/pull/16166.diff",
    "patch_url": "https://github.com/facebook/react/pull/16166.patch"
  },
  "body": "Scheduler uses `requestAnimationFrame` to post tasks to the browser. If this happens at the beginning of a frame, the callback might not fire until the subsequent frame, even if the main thread is idle.\r\n\r\nOur theory was that this wouldn't be an issue in practice, because once the first rAF fires, we schedule the next rAF as early as possible in that frame. Combined with our heuristic for computing frame deadlines, we shouldn't get any idle time in between frames â€” only before the *first* frame.\r\n\r\nThis reasoning holds true when you have a small number of large tasks, such as the ones posted by React. The idle time before the task starts is negligible relative to the lifetime of the entire task.\r\n\r\nHowever, it does not hold if you have many small tasks posted over a span of time, perhaps spawned by a flurry of IO events. In this case, instead of single, contiguous rAF loop preceded by an idle frame, you get many rAF loops preceded by many idle frames. Our new theory is that this is contributing to poor main thread utilization during page loads.\r\n\r\nTo try to reclaim as much idle time as possible, this PR adds two experimental flags. The first one adds a `requestIdleCallback` call to start the rAF loop, which will fire before rAF if there's idle time left in the frame. (We still call rAF in case there isn't. We start working in whichever event fires first.)\r\n\r\nThe second flag tries a similar strategy using `setTimeout(fn, 0)`. If the timer fires before rAF, we'll assume that the main thread is idle.\r\n\r\nIf either `requestIdleCallback` or `setTimeout` fires before rAF, we'll immediately perform some work. Since we don't have a real frame time that we can use to compute the frame deadline, we might miss the next vsync, but this is fine because we can catch up during the next frame, by which point a real rAF will have fired and the loop can proceed the same way it does today.\r\n\r\nTest plan: Try this on Facebook to see if it improves load times.",
  "closed_by": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  }
}
