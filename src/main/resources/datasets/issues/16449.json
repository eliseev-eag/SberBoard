{
  "url": "https://api.github.com/repos/facebook/react/issues/16449",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16449/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16449/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16449/events",
  "html_url": "https://github.com/facebook/react/issues/16449",
  "id": 482196710,
  "node_id": "MDU6SXNzdWU0ODIxOTY3MTA=",
  "number": 16449,
  "title": "Implicitly access parent props via context",
  "user": {
    "login": "esr360",
    "id": 3431882,
    "node_id": "MDQ6VXNlcjM0MzE4ODI=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/3431882?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/esr360",
    "html_url": "https://github.com/esr360",
    "followers_url": "https://api.github.com/users/esr360/followers",
    "following_url": "https://api.github.com/users/esr360/following{/other_user}",
    "gists_url": "https://api.github.com/users/esr360/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/esr360/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/esr360/subscriptions",
    "organizations_url": "https://api.github.com/users/esr360/orgs",
    "repos_url": "https://api.github.com/users/esr360/repos",
    "events_url": "https://api.github.com/users/esr360/events{/privacy}",
    "received_events_url": "https://api.github.com/users/esr360/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-08-19T09:16:43Z",
  "updated_at": "2019-09-03T11:38:47Z",
  "closed_at": "2019-09-03T11:38:47Z",
  "author_association": "NONE",
  "body": "I would like to request a feature for consideration.\r\n\r\nTypically when we want information in a descendant component we must explicitly pass the data down via props (prop drilling). The context API allows us to avoid doing this if we create, import and maintain our own context object wherever we need it.\r\n\r\nInside a functional component using the latest context API with hooks, this may look something like:\r\n\r\n```jsx\r\nimport React, { useContext } from 'react';\r\nimport myContext from '../myContext';\r\n\r\n const MyComp = (props) => { \r\n  const context = useContext(myContext);\r\n\r\n  return(\r\n    <div>\r\n      ...\r\n    </div>\r\n   );\r\n}\r\n```\r\n\r\n([source](https://stackoverflow.com/a/55848811/2253888)). If I'm not mistaken, the legacy context API exposed `context` as a second argument to functional components. For all intents and purposes, context is an opt-in feature (meaning there is no default/out-the-box `context` object exposed). \r\n\r\nI feel as though there would be good benefit in exposing a default context object which exposes information about ancestral components (essentially exposing the parent tree). After all, such information would qualify for the regular definition of \"context\".\r\n\r\nConsider the below JSX:\r\n\r\n```jsx\r\nconst Alpha = (props) = (\r\n  <Beta fizz='buzz'>\r\n    <Gamma isActive>\r\n      <Delta />\r\n    </Gamma>\r\n    <Gamma>\r\n      <Delta />\r\n    </Gamma>\r\n  </Beta>\r\n);\r\n```\r\n\r\nConsider the `<Delta>` component - we want access to the parent `isActive` prop on the `Gamma` component and the `fizz` prop on the `Beta` component. The typical recommendation is to explicitly pass props to components that need the values. In the above case, it would be more convenient to access them implicitly.\r\n\r\nA scenario where I were able to do this would be wonderful:\r\n\r\n```jsx\r\nconst Delta = (props, context) => {\r\n  console.log(context.Beta.fizz); // => 'buzz'\r\n\r\n  return (\r\n    <div style={context.Gamma.isActive ? 'block' : 'none'}>\r\n      Lorem ipsum\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nThus, essentially exposing parent props. Currently if I want similar behaviour I need to [create wrapper components](https://levelup.gitconnected.com/lifting-props-up-f1be43a1d7a4) (or I have to explicitly create, export and import various context objects).\r\n\r\nDoes anyone else feel as though something like this would be useful? Or does it offer too much potential for abuse? For \"context\", this would probably mostly help with things like styling, where it's often more convenient to work in this manner. Thanks!",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
