{
  "url": "https://api.github.com/repos/facebook/react/issues/2659",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/2659/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/2659/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/2659/events",
  "html_url": "https://github.com/facebook/react/issues/2659",
  "id": 51029514,
  "node_id": "MDU6SXNzdWU1MTAyOTUxNA==",
  "number": 2659,
  "title": "componentDidUpdate fires before browser paint operation",
  "user": {
    "login": "jackwanders",
    "id": 752393,
    "node_id": "MDQ6VXNlcjc1MjM5Mw==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/752393?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jackwanders",
    "html_url": "https://github.com/jackwanders",
    "followers_url": "https://api.github.com/users/jackwanders/followers",
    "following_url": "https://api.github.com/users/jackwanders/following{/other_user}",
    "gists_url": "https://api.github.com/users/jackwanders/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jackwanders/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jackwanders/subscriptions",
    "organizations_url": "https://api.github.com/users/jackwanders/orgs",
    "repos_url": "https://api.github.com/users/jackwanders/repos",
    "events_url": "https://api.github.com/users/jackwanders/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jackwanders/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2014-12-04T21:10:54Z",
  "updated_at": "2015-08-28T16:29:10Z",
  "closed_at": "2014-12-10T21:19:04Z",
  "author_association": "NONE",
  "body": "I'm not sure that this isn't by design, but I discovered today that the lifecycle methods executed after a React element renders (i.e. `componentDidMount` and `componentDidUpdate`, executed at the point noted below) appear to be executed before the browser's paint operation.\n\n[src/browser/ReactReconcileTransaction.js#L81](https://github.com/facebook/react/blob/master/src/browser/ReactReconcileTransaction.js#L81)\n\nThis introduced some unexpected behavior in a scenario similar to this example:\n\n``` javascript\nvar Widget = React.createClass({\n  componentWillUpdate: function() {\n    this.stashedStyleValue = this.getDOMNode().style.someValue;\n    this.getDOMNode().style.someValue = 'none';\n  },\n  componentDidUpdate: function() {\n    this.getDOMNode().style.someValue = this.stashedStyleValue;\n  },\n  render: function() {\n    return (\n      <div>...</div>\n    );\n  }\n});\n```\n\nGiven the React class above, I would expect the following order of operations when the component re-renders in the browser:\n1. `componentWillUpdate` fires\n2. `render` fires\n3. browser re-paints the DOM\n4. `componentDidUpdate` fires\n\nHowever, this is not the case. The actual behavior is that steps 3 and 4 occur in the reverse order. In Chrome, when I record a timeline of events, I see the following:\n1. `Recalculate Style`\n2. `Update Layer Tree`\n3. `Paint x 3`\n4. `Composite Layers`\n\nIt this example, it looks like `this.getDOMNode().style.someValue` changes, then changes back before the paint ever occurs, rendering my efforts futile without manually deferring the logic in `componentDidUpdate` using `window.setTimeout`.\n\nTo test my theory that the order would be different if `componentDidUpdate` fired after the paint operation, I made the following changes to the React source:\n\nhttps://github.com/jackwanders/react/compare/defer-post-render-lifecycle-methods?expand=1\n\nWhen I load the same element in the browser using the modified code, the timeline in Chrome is as follows:\n1. `Recalculate Style`\n2. `Update Layer Tree`\n3. `Paint x 3`\n4. `Composite Layers`\n5. `Recalculate Style`\n\nThis is the order of operations I would expect with the provided lifecycle methods defined in my example class above.\n\nAs I said, I can't say for certain that this is something that should be corrected, but I wanted to submit this issue and hopefully get some feedback from a React contributor, who is sure to have more domain knowledge and can explain why the existing flow exists, if indeed it is as designed.\n\nThanks.\n",
  "closed_by": {
    "login": "zpao",
    "id": 8445,
    "node_id": "MDQ6VXNlcjg0NDU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zpao",
    "html_url": "https://github.com/zpao",
    "followers_url": "https://api.github.com/users/zpao/followers",
    "following_url": "https://api.github.com/users/zpao/following{/other_user}",
    "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
    "organizations_url": "https://api.github.com/users/zpao/orgs",
    "repos_url": "https://api.github.com/users/zpao/repos",
    "events_url": "https://api.github.com/users/zpao/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zpao/received_events",
    "type": "User",
    "site_admin": false
  }
}
