{
  "url": "https://api.github.com/repos/facebook/react/issues/12436",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12436/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12436/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12436/events",
  "html_url": "https://github.com/facebook/react/issues/12436",
  "id": 307799797,
  "node_id": "MDU6SXNzdWUzMDc3OTk3OTc=",
  "number": 12436,
  "title": "Functional components with lifecycle methods and state",
  "user": {
    "login": "Josema",
    "id": 1819888,
    "node_id": "MDQ6VXNlcjE4MTk4ODg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1819888?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Josema",
    "html_url": "https://github.com/Josema",
    "followers_url": "https://api.github.com/users/Josema/followers",
    "following_url": "https://api.github.com/users/Josema/following{/other_user}",
    "gists_url": "https://api.github.com/users/Josema/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Josema/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Josema/subscriptions",
    "organizations_url": "https://api.github.com/users/Josema/orgs",
    "repos_url": "https://api.github.com/users/Josema/repos",
    "events_url": "https://api.github.com/users/Josema/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Josema/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-03-22T20:19:52Z",
  "updated_at": "2018-03-22T21:13:32Z",
  "closed_at": "2018-03-22T21:13:32Z",
  "author_association": "NONE",
  "body": "What about if we could have functional components that can be turned into components with state.\r\n\r\nThe problem:\r\n```js\r\nfunction Button({ value }) {\r\n  return <button>{value}</button>\r\n}\r\n```\r\nIf our needs changes and we need to apply local state we must change this function into a class\r\n```js\r\nclass Button extends Component {\r\n  constructor(props) { ... }\r\n  shouldComponentUpdate() { ... }\r\n  render() {\r\n       return <button>{this.props.value} {this.state.countdown}</button>\r\n  }\r\n}\r\n```\r\n\r\nIf we use the prototype of the function we can reuse our function.\r\n\r\n```js\r\nfunction Button({ value }, { countdown }) {\r\n  return <button>{value} {countdown}</button>\r\n}\r\n\r\nButton.prototype.constructor = props => { ... }\r\nButton.prototype.shouldComponentUpdate = () => { ... }\r\n```\r\n\r\nThe benefits of this approach are that we educate people to use functional components in the first place. Also, avoid rewrite too much code when adding features to our app.\r\n\r\nOf course there are downsides. This change a lot the style of the code that we all learned in React, and also this is much more verbose `Button.prototype.shouldComponentUpdate = () => { ... }` than `shouldComponentUpdate() { ... }`\r\n\r\nBut in my opinion, the code is much more elegant and remove the need of using classes which personally I don't like at all.\r\n\r\nAny thoughts? Is this too crazy to add as an option/feature?",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
