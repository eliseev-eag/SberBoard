{
  "url": "https://api.github.com/repos/facebook/react/issues/12551",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12551/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12551/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12551/events",
  "html_url": "https://github.com/facebook/react/issues/12551",
  "id": 311532485,
  "node_id": "MDU6SXNzdWUzMTE1MzI0ODU=",
  "number": 12551,
  "title": "New Context Provider may block Old context propagation if children are constant",
  "user": {
    "login": "Jessidhia",
    "id": 73085,
    "node_id": "MDQ6VXNlcjczMDg1",
    "avatar_url": "https://avatars1.githubusercontent.com/u/73085?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Jessidhia",
    "html_url": "https://github.com/Jessidhia",
    "followers_url": "https://api.github.com/users/Jessidhia/followers",
    "following_url": "https://api.github.com/users/Jessidhia/following{/other_user}",
    "gists_url": "https://api.github.com/users/Jessidhia/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Jessidhia/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Jessidhia/subscriptions",
    "organizations_url": "https://api.github.com/users/Jessidhia/orgs",
    "repos_url": "https://api.github.com/users/Jessidhia/repos",
    "events_url": "https://api.github.com/users/Jessidhia/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Jessidhia/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 40929151,
      "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
      "name": "Type: Bug",
      "color": "b60205",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2018-04-05T09:18:08Z",
  "updated_at": "2018-05-24T01:22:31Z",
  "closed_at": "2018-04-26T19:59:18Z",
  "author_association": "COLLABORATOR",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIt seems that, if the children of a new-style `React.createContext()` context `Provider` are constant, the `Provider` can block updates from old-style `this.context` context providers from propagating to `this.context` consumers.\r\n\r\nThis sandbox demonstrates the issue. Clicking the button with a number will correctly increment the `Root`'s `state` and `context`, but the update is only propagated to the `Child3`'s `context` (and its button) when the \"Colors!\" button is clicked, as it causes an update to the `value` of the new-style `Provider`:\r\n\r\nhttps://codesandbox.io/s/ol4lpokpjy\r\n\r\n<details>\r\n<summary>Copy of the source code in the sandbox</summary>\r\n\r\n```jsx\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Root extends React.Component {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    };\r\n    this.countUp = this.countUp.bind(this);\r\n  }\r\n\r\n  getChildContext() {\r\n    return {\r\n      ...this.context,\r\n      count: this.state.count,\r\n      countUp: this.countUp\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n\r\n  countUp() {\r\n    this.setState(({ count }) => ({ count: count + 1 }));\r\n  }\r\n}\r\n\r\nRoot.childContextTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  countUp: PropTypes.func.isRequired\r\n};\r\n\r\nconst ctx = React.createContext();\r\n\r\nclass Child1 extends React.Component {\r\n  constructor(props: { onClick(): void }) {\r\n    super(props);\r\n    this.state = {\r\n      color: randomHexColor(),\r\n      newColor: this.newColor.bind(this)\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ctx.Provider value={this.state}>{this.props.children}</ctx.Provider>\r\n    );\r\n  }\r\n\r\n  newColor() {\r\n    const color = randomHexColor();\r\n    this.setState(() => ({ color }));\r\n  }\r\n}\r\n\r\nfunction randomHexColor() {\r\n  const colorStr = Math.floor(Math.random() * (Math.pow(2, 24) - 1)).toString(\r\n    16\r\n  );\r\n  return \"#000000\".slice(0, -colorStr.length) + colorStr;\r\n}\r\n\r\nclass Child2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <ctx.Consumer>\r\n        {ctx => (\r\n          <React.Fragment>\r\n            <Child3 color={ctx.color} />\r\n            <button onClick={ctx.newColor}>Colors!</button>\r\n          </React.Fragment>\r\n        )}\r\n      </ctx.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nclass Child3 extends React.Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        style={{ color: this.props.color }}\r\n        onClick={this.context.countUp}\r\n      >\r\n        {this.context.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nChild3.contextTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  countUp: PropTypes.func.isRequired\r\n};\r\n\r\nReactDOM.render(\r\n  <Root>\r\n    <Child1>\r\n      <Child2 />\r\n    </Child1>\r\n  </Root>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n```\r\n\r\n</details>\r\n\r\n**What is the expected behavior?**\r\n\r\nBoth old-style and new-style context updates should coexist.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.3.1; also broken in 16.3.0.\r\n\r\n---\r\n\r\nThis seems to only happen if the `children` of the `Provider` are constant, which is what happens when the children are provided on the first and only `ReactDOM.render` call. If `Child1` is updated to directly use `<Child2/>` instead of `{this.props.children}`, the problem does not happen.\r\n\r\nThis can also be a problem when using a production optimization that hoists constant elements outside the Component if the specified children are constant, which would even defeat the fix/workaround for the example above.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
