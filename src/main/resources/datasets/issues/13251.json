{
  "url": "https://api.github.com/repos/facebook/react/issues/13251",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13251/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13251/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13251/events",
  "html_url": "https://github.com/facebook/react/issues/13251",
  "id": 343754026,
  "node_id": "MDU6SXNzdWUzNDM3NTQwMjY=",
  "number": 13251,
  "title": "Getting SSR to work with the React Context API",
  "user": {
    "login": "maniator",
    "id": 539579,
    "node_id": "MDQ6VXNlcjUzOTU3OQ==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/539579?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/maniator",
    "html_url": "https://github.com/maniator",
    "followers_url": "https://api.github.com/users/maniator/followers",
    "following_url": "https://api.github.com/users/maniator/following{/other_user}",
    "gists_url": "https://api.github.com/users/maniator/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/maniator/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/maniator/subscriptions",
    "organizations_url": "https://api.github.com/users/maniator/orgs",
    "repos_url": "https://api.github.com/users/maniator/repos",
    "events_url": "https://api.github.com/users/maniator/events{/privacy}",
    "received_events_url": "https://api.github.com/users/maniator/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 620368407,
      "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
      "name": "Resolution: Needs More Information",
      "color": "fffde7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 15,
  "created_at": "2018-07-23T18:56:35Z",
  "updated_at": "2018-08-16T21:36:06Z",
  "closed_at": "2018-08-16T21:36:06Z",
  "author_association": "NONE",
  "body": "Basically we have a module that reads the client data on server side render and is supposed to provide the data to the renderToString with the data it found (and the client renders with a `window.__SOME_DATA__`, but I would not want to use a global on a express route)\r\n\r\nHere is where we are:\r\n\r\n\r\n    const contentService = new ServerService();\r\n    const app = (\r\n      <StaticRouter context={context} location={req.url}>\r\n        <App/>\r\n      </StaticRouter>\r\n    );\r\n\r\n    try {\r\n      await contentService.getSomeData(app);\r\n    } catch (error) {\r\n      console.log('THERE WAS A MARKUP ERROR', error);\r\n    }\r\n\r\n    const markup = renderToString(\r\n      contentService.withProvider(\r\n        app\r\n      )\r\n    );\r\n\r\nThe server service looks like so:\r\n\r\n    export class ServerService {\r\n      items = {};\r\n    \r\n      getSomeData = async (app) => {\r\n        // gets some server side data and saves it to the `items` object\r\n      };\r\n    \r\n      withProvider = (app) => {\r\n        const providedApp = (\r\n          <ServerProvider data={this.items}>\r\n            { app }\r\n          </ServerProvider>\r\n        );\r\n    \r\n        console.log('ITEMS provided', { data: this.items });\r\n    \r\n        return providedApp;\r\n      };\r\n    \r\n      getScriptData() {\r\n        return `\r\n          <script>\r\n              window. __SOME_DATA__ = ${JSON.stringify(this.items)};\r\n          </script>\r\n        `;\r\n      }\r\n    }\r\n\r\nAnd then last but not least my provider:\r\n\r\n    import * as React from 'react';\r\n    \r\n    const ServerContext = React.createContext(null);\r\n    \r\n    export class ServerProvider extends React.Component {\r\n      render () {\r\n        console.log('Providing data', { props: this.props });\r\n    \r\n        return (\r\n          <ServerContext.Provider value={{ ...this.props.data }}>\r\n            {this.props.children}\r\n          </ServerContext.Provider>\r\n        );\r\n      }\r\n    }\r\n    export const ServerConsumer = ServerContext.Consumer;\r\n\r\nThe problem is that it seems to set the data in the `withProvider` function fine, but when I use the `ServerConsumer` component, it seems to contain **nothing** -- but it _should_ contain the data that was passed to the provider!\r\n\r\nThe context api has worked beautifully for when I need it on the client side, but it seems to be failing for me on the server side.\r\n\r\nThis is with react/react-dom `16.4.1`\r\n\r\n(originally posted here: https://stackoverflow.com/q/51485320/561731)",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
