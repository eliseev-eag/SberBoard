{
  "url": "https://api.github.com/repos/facebook/react/issues/12762",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12762/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12762/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12762/events",
  "html_url": "https://github.com/facebook/react/issues/12762",
  "id": 321098249,
  "node_id": "MDU6SXNzdWUzMjEwOTgyNDk=",
  "number": 12762,
  "title": "Cursor jumps to end of input when onChange doesn't call setState",
  "user": {
    "login": "danielrob",
    "id": 5865302,
    "node_id": "MDQ6VXNlcjU4NjUzMDI=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/5865302?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielrob",
    "html_url": "https://github.com/danielrob",
    "followers_url": "https://api.github.com/users/danielrob/followers",
    "following_url": "https://api.github.com/users/danielrob/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielrob/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielrob/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielrob/subscriptions",
    "organizations_url": "https://api.github.com/users/danielrob/orgs",
    "repos_url": "https://api.github.com/users/danielrob/repos",
    "events_url": "https://api.github.com/users/danielrob/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielrob/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 127893911,
      "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
      "name": "Component: DOM",
      "color": "fef2c0",
      "default": false
    },
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2018-05-08T08:54:03Z",
  "updated_at": "2019-04-29T10:00:29Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "[Edit]: **I'm asking for a feature**.\r\n\r\n**Current Behaviour**\r\nAn input `onChange` function that returns a value equalling the prior value causes the cursor to jump to the end of the input. This is the same as [this comment from #995](https://github.com/facebook/react/issues/955#issuecomment-327069204) formally raised as a feature request. \r\n\r\nRepro sandbox: https://codesandbox.io/s/n4k3yx47j\r\nThat same code:  \r\n```javascript\r\nimport React from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nclass Input extends React.Component {\r\n  state = { value: \"TypeANumber\" };\r\n\r\n  onChange = e => {\r\n    let nextValue = e.target.value;\r\n\r\n    if (/[0-9]/.test(nextValue)) {\r\n      nextValue = this.state.value;\r\n    }\r\n    this.setState({ value: nextValue });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"text\"\r\n        value={this.state.value}\r\n        onChange={this.onChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nrender(<Input />, document.getElementById(\"root\"));\r\n```\r\n\r\n**What is the expected behavior?**\r\nI'd like the cursor not to jump in the special case where the returned changed value is a rejected change i.e. the 'noop' change. \r\n\r\nI understand fully that react cannot predict cursor position if the value is _changed_ in `onChange`, ~however I cannot currently find an npm module that allows free-length regex filters (vs a fixed length mask)~ or a way to implement a filter myself, without the cursor jumping in this case. \r\n\r\n[Edit]: \r\nSince raising I now fully see this as a feature request for handling a special case of a behaviour that indeed is not a bug, differently. It would be a nice to have as it would allow very straightforward implementation of filters. \r\n\r\nRegarding the non-clarity of how to deal with the general case of non-jumping cursors I think a modernized best practice example would be ideal, but that discussion still lives at #955.  \r\n\r\nI'd be totally fine with this issue being closed by assisting instead with the education of handling the general case. Though, this would still be a nice to have for the API, if possible. \r\n",
  "closed_by": null
}
