{
  "url": "https://api.github.com/repos/facebook/react/issues/14658",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14658/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14658/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14658/events",
  "html_url": "https://github.com/facebook/react/issues/14658",
  "id": 401823391,
  "node_id": "MDU6SXNzdWU0MDE4MjMzOTE=",
  "number": 14658,
  "title": "`useCallback()` & `useMemo()` automatically with a Babel Plug-in",
  "user": {
    "login": "DAB0mB",
    "id": 7648874,
    "node_id": "MDQ6VXNlcjc2NDg4NzQ=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7648874?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/DAB0mB",
    "html_url": "https://github.com/DAB0mB",
    "followers_url": "https://api.github.com/users/DAB0mB/followers",
    "following_url": "https://api.github.com/users/DAB0mB/following{/other_user}",
    "gists_url": "https://api.github.com/users/DAB0mB/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/DAB0mB/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/DAB0mB/subscriptions",
    "organizations_url": "https://api.github.com/users/DAB0mB/orgs",
    "repos_url": "https://api.github.com/users/DAB0mB/repos",
    "events_url": "https://api.github.com/users/DAB0mB/events{/privacy}",
    "received_events_url": "https://api.github.com/users/DAB0mB/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2019-01-22T15:38:42Z",
  "updated_at": "2019-03-10T06:45:26Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature request.\r\n\r\n**What is the current behavior?**\r\n\r\nWe need to `useCallback()` and `useMemo()` which seems redundant and can cost us in performance if not used right, which is likely to happen.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```js\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = data.filter(filterPredicate).sort(sortComparator)\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"back-btn\" onClick={() => history.pop()} />\r\n      <ul className=\"data-list\">\r\n        {transformedData.map(({ id, value }) => (\r\n          <li className=\"data-item\" key={id} onClick={() => history.push(`data/${id}`)}>{value}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nJust like the [docs](https://reactjs.org/docs/hooks-reference.html#usecallback) suggest:\r\n\r\n```\r\nIn the future, a sufficiently advanced compiler could create this array automatically.\r\n```\r\n\r\nAccordingly, I have implemented a Babel-plug-in that does exactly that; see [babel-plugin-react-persist](https://github.com/DAB0mB/babel-plugin-react-persist). Given the code snippet above, the plug-in should generate the following output:\r\n\r\n```js\r\nlet _anonymousFnComponent, _anonymousFnComponent2\r\n\r\nexport default ({ data, sortComparator, filterPredicate, history }) => {\r\n  const transformedData = React.useMemo(() =>\r\n    data.filter(filterPredicate).sort(sortComparator)\r\n  , [data, data.filter, filterPredicate, sortComparator])\r\n\r\n  return React.createElement(_anonymousFnComponent2 = _anonymousFnComponent2 || (() => {\r\n    const _onClick2 = React.useCallback(() => history.pop(), [history, history.pop])\r\n\r\n    return (\r\n      <div>\r\n        <button className=\"back-btn\" onClick={_onClick2} />\r\n        <ul className=\"data-list\">\r\n          {transformedData.map(({ id, value }) =>\r\n            React.createElement(_anonymousFnComponent = _anonymousFnComponent || (() => {\r\n              const _onClick = React.useCallback(() =>\r\n                history.push(`data/${id}`)\r\n              , [history, history.push, id])\r\n\r\n              return (\r\n                <li className=\"data-item\" key={id} onClick={_onClick}>\r\n                  {value}\r\n                </li>\r\n              )\r\n            }), { key: id })\r\n          )}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }), null)\r\n}\r\n```\r\n\r\nThe plug-in will:\r\n\r\n- `useCallback()` automatically when a function is created.\r\n- `useMemo()` automatically when a value is assigned.\r\n- Will memoize inline callbacks.\r\n\r\nI don't see however how can `useEffect()` be inferred automatically and if it's a good idea. The plug-in is not a feature request directly for React, but since it's stated in the docs I thought maybe it can be useful somehow. Maybe it can potentially be included as part of `create-react-app`? Would like to hear your thoughts about it. An alternative solution is suggested at #14406, but I don't see why do this at runtime when everything can be done ahead of time and save processing power.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8-alpha (hooks)\r\n",
  "closed_by": null
}
