{
  "url": "https://api.github.com/repos/facebook/react/issues/15257",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15257/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15257/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15257/events",
  "html_url": "https://github.com/facebook/react/issues/15257",
  "id": 427114368,
  "node_id": "MDU6SXNzdWU0MjcxMTQzNjg=",
  "number": 15257,
  "title": "[Umbrella] React Flare",
  "user": {
    "login": "necolas",
    "id": 239676,
    "node_id": "MDQ6VXNlcjIzOTY3Ng==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/239676?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/necolas",
    "html_url": "https://github.com/necolas",
    "followers_url": "https://api.github.com/users/necolas/followers",
    "following_url": "https://api.github.com/users/necolas/following{/other_user}",
    "gists_url": "https://api.github.com/users/necolas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/necolas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/necolas/subscriptions",
    "organizations_url": "https://api.github.com/users/necolas/orgs",
    "repos_url": "https://api.github.com/users/necolas/repos",
    "events_url": "https://api.github.com/users/necolas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/necolas/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1296748300,
      "node_id": "MDU6TGFiZWwxMjk2NzQ4MzAw",
      "url": "https://api.github.com/repos/facebook/react/labels/React%20Flare",
      "name": "React Flare",
      "color": "63f2ff",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "necolas",
    "id": 239676,
    "node_id": "MDQ6VXNlcjIzOTY3Ng==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/239676?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/necolas",
    "html_url": "https://github.com/necolas",
    "followers_url": "https://api.github.com/users/necolas/followers",
    "following_url": "https://api.github.com/users/necolas/following{/other_user}",
    "gists_url": "https://api.github.com/users/necolas/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/necolas/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/necolas/subscriptions",
    "organizations_url": "https://api.github.com/users/necolas/orgs",
    "repos_url": "https://api.github.com/users/necolas/repos",
    "events_url": "https://api.github.com/users/necolas/events{/privacy}",
    "received_events_url": "https://api.github.com/users/necolas/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "necolas",
      "id": 239676,
      "node_id": "MDQ6VXNlcjIzOTY3Ng==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/239676?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/necolas",
      "html_url": "https://github.com/necolas",
      "followers_url": "https://api.github.com/users/necolas/followers",
      "following_url": "https://api.github.com/users/necolas/following{/other_user}",
      "gists_url": "https://api.github.com/users/necolas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/necolas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/necolas/subscriptions",
      "organizations_url": "https://api.github.com/users/necolas/orgs",
      "repos_url": "https://api.github.com/users/necolas/repos",
      "events_url": "https://api.github.com/users/necolas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/necolas/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "trueadm",
      "id": 1519870,
      "node_id": "MDQ6VXNlcjE1MTk4NzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trueadm",
      "html_url": "https://github.com/trueadm",
      "followers_url": "https://api.github.com/users/trueadm/followers",
      "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
      "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
      "organizations_url": "https://api.github.com/users/trueadm/orgs",
      "repos_url": "https://api.github.com/users/trueadm/repos",
      "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trueadm/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 18,
  "created_at": "2019-03-29T18:08:00Z",
  "updated_at": "2019-09-27T23:55:21Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "body": "This issue tracks tasks related to the React DOM implementation of the experimental React Events API (`react-events`) aka React Flare (our internal code-name for the project). The idea is to extend React's event system to include high-level events that allow for consistent cross-device and cross-platform behavior.\r\n\r\n*Note: For now this is completely experimental and won't affect the open source builds of React.*\r\n\r\n## Core\r\n\r\n- [ ] Document specific UX patterns that this enables and fixes. (inc. from my workplace post on styles, Dan & Brian dev tools, apps, etc.)\r\n- [x] Every user-facing event should have a `timeStamp`. Should we provide a standard way to derive data that might be common across events and require different logic for different positional information, e.g., point, delta, offset, etc?\r\n- [ ] How to test discrete vs continuous events?\r\n- [ ] Should we polyfill pointer events or not dispatch emulated touch/mouse events in the core, to avoid multiple event components needing to implement the same logic to ignore emulated events?\r\n- [x] Investigate native pointer capture for retargeting events - https://www.w3.org/TR/pointerevents/#pointer-capture. This could be particularly useful for drag/swipe UX.\r\n- [x] Limit all event components to have a single host node as child? If not enforced for all components, we might need this for Hover/Focus/Press at least.\r\n- FYI https://github.com/facebook/react/pull/12919\r\n- [x] Optimize bundle output.\r\n- [x] Replace magic object export with `React.unstable_createEventComponent(type: Symbol | number, responder: ReactEventResponder, displayName: ?string)`\r\n- [x] Document core API for building responders\r\n- [x] Stop propagation by default but scope to event module types.\r\n- [x] Investigate ways to listen to root events without first needing to wait for a target event to be dispatched to the event component.\r\n- [x] Remove `listener` from event object passed to callbacks like `onPress`\r\n- [x] Ensure discrete events do not unnecessarily force flush previous non-discrete events.\r\n- [x] Ensure event responder get unmounted correctly and pending events (e.g. long press) properly get removed when doing so. Maybe an unmount lifecycle method needs adding to event responders?\r\n- [x] Create a new synthetic event and dispatch mechanism that relies on the event being generated in the event responder module, rather than from React. This allows for the event to be better typed and have a much simpler implementation for how React fires the event when dispatched + it means we can avoid pulling in the current SyntheticEvent system and all its dependencies.\r\n\r\n## Ownership\r\n\r\n- [ ] Decide on prop name equivalents to RN `onStartShouldSetResponder` and `onMoveShouldSetResponder`.\r\n\r\n## Focus module\r\n\r\n- [ ] Determine the potential use cases for DOM `focusin` and `focusout` events.\r\n- [x] Cross browser and device/modality testing.\r\n- [x] add `focusVisible` functionality\r\n- [x] Add README\r\n- [x] Write unit tests \r\n  - [x] disabled\r\n  - [x] onBlur\r\n  - [x] onFocus\r\n  - [x] onFocusChange\r\n  - [x] onFocusVisibleChange\r\n- [x] Determine event object data (might require a [global \"modality\" tracker](https://github.com/necolas/react-native-web/blob/9872c9716973870ab3cc129215a17fc6cbb1b112/packages/react-native-web/src/exports/StyleSheet/modality.js) to help attach this info to focus/blur events)\r\n```\r\n{\r\n  pointerType: 'mouse' | 'pen' | 'touch' | 'keyboard'\r\n}\r\n```\r\n\r\n## Hover module\r\n\r\n- [x] Cross browser and device/modality testing.\r\n- [x] Determine event object data.\r\n```\r\n{\r\n  pointerType: 'mouse' | 'pen',\r\n  point: { x: number, y: number }\r\n}\r\n```\r\n- [x] Write unit tests (https://github.com/facebook/react/pull/15283)\r\n  - [x] disabled\r\n  - [x] onHoverMove\r\n  - [x] onHoverChange\r\n  - [x] onHoverStart\r\n  - [x] onHoverEnd\r\n  - [x] delayHoverStart\r\n  - [x] delayHoverEnd\r\n  - [x] ensure doesn't respond to emulated mouse events\r\n- [x] Add README\r\n- [x] Add `delayHoverStart` and `delayHoverEnd` props.\r\n- [x] Rename events to `onHoverStart`, `onHoverEnd`.\r\n\r\n## Press module\r\n\r\n- [x] Cross browser and device/modality testing.\r\n- [ ] Behaviour for selecting text within pressable. End press on selection event? Add a new props to configure the behaviour, like `onMoveShouldEndPress`?\r\n- [x] Allow contextMenu to display when element is a link and ctrl is held down during press\r\n- [x] Cancel long press if active press moves (exceeding threshold, IIRC RN uses 10px delta)\r\n- [x] Reactivate when moving out-of-bounds press back into the responder region.\r\n- [x] BUG: press start -> move out of target -> release -> tap press. The second press doesn't cause `onPressStart/Change` to be called, even thought those events are dispatched to the core responder system. (https://github.com/facebook/react/pull/15507)\r\n- [x] FYI: `touchAction:'none'` is needed on `currentTarget` to prevent browser cancelling after `pointermove`.\r\n- [x] Prevent contextMenu appearing during a long press on touch screens.\r\n- [x] Account for UX involving interactions on links with modifier keys held.\r\n- [x] Add `pressRetentionOffset` to control when press is released after moving the pointer away from the press target.\r\n- [x] Add README\r\n- [x] Always prevent default on <a> clicks. Maybe have an override to turn off behaviour?\r\n- [x] Rename events to `onPressStart`, `onPressEnd` (https://github.com/facebook/react/pull/15263).\r\n- [x] Change `longPressCancelsPress` to `onLongPressShouldCancelPress` (https://github.com/facebook/react/pull/15263).\r\n- [x] Change default `delayLongPress` to 500ms (see note in https://github.com/facebook/react/pull/15290)\r\n- [x] Add keyboard support for all events.\r\n- [x] Prevent scroll-down page when pressing Spacebar on keyboard to interact\r\n- [x] Add `delayPressStart` and `delayPressEnd` props.\r\n- [x] Write unit tests (https://github.com/facebook/react/pull/15290)\r\n  - [x] disabled\r\n  - [x] onLongPress\r\n  - [x] onLongPressChange\r\n  - [x] onLongPressShouldCancelPress\r\n  - [x] onPress\r\n  - [x] onPressChange\r\n  - [x] onPressStart\r\n  - [x] onPressEnd\r\n  - [x] delayLongPress\r\n  - [x] delayPressStart\r\n  - [x] delayPressEnd\r\n  - [x] pressRententionOffset / pressRect\r\n  - [x] emulated mouse events\r\n  - [x] ~fix keyboard press events when metaKey is involved~ (this currently works the same way as native, so will leave it for now)\r\n  - [x] any special case anchor tag-related tests\r\n  - [ ] hitslop interactions\r\n- [x] Determine event object data.\r\n```\r\n{\r\n  pointerType: 'mouse' | 'pen' | 'touch' | 'keyboard',\r\n  initial: { x: number, y: number },\r\n  point: { x: number, y: number },\r\n  delta:  { x: number, y: number }\r\n}\r\n```\r\n\r\n## FocusScope module\r\n\r\nConsider adding `onFocusIn` and `onFocusOut` (names tbd) to support userland customisation of focus repair. We could return the native elements.\r\n\r\nA use case to consider: being able to programmatically move focus to an element without\r\nallowing keyboards to focus the element (e.g., the document body, the root of a modal). In this\r\ncase the element (other than a few special cases) must have `tabIndex={-1}`.\r\n\r\n## InputScope module\r\n\r\n- [ ] `onChange` fires when an input element has been changed. This applies to `<input>`, `<textarea>`, `<select>` and elements with `contenteditable` or when `designMode` is enabled. `onChange` provides a callback with the event for the element that changed and a `key` of the elment that changed (if a `key` was supplied).\r\n- [ ]  `onValueChange` is similar to `onChange`, but only provides the value changed. This applies to `<input>`, `<textarea>`, `<select>` and elements with `contenteditable` or when `designMode` is enabled. `onValueChange` provides a `value` and `key` of the element that changed (if a `key` was supplied).\r\n- [ ] `onSubmit` for when any `<form>` elements trigger form submit.\r\n- [ ] `onKeyPress` for when any keyboard keys are pressed.\r\n- [ ] `preventKeys` accepts an array of key strings that will get prevented from entering input.\r\n- [ ] `onSelectionChange` for when any any text selection occurs in any child elements.\r\n- [ ] `onBeforeChange` fires before a change is about to occur. This applies to `<input>`, `<textarea>`, `<select>` and elements with `contenteditable` or when `designMode` is enabled. `onBeforeChange` provides a callback with the event for the element that changed and a `key` of the elment that changed (if a `key` was supplied).\r\n\r\n## Drag module\r\n\r\n- [ ] Determine event object data (same as Pan)\r\n- [ ] Cancelling drag.\r\n- [ ] FYI: `touchAction:'none'` is needed on `currentTarget` to prevent browser cancelling after `pointermove`.\r\n- [ ] FYI: Firefox [might have problems](https://github.com/necolas/react-native-web/issues/729#issuecomment-365426547) when combining `mousemove` with `display:flex`.\r\n- [ ] Add README\r\n- [ ] Cross browser and device/modality testing.\r\n- [ ] Write unit tests.\r\n\r\n## Pan module\r\n\r\n- [ ] Write unit tests.\r\n- [ ] Cross browser and device/modality testing.\r\n- [ ] Cancelling pan.\r\n- [ ] Add README\r\n- [ ] FYI: `touchAction:'none'` is needed on `currentTarget` to prevent browser cancelling after `pointermove`.\r\n- [ ] Determine event object data.\r\n```\r\n{\r\n  pointerType: 'mouse' | 'pen' | 'touch',\r\n  initial: { x: number, y: number },\r\n  point: { x: number, y: number },\r\n  velocity: { x: number, y: number },\r\n  delta:  { x: number, y: number }\r\n}\r\n```\r\n\r\n## Scroll module\r\n\r\n- [x] `disabled`\r\n- [x] `onScroll`\r\n- [ ] `onScrollDragStart`\r\n- [ ] `onScrollDragEnd`\r\n- [ ] `onMomentumScrollStart`\r\n- [ ] `onMomentumScrollEnd`\r\n- [ ] scroll directions\r\n- [ ] Determine event object data\r\n- FYI https://github.com/facebook/react/pull/9333\r\n\r\n## Swipe module\r\n\r\n- [ ] Combine `onSwipe{Left,Right,Up,Down}` into `onSwipe` w/ event data.\r\n- [ ] Cancelling swipe.\r\n- [ ] Write comprehensive unit tests.\r\n- [ ] Cross browser and device/modality testing.\r\n- [ ] Add README\r\n- [ ] Determine event object data (same as Pan)\r\n- [ ] FYI: `touchAction:'none'` is needed on `currentTarget` to prevent browser cancelling after `pointermove`.\r\n\r\n## Touch HitSlop\r\n\r\n*Consider whether we need this at all. Some browsers have a native hitslop and we could work with vendors on any potential improvements to the native system*\r\n\r\n- [ ] Figure out how to `position` parent of hitslop.\r\n- [ ] Measurement without reflows (ResizeObserver?)\r\n- [ ] Add README\r\n- [x] Figure out solution for SSR w/ non-touch interactions if no client-side JS\r\n- [x] Add `touchHitSlop` (https://github.com/facebook/react/pull/15261).\r\n- [x] Add `touchHitSlop` SSR support\r\n\r\n## Dev Tools (https://github.com/facebook/react/issues/15267)\r\n\r\n- [x] Add `displayName` fields to event components and event targets.\r\n- [x] Possibly add a `description` or `displayName` field to event responders? For example the `Press` responder module for ReactDOM could have the name `ReactDOMPressResponder`.\r\n- [ ] Expose some DEV only event triggering exports from event responder modules. i.e. `HoverEventResponder.DevToolEvents = [{ name: 'hover', trigger: [{ name: 'pointerup', passive: false }]];`\r\n- [x] Add basic support for rendering event responders and event targets in the tree. @bvaughn \r\n\r\n## Ancillary work\r\n\r\n- [x] Investigate removing object assign polyfill from individual event modules\r\n- [x] Add internal interactive documentation / fiddle\r\n- [ ] Investigate press event patterns on `input`, `textarea`, `select`, etc.\r\n- [x] Implement high-level components like Pressable (inc delays).\r\n- [x] Nested Pressables should not bubble events.\r\n- [x] Investigate accounting for element resizes when determining hit bounds, e.g., using resize observer for notifications",
  "closed_by": null
}
