{
  "url": "https://api.github.com/repos/facebook/react/issues/3226",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/3226/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/3226/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/3226/events",
  "html_url": "https://github.com/facebook/react/issues/3226",
  "id": 58487379,
  "node_id": "MDU6SXNzdWU1ODQ4NzM3OQ==",
  "number": 3226,
  "title": "Optimizing Compiler: Reuse Constant Value Types like ReactElement",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 180616330,
      "node_id": "MDU6TGFiZWwxODA2MTYzMzA=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
      "name": "Component: Optimizing Compiler",
      "color": "bfdadc",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 35,
  "created_at": "2015-02-22T02:37:19Z",
  "updated_at": "2018-11-22T13:14:36Z",
  "closed_at": "2015-09-23T18:54:14Z",
  "author_association": "MEMBER",
  "body": "Starting with 0.14 we will be able to start treating ReactElements and their props objects as value types. I.e. any instance is conceptually equivalent if all their values are the same. This allow us to reuse any ReactElement whose inputs are deeply immutable or effectively constant.\n\nTake this function for example:\n\n``` javascript\nfunction render() {\n   return <div className=\"foo\" />;\n}\n```\n\nThis can be optimized by moving the JSX out of the function body so that each time it is called the same instance is returned:\n\n``` javascript\nvar foo = <div className=\"foo\" />;\nfunction render() {\n   return foo;\n}\n```\n\nNot only does it allow us to reuse the same objects, React will automatically bail out any reconciliation of constant components - without a manual `shouldComponentUpdate`.\n## Reference Equality\n\nObjects in JavaScript have reference equality. Meaning that this optimization can actually change behavior of code. If any of your calls to render() uses object equality or uses the ReactElement as the key in a Map, this optimization will break that use case. So don't rely on that.\n\nThis is a change in the semantic contract of ReactElements. This is difficult to enforce, but hopefully a future version of JavaScript will have the notion of value equality for custom objects so this can be enforced.\n## What is Constant?\n\nThe simplest assumption is if the entire expression, including all the props (and children), are all literal value types (strings, booleans, null, undefined or JSX), then the result is constant.\n\n``` javascript\nfunction render() {\n  return <div className=\"foo\"><input type=\"checkbox\" checked={true} /></div>;\n}\n```\n\nIf a variable is used in the expression, then you must first ensure that it is not ever mutated since then the timing can affect the behavior.\n\n``` javascript\nvar Foo = require('Foo');\nfunction createComponent(text) {\n  return function render() {\n    return <Foo>{text}</Foo>;\n  };\n}\n```\n\nIt is safe to move a constant to a higher closure if the variable is never mutated. You can only move it to a scope that is shared by all variables.\n\n``` javascript\nvar Foo = require('Foo');\nfunction createComponent(text) {\n  var foo = <Foo>{text}</Foo>;\n  return function render() {\n    return foo;\n  };\n}\n```\n### Are Objects Constant?\n\nArbitrary objects are not considered constant. A transpiler should **NEVER** move a ReactElement scope if any of the parameters is a **mutable** object. React will silently ignore updates and it will change behavior.\n\n``` javascript\nfunction render() {\n  return <div style={{ width: 100 }} />; // Not safe to reuse...\n}\n// ...because I might do:\nrender().props.style.width = 200;\nexpect(render().props.style.width).toBe(100);\n```\n\nIf an object is provably deeply immutable (or effectively immutable by never being mutated), the transpiler may only move it to the scope where the object was created or received.\n\n``` javascript\nfunction render() {\n  var style = Object.freeze({ __proto__: null, width: 100 });\n  return <div style={style} />; // Not safe to reuse...\n}\n// ...because I might do:\nexpect(render().props.style).not.toBe(render().props.style);\n\n// However this is...\nfunction createComponent(width) {\n  var style = Object.freeze({ __proto__: null, width: +width });\n  return function render() {\n    return <div style={style} />; // ...safe to move this one level up\n  };\n}\n```\n\nThis is due to the fact that arbitrary objects have referential identity in JavaScript. However, if the semantics of an immutable object is expected to have value equality, it might be ok to treat them as value types. For example any data structure created by immutable-js may be treated as a value type if it is deeply immutable.\n### Exception: ref=\"string\"\n\nThere is unfortunately one exception. If the `ref` prop might potentially might have a string value. Then it is never safe to reuse the element. This is due to the fact that we capture the React owner at the time of creation. This is an unfortunate artifact and we're looking at various options of changing the refs semantics to fix it.\n\n``` javascript\nrender() {\n  // Neither of these...\n  return <div ref=\"str\" />;\n  // ...are safe to reuse...\n  return <div ref={possibleStringValue} />;\n  // ...because they might contain a ref.\n  return <div {...objectThatMightContainARef} />;\n}\n```\n## Non-JSX\n\nThis can work on JSX, React.createElement or functions created by React.createFactory.\n\nFor example, it is safe to assume that this function call generates a constant ReactElement.\n\n``` javascript\nvar Foo = React.createFactory(FooClass);\n\nfunction render() {\n  return Foo({ bar: 1 });\n}\n```\n\nTherefore it is safe to reuse:\n\n``` javascript\nvar Foo = React.createFactory(FooClass);\nvar foo = Foo({ bar: 1 }};\nfunction render() {\n  return foo;\n}\n```\n## Advanced Optimizations\n\nYou can also imagine even more clever optimizations that optimize per-instance elements by memoizing it on the instance. This allows auto-bound methods to be treated as effectively constant.\n\nIf you can track pure-functions, you can even treat calculated values as constants if the input to the pure function is constant.\n\nStatic analysis tools like Flow makes it possible to detect that even more elements are constant.\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
