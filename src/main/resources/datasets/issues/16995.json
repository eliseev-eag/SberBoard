{
  "url": "https://api.github.com/repos/facebook/react/issues/16995",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16995/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16995/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16995/events",
  "html_url": "https://github.com/facebook/react/issues/16995",
  "id": 501896623,
  "node_id": "MDU6SXNzdWU1MDE4OTY2MjM=",
  "number": 16995,
  "title": "Hooks for Class Based Components",
  "user": {
    "login": "GasimGasimzada",
    "id": 807231,
    "node_id": "MDQ6VXNlcjgwNzIzMQ==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/807231?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/GasimGasimzada",
    "html_url": "https://github.com/GasimGasimzada",
    "followers_url": "https://api.github.com/users/GasimGasimzada/followers",
    "following_url": "https://api.github.com/users/GasimGasimzada/following{/other_user}",
    "gists_url": "https://api.github.com/users/GasimGasimzada/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/GasimGasimzada/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/GasimGasimzada/subscriptions",
    "organizations_url": "https://api.github.com/users/GasimGasimzada/orgs",
    "repos_url": "https://api.github.com/users/GasimGasimzada/repos",
    "events_url": "https://api.github.com/users/GasimGasimzada/events{/privacy}",
    "received_events_url": "https://api.github.com/users/GasimGasimzada/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-10-03T07:22:56Z",
  "updated_at": "2019-10-03T16:55:22Z",
  "closed_at": "2019-10-03T16:55:21Z",
  "author_association": "NONE",
  "body": "I have been thinking a lot about hooks and I want to share my idea on a possible addition that I believe will simplify hook logic -- adding Hooks to classes. I will be able to best explain my idea by giving out an example:\r\n\r\n```jsx\r\nconst SomeComponent = ({ props }) => {\r\n   const [state, setState] = useState('test');\r\n   const someFn = useCallback(() => {\r\n       ...\r\n   }, [props.name]);\r\n   useEffect(() => {\r\n      someFn();  \r\n   }, [state]);\r\n\r\n   ...\r\n}\r\n```\r\n\r\nIn the code above, we are using hooks to essentially imitate class behaviors. Additionally, because the component is a function, we need to add things like `useCallback`; so that, the function does not get recreated. However, these things have been solved in classes for a very long time. Even React's class components solved these problems. What if this kind of API is added to React:\r\n\r\n```jsx\r\nclass SomeComponent extends React.NewComponent {\r\n    someFn = () => {\r\n        // use this.props here\r\n    }\r\n\r\n    state = new State('test');\r\n    effect1 = new Effect(this.effectFn, [this.state]);\r\n\r\n    effectFn = () => {\r\n        const val = this.state.getValue();\r\n        someFn();\r\n        // or state.setValue('some other value')\r\n    }\r\n\r\n    render() {\r\n        // you can use this.state.getValue() here\r\n        return (\r\n\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nWhat problem does this solve? This eliminates the rule that all hooks have to be at the top of the function. This is because classes already have this behavior implemented. It is intuitive --- you can't use loop or conditions outside the class methods. Secondly, this eliminates hooks such as `useCallback` or `useRef` (for non DOM related things) because functions are not recreated during every render.\r\n\r\nWhat about dependencies in Effect? For dependencies, if a State instance is passed, the Effect hook will check if it is changed using different means (e.g State can have a \"stale\" member variable that gets updated from reconciler; then the effect uses that variable to check state. Or Effect can store the dependencies and do the normal checking using `state.getValue`).\r\n\r\nWhat about custom hooks? React provides a \"CustomHook\" base class that developers can use. So, let's say I want to write a hook to fetch data:\r\n\r\n```jsx\r\nclass FetchHook extends React.CustomHook {\r\n    loading = new State(false);\r\n    data = new State([]);\r\n    error = new State(null);\r\n\r\n    effect = new Effect(this.effectFn);\r\n\r\n    effectFn = async () => {\r\n        try {\r\n            this.loading.setValue(true);\r\n            const response = await fetch(this.props.url); // i'll talk about this in a bit\r\n            const data = await response.json();       \r\n            this.loading.setValue(false);\r\n            this.data.setValue(data);\r\n        } catch (e) {\r\n            this.loading.setValue(false);\r\n            this.error.setValue(e);            \r\n        }\r\n    }\r\n\r\n    getLoading() {\r\n         return this.loading.getValue();\r\n    }\r\n\r\n    getData() {\r\n         return this.data.getValue();\r\n    }\r\n\r\n    getError() {\r\n         return this.error.getValue();\r\n    }\r\n}\r\n```\r\n\r\nThen, we can just add it to our components:\r\n\r\n```jsx\r\nclass SomeComponent extends React.NewComponent {\r\n    fetch = new FetchHook(someUrl);\r\n    render() {\r\n          const loading = this.fetch.getLoading();\r\n          const error = this.fetch.getError();\r\n          const data = this.fetch.getData();\r\n          // ...\r\n    }\r\n}\r\n```\r\n\r\nReact.Hook base class (React.CustomHook and React's own hooks are derived from it) has a function called `update` or `run` that initializes all the necessary things for the hooks. The reconciler can check whether the class field is an instance of React.Hook to do the necessary updates etc.\r\n\r\n**Why?**\r\n\r\nIn my opinion, combined with Hooks, React's composability is an implementation of [Entity-Component-System](https://en.wikipedia.org/wiki/Entity_component_system). Game Developers use this technique to set up entities (e.g a Tree or a Vehicle) in their game world. We are essentially using the same technique to set up entities (React Components) for UI. If we go on the comparison route, this is how I see it: Entity = React Component, Hooks = Components, System = React Reconciler + Renderer.\r\n\r\nIn general, ECS systems really shine when using classes. Writing components and assigning them to entities feels natural. We are using all the class features (class fields, methods, inheritance) to abstract away what is going on behind the scenes. However, with current state of using hooks with functions, React essentially created these class features in for functions. For example, a function is never recreated in a class. So, we need a `useCallback` to imitate the same behavior in function components. Same goes for `useRef` (excluding ref-ing to DOM) to imitate class member variables.\r\n\r\nIn terms of developer experience, using objects instead of functions have one major difference. At least for me, this is how it was when I was using class components. When using class member variables that are only defined (not called), it makes it simpler to think in React because I can assume that React calls these functions. If they are Hook objects (non-existent yet), I can assume that React calls their respective functions. In these two instances, React is doing the work on the components. However, when using hooks as functions, the flow is reversed: we are telling React what to do instead of letting React do what it wants based on our component logic. It almost looks like we are writing into React instead of just using React. This is something that I experienced when trying to think in Hooks. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "closed_by": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  }
}
