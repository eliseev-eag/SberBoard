{
  "url": "https://api.github.com/repos/facebook/react/issues/10532",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10532/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10532/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10532/events",
  "html_url": "https://github.com/facebook/react/issues/10532",
  "id": 252624291,
  "node_id": "MDU6SXNzdWUyNTI2MjQyOTE=",
  "number": 10532,
  "title": "Avoiding findDOMNode",
  "user": {
    "login": "jamiewinder",
    "id": 4442179,
    "node_id": "MDQ6VXNlcjQ0NDIxNzk=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4442179?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jamiewinder",
    "html_url": "https://github.com/jamiewinder",
    "followers_url": "https://api.github.com/users/jamiewinder/followers",
    "following_url": "https://api.github.com/users/jamiewinder/following{/other_user}",
    "gists_url": "https://api.github.com/users/jamiewinder/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jamiewinder/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jamiewinder/subscriptions",
    "organizations_url": "https://api.github.com/users/jamiewinder/orgs",
    "repos_url": "https://api.github.com/users/jamiewinder/repos",
    "events_url": "https://api.github.com/users/jamiewinder/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jamiewinder/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2017-08-24T14:41:19Z",
  "updated_at": "2017-09-04T11:29:26Z",
  "closed_at": "2017-08-30T18:40:24Z",
  "author_association": "NONE",
  "body": "I've read a few comments on here about `findDOMNode` potentially being dropped, or at least its usage strongly discouraged. I'm curious as to what the alternative should be, as all the ones I've seen are nowhere near as flexible.\r\n\r\nLet's say I have a funky wrapper component that adds a context menu to a component:\r\n\r\n```jsx\r\nclass ContextMenu extends React.Component {\r\n    render() {\r\n        const { children, menu } = this.props;\r\n        const child = React.Children.only(children);\r\n        const childWithEvents = React.cloneElement(child, {\r\n            onContextMenu: () => someApiToOpenMenu(menu);\r\n        });\r\n        return childWithEvents;\r\n    }\r\n}\r\n\r\n<ContextMenu menu={myMenu}>\r\n    <div>Right click for menu!</div>\r\n</ContextMenu>\r\n```\r\n\r\nSo far, so good, and no `findDOMNode`. Except it needs the child to be a DOM element, or for it to have a `onContextMenu` prop which will assign the handler to the inner DOM element. This won't work:\r\n\r\n```jsx\r\nconst MyLabel = ({ children }) => <span>{children}</span>;\r\n\r\n<ContextMenu menu={myMenu}>\r\n    <MyLabel>Right click for menu</MyLabel>\r\n</ContextMenu>\r\n```\r\n(Unless I intentionally forward event props from MyLabel to the span, but I must ensure all props using this do the same).\r\n\r\nAlternatively I can wrap the children:\r\n```javascript\r\nclass ContextMenu extends React.Component {\r\n    render() {\r\n        const { children, menu } = this.props;\r\n        return (\r\n            <div ref={(element) => (element && element.addEventListener('contextmenu', () => someApiToOpenMenu(menu)))>\r\n                {children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n```\r\nBut now I'm adding element unnecessarily - if I use this with an inline element, then now it's wrapped in a block element.\r\n\r\nOn the other hand, this:\r\n\r\n```jsx\r\nclass ContextMenu extends React.Component {\r\n    render() {\r\n        const { children, menu } = this.props;\r\n        const child = React.Children.only(children);\r\n        const childWithEvents = React.cloneElement(child, {\r\n            ref: (instance) => {\r\n                const element = ReactDOM.findDOMNode(instance);\r\n                if (element) {\r\n                    element.addEventListener('contextmenu', () => someApiToOpenMenu(menu));\r\n                }\r\n            }\r\n        });\r\n        return childWithEvents;\r\n    }\r\n}\r\n```\r\nWill work for anything that *eventually* renders a DOM element, no matter how deep it is, whether the components forward props or not. I don't see any downsides apart from the 'impurity' of poking around in the DOM?\r\n\r\nSo I can see there are workarounds for not using `findDOMNode`, but none as good as actually just using it?",
  "closed_by": {
    "login": "jquense",
    "id": 339286,
    "node_id": "MDQ6VXNlcjMzOTI4Ng==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/339286?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jquense",
    "html_url": "https://github.com/jquense",
    "followers_url": "https://api.github.com/users/jquense/followers",
    "following_url": "https://api.github.com/users/jquense/following{/other_user}",
    "gists_url": "https://api.github.com/users/jquense/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jquense/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jquense/subscriptions",
    "organizations_url": "https://api.github.com/users/jquense/orgs",
    "repos_url": "https://api.github.com/users/jquense/repos",
    "events_url": "https://api.github.com/users/jquense/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jquense/received_events",
    "type": "User",
    "site_admin": false
  }
}
