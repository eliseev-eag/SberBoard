{
  "url": "https://api.github.com/repos/facebook/react/issues/16611",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16611/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16611/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16611/events",
  "html_url": "https://github.com/facebook/react/issues/16611",
  "id": 487047673,
  "node_id": "MDU6SXNzdWU0ODcwNDc2NzM=",
  "number": 16611,
  "title": "Error message when calling work.commit in commit phase",
  "user": {
    "login": "eps1lon",
    "id": 12292047,
    "node_id": "MDQ6VXNlcjEyMjkyMDQ3",
    "avatar_url": "https://avatars3.githubusercontent.com/u/12292047?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/eps1lon",
    "html_url": "https://github.com/eps1lon",
    "followers_url": "https://api.github.com/users/eps1lon/followers",
    "following_url": "https://api.github.com/users/eps1lon/following{/other_user}",
    "gists_url": "https://api.github.com/users/eps1lon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/eps1lon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/eps1lon/subscriptions",
    "organizations_url": "https://api.github.com/users/eps1lon/orgs",
    "repos_url": "https://api.github.com/users/eps1lon/repos",
    "events_url": "https://api.github.com/users/eps1lon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/eps1lon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1205087127,
      "node_id": "MDU6TGFiZWwxMjA1MDg3MTI3",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Concurrent%20Mode",
      "name": "Component: Concurrent Mode",
      "color": "ffccd3",
      "default": false
    },
    {
      "id": 40929155,
      "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
      "name": "Type: Question",
      "color": "cc317c",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-08-29T16:00:22Z",
  "updated_at": "2019-09-02T11:37:38Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "body": "This was me just toying around with unstable APIs. I don't know what these can be used for. Just tried to make sense of them from their names.\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nerror message of `batch.commit()` is confusing\r\n\r\n**What is the current behavior?**\r\n\r\nI was experimenting with the `unstable_create(Sync)Root` APIs and just tried to piece together what goes where. While looking through the source I found that the `Work` returned from `createRoot` has a parameter called `onCommit`. For me this implied it's called after the commit [which doesn't seem to be intended](https://github.com/facebook/react/blob/0ca28b526496b4c9cc523e222beffeda73af7172/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L58). However given the code below I get `Uncaught Invariant Violation: work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.`\r\n\r\n```js\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nconst root = ReactDOM.unstable_createRoot(rootElement);\r\n\r\nroot.render(<App />).then(() => {\r\n  const batch = root.createBatch();\r\n\r\n  batch.render(<App />);\r\n  // bad\r\n  batch.commit();\r\n  setTimeout(() => {\r\n    // good\r\n    //batch.commit()\r\n  }, 0);\r\n  batch.then(() => {\r\n    // good\r\n    //batch.commit();\r\n  });\r\n});\r\n\r\n```\r\n\r\nThree things I noticed:\r\n1. seems like I need to call batch.commit after the batch is complete. Changing it to \r\n```\r\nbatch.then(() => {\r\n  // good\r\n  batch.commit();\r\n});\r\n```\r\ngot rid of the error. But I noticed that the original code is used throughout the internal tests. In fact moving createBatch and batch.commit the batch well after (long timeout) the initial root.render call seemed to allow sync `batch.render; batch.commit`.\r\n\r\n2. \"lifecycle\" should be replaced with something different before these APIs get stable since we try to get away from this mental model. \r\n\r\nFor example [`applies setState in componentDidMount synchronously in a batch`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L143) could be converted to a sync test and still pass while I would've expected [`can defer a commit by batching it`](https://github.com/facebook/react/blob/4d307de458dfdf25e704cb2ca20b0578bba8998c/packages/react-dom/src/__tests__/ReactDOMRoot-test.js#L132) to fail with the invariant violation from above.\r\n\r\n3. Not all lifecycles are \"during rendering\" as far as I know. `componentDidUpdate` is called during commit.\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/dreamy-wood-dvzrp\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm basically asking when it's safe to call `batch.commit`: \r\n* [ ] during render phase\r\n* [ ] during commit phase \r\n* [ ] outside of these phases e.g. in some `onComplete` callback \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react(-dom)@16.9.0`\r\n",
  "closed_by": null
}
