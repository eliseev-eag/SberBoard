{
  "url": "https://api.github.com/repos/facebook/react/issues/10082",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10082/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10082/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10082/events",
  "html_url": "https://github.com/facebook/react/issues/10082",
  "id": 239873025,
  "node_id": "MDU6SXNzdWUyMzk4NzMwMjU=",
  "number": 10082,
  "title": "Is it possible to make React.Component / React.StateComponent",
  "user": {
    "login": "jEnbuska",
    "id": 11061511,
    "node_id": "MDQ6VXNlcjExMDYxNTEx",
    "avatar_url": "https://avatars1.githubusercontent.com/u/11061511?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jEnbuska",
    "html_url": "https://github.com/jEnbuska",
    "followers_url": "https://api.github.com/users/jEnbuska/followers",
    "following_url": "https://api.github.com/users/jEnbuska/following{/other_user}",
    "gists_url": "https://api.github.com/users/jEnbuska/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jEnbuska/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jEnbuska/subscriptions",
    "organizations_url": "https://api.github.com/users/jEnbuska/orgs",
    "repos_url": "https://api.github.com/users/jEnbuska/repos",
    "events_url": "https://api.github.com/users/jEnbuska/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jEnbuska/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2017-06-30T19:49:05Z",
  "updated_at": "2017-07-05T22:38:16Z",
  "closed_at": "2017-07-05T22:38:16Z",
  "author_association": "NONE",
  "body": "Feature:\r\nI would like to represent the application state and state validation using JSX.\r\nInstead of defining context/redux state using reducers, It would be nice if it was possible to create components that on result data on 'render'. \r\n'render' is not the most descriptive name because I do not mean to represent UI, but what I'm mostly interested in is using react lifecycle methods and recursive update on setState.\r\n\r\nCurrently when setState is called to a React.Component the renders are not instant, and this is troublesome for me:\r\n\r\nExample case:\r\n```\r\n//this represents application-/context-state\r\n<Obj name='appState>\r\n  <Obj name='cars'>\r\n    <Obj many>\r\n      <Bool name='pending'/>\r\n      ['id','brand', ... ].map(name= > <Str name={name} key={name} />)\r\n   </Obj>\r\n  </Obj>\r\n  ...\r\n</Obj>\r\n```\r\n\r\n```\r\n//this represents actions like with react-redux\r\nfunction addACar(car){\r\n return function(appState){\r\n   const {cars} = appState;\r\n   const id = createId();\r\n   car.setState({[id]: {...car, id}});\r\n   const newCar = car[id];\r\n   newCar.setState({pending: true});   //!!!newCar is not defined YET\r\n }\r\n}\r\n```\r\n\r\nIs it possible to make Components to render recursively when setState gets called, before the next line of code gets executed to avoid the situation represented above?\r\n\r\n_Needing a **document** to 'render' into is a whole other issue, but for now, I will just use span:s with 'display: none' to get around issue with rendering invalid elements into DOM._ ",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
