{
  "url": "https://api.github.com/repos/facebook/react/issues/15901",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15901/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15901/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15901/events",
  "html_url": "https://github.com/facebook/react/issues/15901",
  "id": 456673784,
  "node_id": "MDU6SXNzdWU0NTY2NzM3ODQ=",
  "number": 15901,
  "title": "[Feature] Export useBox primitive as a replacement for useRef for instance variables",
  "user": {
    "login": "atomiks",
    "id": 22450188,
    "node_id": "MDQ6VXNlcjIyNDUwMTg4",
    "avatar_url": "https://avatars3.githubusercontent.com/u/22450188?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/atomiks",
    "html_url": "https://github.com/atomiks",
    "followers_url": "https://api.github.com/users/atomiks/followers",
    "following_url": "https://api.github.com/users/atomiks/following{/other_user}",
    "gists_url": "https://api.github.com/users/atomiks/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/atomiks/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/atomiks/subscriptions",
    "organizations_url": "https://api.github.com/users/atomiks/orgs",
    "repos_url": "https://api.github.com/users/atomiks/repos",
    "events_url": "https://api.github.com/users/atomiks/events{/privacy}",
    "received_events_url": "https://api.github.com/users/atomiks/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-06-16T19:28:45Z",
  "updated_at": "2019-06-19T11:02:16Z",
  "closed_at": "2019-06-19T10:49:35Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\nNote that this is already possible with the primitives React provides. I'm suggesting to export this as a new primitive specifically designed for instance variable usage, instead of `ref` (which doesn't act as nicely as a `box` does.)\r\n\r\n**What is the current behavior?**\r\n\r\nHaving to access `.current` is easily forgotten when using refs as instance variables in function components, and not developer-friendly:\r\n\r\n```jsx\r\nfunction thirdParty(node, options) {\r\n  // Some effect\r\n  return () => {\r\n    // Undoes the effect\r\n  };\r\n}\r\n\r\nfunction App({prop}) {\r\n  const ref = useRef();\r\n  const thirdPartyRef = useRef();\r\n\r\n  useEffect(() => {\r\n    thirdPartyRef.current = thirdParty(ref.current, {prop});\r\n    return () => {\r\n      thirdPartyRef.current();\r\n      // And if .current was an object? The `.current` property is still annoying!\r\n      // thirdPartyRef.current.unsubscribe = () => {};\r\n      // thirdPartyRef.current.unsubscribe();\r\n    };\r\n  }, [prop]);\r\n\r\n  return <div ref={ref}>text</div>;\r\n}\r\n```\r\n\r\nIt's fine when `ref.current` is always a DOM node, but for instance variables, it's unfriendly. With a generic `box` hook, it acts like `this`, and you can place any name on the box you want without the `current` property getting in the way:\r\n\r\n```jsx\r\nfunction App({prop}) {\r\n  const ref = useRef();\r\n  const box = useBox();\r\n\r\n  useEffect(() => {\r\n    box.unsubscribe = thirdParty(ref.current, {prop});\r\n    return () => {\r\n      box.unsubscribe();\r\n    };\r\n  }, [prop]);\r\n\r\n  return <div ref={ref}>text</div>;\r\n}\r\n```\r\n\r\nNow imagine if `thirdParty` returned a plain instance object:\r\n\r\n**useRef** (current API)\r\n\r\n```jsx\r\nfunction App({prop, enabled, visible}) {\r\n  const ref = useRef();\r\n  const thirdPartyInstance = useRef();\r\n\r\n  useEffect(() => {\r\n    thirdPartyRef.current = thirdParty(ref.current, {prop});\r\n    return () => {\r\n      thirdPartyRef.current.destroy();\r\n    };\r\n  }, [prop]);\r\n\r\n  // other effects need to use `.current`\r\n  useEffect(() => {\r\n    // You could destructure and assign `current` to a new\r\n    // variable, but that's cumbersome for each new effect\r\n    thirdPartyInstance.current.setProps({prop});\r\n\r\n    if (enabled) {\r\n      thirdPartyInstance.current.enable();\r\n    } else {\r\n      thirdPartyInstance.current.disable();\r\n    }\r\n    \r\n    if (visible) {\r\n      thirdPartyInstance.current.show();\r\n    } else {\r\n      thirdPartyInstance.current.hide();\r\n    }\r\n  });\r\n\r\n  return <div ref={ref}>text</div>;\r\n}\r\n```\r\n\r\n**useBox**\r\n\r\n```jsx\r\nfunction App({prop, enabled, visible}) {\r\n  const ref = useRef();\r\n  const thirdPartyInstance = useBox();\r\n\r\n  useEffect(() => {\r\n    Object.assign(thirdPartyInstance, thirdParty(ref.current, {prop}));\r\n    return () => {\r\n      thirdPartyInstance.destroy();\r\n    };\r\n  }, [prop]);\r\n\r\n  useEffect(() => {\r\n    thirdPartyInstance.setProps({prop});\r\n\r\n    if (enabled) {\r\n      thirdPartyInstance.enable();\r\n    } else {\r\n      thirdPartyInstance.disable();\r\n    }\r\n    \r\n    if (visible) {\r\n      thirdPartyInstance.show();\r\n    } else {\r\n      thirdPartyInstance.hide();\r\n    }\r\n  });\r\n\r\n  return <div ref={ref}>text</div>;\r\n}\r\n```\r\n\r\nNow other effects and pieces of code can access `thirdPartyInstance` like it was re-rendered using a `useState` setter (closure), but obviously, without actually re-rendering the UI.\r\n\r\n---\r\n\r\nBoxes would probably just be called `box` / `_this` / `self`, as another name for `this` in most cases for primitive values and any other things.\r\n\r\n```jsx\r\nfunction App() {\r\n  const box = useBox({\r\n    passes: 0\r\n  });\r\n\r\n  useEffect(() => {\r\n    box.timeout = setTimeout(() => {});\r\n    box.passes++;\r\n    return () => clearTimeout(box.timeout);\r\n  });\r\n\r\n  return null;\r\n}\r\n```\r\n\r\n### Implementation\r\n\r\n```js\r\nfunction useBox(initialValue = {}) {\r\n  const ref = useRef();\r\n\r\n  // Primitives can't be allowed\r\n  if (!ref.current) {\r\n    ref.current =\r\n      typeof initialValue === 'function' ? initialValue() : initialValue;\r\n  }\r\n\r\n  return ref.current;\r\n}\r\n```\r\n\r\nThe name is not final, something @aweary mentioned on Twitter (along with \"cell\")\r\n\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
