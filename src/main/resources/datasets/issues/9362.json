{
  "url": "https://api.github.com/repos/facebook/react/issues/9362",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9362/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9362/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9362/events",
  "html_url": "https://github.com/facebook/react/issues/9362",
  "id": 220232590,
  "node_id": "MDU6SXNzdWUyMjAyMzI1OTA=",
  "number": 9362,
  "title": "componentWillReceiveProps Do not work",
  "user": {
    "login": "manhhp",
    "id": 26534774,
    "node_id": "MDQ6VXNlcjI2NTM0Nzc0",
    "avatar_url": "https://avatars1.githubusercontent.com/u/26534774?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/manhhp",
    "html_url": "https://github.com/manhhp",
    "followers_url": "https://api.github.com/users/manhhp/followers",
    "following_url": "https://api.github.com/users/manhhp/following{/other_user}",
    "gists_url": "https://api.github.com/users/manhhp/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/manhhp/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/manhhp/subscriptions",
    "organizations_url": "https://api.github.com/users/manhhp/orgs",
    "repos_url": "https://api.github.com/users/manhhp/repos",
    "events_url": "https://api.github.com/users/manhhp/events{/privacy}",
    "received_events_url": "https://api.github.com/users/manhhp/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2017-04-07T14:35:29Z",
  "updated_at": "2017-04-07T15:59:52Z",
  "closed_at": "2017-04-07T15:25:19Z",
  "author_association": "NONE",
  "body": "i'm trying to create my apps, app have function like maps app of google. my app have 2 scene: - first scene: is mapview and have a search input in the top of the scene, when user click on search input, app will navigate to second scene (search scene) - second scene: i implemented module react-native-google-places-autocomplete, when user input text this component will give suggestion and autocomplete place.\r\n\r\nI get place info (description and coordinate...) and pass this props through Actions.pop() method of react-native-router-flux. then get props and trigger componentWillReceiveProps to update region object of mapview component (first scene). But seemly componentWillReceiveProps do not work. I stuck there. Do you know how to solve it or know other way to do it? Please help me!\r\n\r\nThis is my first scene code (mapview componet)\r\n```\r\nimport React, { Component } from 'react';\r\nimport {\r\n  AppRegistry,\r\n  Dimensions,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TouchableHighlight,\r\n  Image,\r\n  View\r\n} from 'react-native';\r\nimport { Actions } from 'react-native-router-flux';\r\nimport MapView from 'react-native-maps';\r\nvar {GooglePlacesAutocomplete} = require('react-native-google-places-autocomplete');\r\n\r\nconst { width, height } = Dimensions.get('window');\r\n\r\nconst ASPECT_RATIO = width / height;\r\nconst LATITUDE = 21.035080;\r\nconst LONGITUDE = 105.793627;\r\nconst LATITUDE_DELTA = 0.0922;\r\nconst LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\r\n\r\nexport default class Hub extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      textQuery: 'Searh a place',\r\n      region: {},\r\n      markers:[],\r\n      mapStyle:null\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.initial ();\r\n  };\r\n\r\n  initial () {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          console.log(position);\r\n          this.setState({\r\n            region: {\r\n              latitude: position.coords.latitude,\r\n              longitude: position.coords.longitude,\r\n              latitudeDelta: LATITUDE_DELTA,\r\n              longitudeDelta: LONGITUDE_DELTA,\r\n            },\r\n          });\r\n        }, (error) => {\r\n          console.log(error);\r\n          this.setState({\r\n            region: {\r\n              latitude: LATITUDE,\r\n              longitude: LONGITUDE,\r\n              latitudeDelta: LATITUDE_DELTA,\r\n              longitudeDelta: LONGITUDE_DELTA,\r\n            },\r\n          });\r\n        },\r\n      );\r\n    }\r\n    };\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    this.updatePlace();\r\n  };\r\n\r\n  updatePlace = (props = this.props) => {\r\n  // do something with props\r\n  console.log('now running');\r\n  this.setState({\r\n    textQuery: props.address,\r\n    region: {\r\n      latitude: props.latitude,\r\n      longitude: props.longitude,\r\n      latitudeDelta: LATITUDE_DELTA,\r\n      longitudeDelta: LONGITUDE_DELTA,\r\n    },\r\n  });\r\n  };\r\n\r\nonRegionChange = (region) => {\r\n  this.setState({ region });\r\n};\r\n\r\n  render() {\r\n\r\n    return (\r\n      <View style ={styles.container}>\r\n        <TouchableHighlight onPress={Actions.placesearch}>\r\n          <View style={styles.searchContainer}>\r\n            <Text style={styles.seartTitle}>\r\n              {this.state.textQuery}\r\n            </Text>\r\n          </View>\r\n        </TouchableHighlight>\r\n        <MapView\r\n          style={styles.map}\r\n          region={this.state.region}\r\n          onRegionChange={this.onRegionChange}\r\n\r\n        >\r\n        {this.state.markers.map = (marker => (\r\n          <MapView.Marker\r\n            coordinate={marker.latlng}\r\n            title={marker.title}\r\n            description={marker.description}\r\n            identifier={marker.id}\r\n          />\r\n        ))}\r\n\r\n        </MapView>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n```\r\nThis is my second scene code (search places component)\r\n```\r\nimport React, { Component } from 'react';\r\nimport {\r\n  AppRegistry,\r\n  StyleSheet,\r\n  Text,\r\n  View\r\n} from 'react-native';\r\nimport { Actions } from 'react-native-router-flux';\r\nvar {GooglePlacesAutocomplete} = require('react-native-google-places-autocomplete');\r\n\r\n\r\nexport default class PlaceSearch extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n\r\n    };\r\n  }\r\n\r\n  setLocation (data, details) {\r\n    var d, da = {};\r\n    var da = data;\r\n    var d = details;     \r\n    Actions.pop({latitude: d.geometry.location.lat, longitude: d.geometry.location.lng, address: da.description});\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <View style={styles.container}>\r\n      <GooglePlacesAutocomplete\r\n        placeholder='Search'\r\n        minLength={2} // minimum length of text to search\r\n        autoFocus={false}\r\n\r\n        fetchDetails={true}\r\n        renderDescription={(row) => row.description} // custom description render\r\n        onPress={(data, details = null) => { // 'details' is provided when fetchDetails = true\r\n          this.setLocation(data, details);\r\n          //console.log(data);\r\n          //console.log(details);\r\n        }}\r\n        getDefaultValue={() => {\r\n          return ''; // text input default value\r\n        }}\r\n        query={{\r\n          // available options: https://developers.google.com/places/web-service/autocomplete\r\n          key: 'AIzaSyDwa-YQOdts8gmrY49nkl5NX8kd7PSXNIs',\r\n          language: 'vi', // language of the results\r\n           // default: 'geocode'\r\n          components: 'country:vn',\r\n        }}\r\n        styles={{\r\n          description: {\r\n            fontWeight: 'bold',\r\n          },\r\n          predefinedPlacesDescription: {\r\n            color: '#1faadb',\r\n          },\r\n        }}\r\n\r\n        currentLocation={true} // Will add a 'Current location' button at the top of the predefined places list\r\n        currentLocationLabel=\"Current location\"\r\n        nearbyPlacesAPI='GooglePlacesSearch' // Which API to use: GoogleReverseGeocoding or GooglePlacesSearch\r\n        GoogleReverseGeocodingQuery={{\r\n          // available options for GoogleReverseGeocoding API : https://developers.google.com/maps/documentation/geocoding/intro\r\n        }}\r\n        GooglePlacesSearchQuery={{\r\n          // available options for GooglePlacesSearch API : https://developers.google.com/places/web-service/search\r\n          rankby: 'distance',\r\n          types: 'food',\r\n        }}\r\n\r\n\r\n        filterReverseGeocodingByTypes={['locality', 'administrative_area_level_3']} // filter the reverse geocoding results by types - ['locality', 'administrative_area_level_3'] if you want to display only cities\r\n\r\n        //predefinedPlaces={[homePlace, workPlace]}\r\n\r\n        debounce={200} // debounce the requests in ms. Set to 0 to remove debounce. By default 0ms.\r\n      />\r\n      </View>\r\n    );\r\n  }\r\n}\r\n```",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
