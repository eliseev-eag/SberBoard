{
  "url": "https://api.github.com/repos/facebook/react/issues/9255",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9255/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9255/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9255/events",
  "html_url": "https://github.com/facebook/react/issues/9255",
  "id": 216903368,
  "node_id": "MDU6SXNzdWUyMTY5MDMzNjg=",
  "number": 9255,
  "title": "Add a `React.Children.text` helper",
  "user": {
    "login": "natevw",
    "id": 265902,
    "node_id": "MDQ6VXNlcjI2NTkwMg==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/265902?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/natevw",
    "html_url": "https://github.com/natevw",
    "followers_url": "https://api.github.com/users/natevw/followers",
    "following_url": "https://api.github.com/users/natevw/following{/other_user}",
    "gists_url": "https://api.github.com/users/natevw/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/natevw/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/natevw/subscriptions",
    "organizations_url": "https://api.github.com/users/natevw/orgs",
    "repos_url": "https://api.github.com/users/natevw/repos",
    "events_url": "https://api.github.com/users/natevw/events{/privacy}",
    "received_events_url": "https://api.github.com/users/natevw/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-03-24T20:59:23Z",
  "updated_at": "2019-06-12T21:28:23Z",
  "closed_at": "2017-10-04T19:05:06Z",
  "author_association": "NONE",
  "body": "I've created a component roughly like this, serving to wrap the behavior of the SVG `text` element to add more sophisticated handling of the string. You can imagine something similar for generating simple `a` tags or `spans` or `defn` or whatnotâ€¦\r\n\r\n```\r\nexport let MultilineText = ({children:text, ...props}) =>\r\n  <text {...props}>\r\n    {text.split(' ').map((str,i) =>\r\n      <tspan key={i} dy=\"1em\">{str}</tspan>\r\n    )}\r\n  </text>\r\n```\r\n\r\nThe key point is that I've taken the `children` prop and assigned it to `text` locally, which makes the assumption that it will be a string that I can split!\r\n\r\nHowever the [React.Children docs](https://facebook.github.io/react/docs/react-api.html#react.children) discuss \"dealing with the this.props.children **opaque data structure**\" (emphasis mine). So technically my code's assumption could break in the future?\r\n\r\nI would propose a `React.Children.text` helper that would guarantee stable behavior to this code:\r\n\r\n```\r\nexport let MultilineText = ({children, ...props}) =>\r\n  <text {...props}>\r\n    {React.Children.text(children).split(' ').map((str,i) =>\r\n      <tspan key={i} dy=\"1em\">{str}</tspan>\r\n    )}\r\n  </text>\r\n```\r\n\r\nSpecifically:\r\n\r\n* if \"children\" represents a single text node, return its string value\r\n* otherwise throw an assertion error\r\n\r\nThis would behave very much like the [React.children.onlyChild](https://github.com/facebook/react/blob/v15.3.1/src/isomorphic/children/onlyChild.js#L34) logic and its invariant check, but expecting `typeof children === 'string'` rather than a `ReactElement.isValidElement(children)`. (See also https://github.com/facebook/react/issues/1104.)",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
