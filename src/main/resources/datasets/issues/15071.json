{
  "url": "https://api.github.com/repos/facebook/react/issues/15071",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15071/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15071/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15071/events",
  "html_url": "https://github.com/facebook/react/pull/15071",
  "id": 419024138,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjU5NjU5MTcw",
  "number": 15071,
  "title": "Compile invariant directly to throw expressions",
  "user": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-03-09T02:36:30Z",
  "updated_at": "2019-03-18T20:58:04Z",
  "closed_at": "2019-03-18T20:58:04Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/15071",
    "html_url": "https://github.com/facebook/react/pull/15071",
    "diff_url": "https://github.com/facebook/react/pull/15071.diff",
    "patch_url": "https://github.com/facebook/react/pull/15071.patch"
  },
  "body": "*This is the first of two PRs to improve our error extraction process.*\r\n\r\nOk I went down a bit of a rabbit hole.\r\n\r\nIt started with this todo: \r\n\r\nhttps://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberUnwindWork.js#L390-L398\r\n\r\nFor some context, production builds of React do not include error messages. We strip them out at compile time and [replace them with error codes](https://reactjs.org/blog/2016/07/11/introducing-reacts-error-code-system.html) and a link to a URL that displays the full message. Our error messages can be as verbose as we want without increasing  code size. Here's an example: https://reactjs.org/docs/error-decoder.html?invariant=109&args%5B%5D=Foo.\r\n\r\nThe error code script works by finding calls to our `invariant` module, looking up the message in a map, and replacing it with the corresponding code. Because we use `invariant` throughout our codebase to assert expected behavior, including for user facing errors, this mostly works really well.\r\n\r\nBut error in the excerpted code above doesn't use `invariant`. It's part of React's error handling path; we can't use `invariant` there because invariant will immediately throw. Instead, we create an error object and pass it along to the next step of the error handling algorithm. That means this error is not being replaced with an error code.\r\n\r\nWhile thinking about the best way to solve this, I collected some other flaws in the way we do error extraction:\r\n\r\n- The `invariant` module is a Facebook-ism that's not commonly used by other developers. It's a marginal burden for first time contributors to learn how to use it. For example, `invariant` throws an error when its first argument evaluates to `false`, but most people are accustomed to checking for the positive case: `if (cond) throw Error(msg)` as opposed to `invariant(!cond, msg)`. It's also not obvious that you're supposed to use `invariant` for errors if you've never contributed to React before.\r\n- `invariant` was originally meant to assert some property of the program that is always supposed to be true. These types of errors should only surface to the user if there's a bug in the program itself. Over time, both Facebook and React have started using it for user facing errors, too.\r\n- There's minimal enforcement for using `invariant` in our codebase. We have our sizebot that reports increases in bundle size, but if a PR already increases bundle size for other reasons, a stray `Error` could increase it slightly further without being noticed by the reviewer.\r\n- As described above, `invariant` can only be used to immediately throw an error. It's not suited for cases where you need to create an error and pass it along.\r\n\r\n## Proposed solution\r\n\r\n### Compile `invariant` directly to throw expressions.\r\n\r\nThis PR turns `invariant` into a compile-time only module. It turns code like this:\r\n\r\n```js\r\ninvariant(condition, 'A %s message that contains %s', adj, noun);\r\n```\r\n\r\ninto this:\r\n\r\n```js\r\nif (!condition) {\r\n  if (__DEV__) {\r\n    throw ReactError(`A ${adj} message that contains ${noun}`);\r\n  } else {\r\n    throw ReactErrorProd(ERR_CODE, [adj, noun]);\r\n  }\r\n}\r\n```\r\n\r\nThe only thing `ReactError` does is return an error whose name is set to \"Invariant Violation\" to match the existing behavior.\r\n\r\n`ReactProdError` is a special version used in production that throws a minified error code, with a link to see to expanded form. This replaces the `reactProdInvariant` module.\r\n\r\nThe runtime behavior is the same as it is today.\r\n\r\n### Compile normal `Error` constructors to `ReactError` and `ReactErrorProd`\r\n\r\nI'll open this part as a separate PR.\r\n\r\n### Use a lint rule to enforce that error messages are written in the correct format\r\n\r\nThis will go in the next PR, too.",
  "closed_by": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  }
}
