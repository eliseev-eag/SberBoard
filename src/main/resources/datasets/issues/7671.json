{
  "url": "https://api.github.com/repos/facebook/react/issues/7671",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/7671/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/7671/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/7671/events",
  "html_url": "https://github.com/facebook/react/issues/7671",
  "id": 175393882,
  "node_id": "MDU6SXNzdWUxNzUzOTM4ODI=",
  "number": 7671,
  "title": "Deprecate componentWillMount Maybe?",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 739777675,
      "node_id": "MDU6TGFiZWw3Mzk3Nzc2NzU=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
      "name": "Component: Component API",
      "color": "d4c5f9",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 81,
  "created_at": "2016-09-07T01:48:55Z",
  "updated_at": "2018-08-16T05:13:00Z",
  "closed_at": "2018-08-16T05:13:00Z",
  "author_association": "MEMBER",
  "body": "Let's use this thread to discuss use cases for componentWillMount and alternative solutions to those problems. Generally the solution is simply to use componentDidMount and two pass rendering if necessary.\n\nThere are several problems with doing global side-effects in the \"componentWill\" phase. That includes starting network requests or subscribing to Flux stores etc.\n\n1) It is confusing when used with error boundaries because currently `componentWillUnmount` can be called without `componentDidMount` ever being called. `componentWill*` is a false promise until all the children have successfully completed. Currently, this only applies when error boundaries are used but we'll probably want to revert this decision and simply not call `componentWillUnmount` here.\n\n2) The Fiber experiment doesn't really have a good way to call `componentWillUnmount` when a new render gets aborted because a higher priority update interrupted it. Similarly, our sister project [ComponentKit](http://componentkit.org/) does reconciliation in threads where it is not safe to perform side-effects yet.\n\n3) Callbacks from `componentWillMount` that update parent components with a `setState` is completely unsupported and lead to strange and order dependent race conditions. We already know that we want to deprecate that pattern.\n\n4) The reconciliation order of children can easily be dependent upon if you perform global side-effects in `componentWillMount`. They're already not fully guaranteed because updates can cause unexpected reconciliation orders. Relying on order also limits future use cases such as async or streaming rendering and parallelized rendering.\n\nThe only legit use case for `componentWillMount` is to call `this.setState` on yourself. Even then you never really need it since you can just initialize your initial state to whatever you had. We only really kept it around for a very specific use case:\n\n``` js\nclass Foo {\n  state = { data: null };\n  // ANTI-PATTERN\n  componentWillMount() {\n    this._subscription = GlobalStore.getFromCacheOrFetch(data => this.setState({ data: data });\n  }\n  componentWillUnmount() {\n    if (this._subscription) {\n      GlobalStore.cancel(this._subscription);\n    }\n  }\n  ...\n}\n```\n\nWhen the same callback can be used both synchronously and asynchronously it is convenient to avoid an extra rerender if data is already available.\n\nThe solution is to split this API out into a synchronous version and an asynchronous version.\n\n``` js\nclass Foo {\n  state = { data: GlobalStore.getFromCacheOrNull() };\n  componentDidMount() {\n    if (!this.state.data) {\n      this._subscription = GlobalStore.fetch(data => this.setState({ data: data });\n    }\n  }\n  componentWillUnmount() {\n    if (this._subscription) {\n      GlobalStore.cancel(this._subscription);\n    }\n  }\n  ...\n}\n```\n\nThis guarantees that the side-effect only happens if the component successfully mounts. If the async side-effect is needed, then a two-pass rendering is needed regardless.\n\nI'd argue that it is not too much boilerplate since you need a `componentWillUnmount` anyway. This can all be hidden inside a Higher-Order Component.\n\nGlobal side-effects in `componentWillReceiveProps` and `componentWillUpdate` are also bad since they're not guaranteed to complete. Due to aborts or errors. You should prefer `componentDidUpdate` when possible. However, they will likely remain in some form even if their use case is constrained. They're also not nearly as bad since they will still get their `componentWillUnmount` invoked for cleanup.\n",
  "closed_by": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  }
}
