{
  "url": "https://api.github.com/repos/facebook/react/issues/2206",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/2206/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/2206/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/2206/events",
  "html_url": "https://github.com/facebook/react/issues/2206",
  "id": 43132193,
  "node_id": "MDU6SXNzdWU0MzEzMjE5Mw==",
  "number": 2206,
  "title": "Add PropTypes.objectWith",
  "user": {
    "login": "kentcdodds",
    "id": 1500684,
    "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kentcdodds",
    "html_url": "https://github.com/kentcdodds",
    "followers_url": "https://api.github.com/users/kentcdodds/followers",
    "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
    "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
    "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
    "repos_url": "https://api.github.com/users/kentcdodds/repos",
    "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2014-09-18T13:26:09Z",
  "updated_at": "2014-09-18T17:15:07Z",
  "closed_at": "2014-09-18T17:15:07Z",
  "author_association": "CONTRIBUTOR",
  "body": "I created this in my personal project and it works great. Thought it would be nice to add to the core. Just want to make sure you like it before I work on a PR:\n\nImplementation (in my utils right now)\n\n``` javascript\nvar utils = {\n  PropTypes: {\n    objectWith: function(options) {\n      return objectWithFn(options, false);\n    }\n  }\n};\n\nutils.PropTypes.objectWith.isRequired = function(options) {\n  return objectWithFn(options, true);\n};\n\nmodule.exports = utils;\n\nfunction objectWithFn(options, isRequired) {\n  return function(props, propName, componentName) {\n    var componentProp = props[propName];\n    var errorMessage = '';\n    if (!isRequired && !componentProp) {\n      return;\n    } else if (isRequired && !componentProp) {\n      errorMessage = 'Required prop `' + propName + '` was not specified in `' + componentName + '`.';\n    } else {\n      var errors = {\n        missing: [],\n        extra: []\n      };\n      for (var prop in options) {\n        var shouldBePresent = options[prop];\n        var hasProp = componentProp.hasOwnProperty(prop);\n        if (!shouldBePresent && hasProp) {\n          errors.extra.push(prop);\n        } else if (shouldBePresent && !hasProp) {\n          errors.missing.push(prop);\n        }\n      }\n      var missingSome = !!errors.missing.length;\n      var badExtras = !!errors.extra.length;\n      if (missingSome || badExtras) {\n        errorMessage = 'Prop `' + propName + '` in `' + componentName + '` has some invalid properties: ';\n      }\n      if (errors.missing.length) {\n        errorMessage += 'should have ' + JSON.stringify(errors.missing);\n      }\n      if (missingSome && badExtras) {\n        errorMessage += ' and ';\n      }\n      if (errors.extra.length) {\n        errorMessage += 'should not have ' + JSON.stringify(errors.extra);\n      }\n    }\n    if (errorMessage) {\n      return new Error(errorMessage);\n    }\n  }\n}\n```\n\nTests (using Mocha and ChaiJS)\n\n``` javascript\nvar expect = require('chai').expect;\nvar utils = require('./utils');\n\ndescribe.only('utils', function UtilsSpec() {\n\n  describe('PropTypes', function() {\n    var propName = 'myProp';\n    var componentName = 'MyComponent';\n    var props = {\n      empty: {},\n      valid: { myProp: {\n        foo: 'present',\n        baz: 'present',\n        other: 'present'\n      } },\n      invalidMissing: { myProp: {\n        missing: 'other props'\n      } },\n      invalidExtra: { myProp: {\n        bar: 'should not be here',\n        foobar: 'should not be here either'\n      } },\n      invalidBoth: { myProp: {\n        bar: 'should not be here',\n        foobar: 'should not be here either',\n        missing: 'other props'\n      } }\n    };\n\n    var options = {\n      foo: true,\n      bar: false,\n      baz: true,\n      foobar: false\n    };\n\n    describe('basic', function() {\n      var validator = utils.PropTypes.objectWith(options);\n      it('should pass when prop not present', function() {\n        var error = validator(props.empty, propName, componentName);\n        expect(error).to.be.undefined;\n      });\n\n      it('should pass when prop is valid', function() {\n        var error = validator(props.valid, propName, componentName);\n        expect(error).to.be.undefined;\n      });\n\n      it('should fail with \"missing\" message when prop is invalid because of missing properties', function() {\n        var error = validator(props.invalidMissing, propName, componentName);\n        expectPropName(error.message);\n        expectComponentName(error.message);\n        expectInvalidMissing(error.message);\n      });\n\n      it('should fail with \"extra\" message when prop is invalid because of extra properties', function() {\n        var error = validator(props.invalidExtra, propName, componentName);\n        expectPropName(error.message);\n        expectComponentName(error.message);\n        expectInvalidExtra(error.message);\n      });\n\n      it('should fail with \"extra\" and \"missing\" message when invalid because of extra and missing properties', function() {\n        var error = validator(props.invalidBoth, propName, componentName);\n        expectPropName(error.message);\n        expectComponentName(error.message);\n        expectInvalidExtra(error.message);\n        expectInvalidMissing(error.message);\n      });\n    });\n\n    describe('required', function() {\n      var validator = utils.PropTypes.objectWith.isRequired(options);\n\n      it('should fail when prop not present', function() {\n        var error = validator(props.empty, propName, componentName);\n        expectPropName(error.message);\n        expectComponentName(error.message);\n        expect(error.message).to.have.string('Required');\n      });\n    });\n\n    // UTILS FUNCTIONS\n\n    function expectPropName(message) {\n      expect(message).to.have.string(propName);\n    }\n\n    function expectComponentName(message) {\n      expect(message).to.have.string(componentName);\n    }\n\n    function expectInvalidMissing(message) {\n      expect(message).to.have.string('should have');\n      expect(message).to.have.string('foo');\n      expect(message).to.have.string('baz');\n    }\n\n    function expectInvalidExtra(message) {\n      expect(message).to.have.string('should not have');\n      expect(message).to.have.string('bar');\n      expect(message).to.have.string('foobar');\n    }\n  });\n});\n```\n\nLet me know if this is something you'd like in the core, and I'll try to create a PR...\n\nI've also considered making it possible to specify a PropType for each property (rather than just true/false). But I thought this would be acceptable for now.\n",
  "closed_by": {
    "login": "kentcdodds",
    "id": 1500684,
    "node_id": "MDQ6VXNlcjE1MDA2ODQ=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1500684?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kentcdodds",
    "html_url": "https://github.com/kentcdodds",
    "followers_url": "https://api.github.com/users/kentcdodds/followers",
    "following_url": "https://api.github.com/users/kentcdodds/following{/other_user}",
    "gists_url": "https://api.github.com/users/kentcdodds/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kentcdodds/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kentcdodds/subscriptions",
    "organizations_url": "https://api.github.com/users/kentcdodds/orgs",
    "repos_url": "https://api.github.com/users/kentcdodds/repos",
    "events_url": "https://api.github.com/users/kentcdodds/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kentcdodds/received_events",
    "type": "User",
    "site_admin": false
  }
}
