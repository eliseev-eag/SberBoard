{
  "url": "https://api.github.com/repos/facebook/react/issues/12638",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12638/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12638/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12638/events",
  "html_url": "https://github.com/facebook/react/issues/12638",
  "id": 315374388,
  "node_id": "MDU6SXNzdWUzMTUzNzQzODg=",
  "number": 12638,
  "title": "First pass context is lost in Call - Return",
  "user": {
    "login": "rmhartog",
    "id": 2480888,
    "node_id": "MDQ6VXNlcjI0ODA4ODg=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/2480888?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rmhartog",
    "html_url": "https://github.com/rmhartog",
    "followers_url": "https://api.github.com/users/rmhartog/followers",
    "following_url": "https://api.github.com/users/rmhartog/following{/other_user}",
    "gists_url": "https://api.github.com/users/rmhartog/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rmhartog/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rmhartog/subscriptions",
    "organizations_url": "https://api.github.com/users/rmhartog/orgs",
    "repos_url": "https://api.github.com/users/rmhartog/repos",
    "events_url": "https://api.github.com/users/rmhartog/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rmhartog/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 739761016,
      "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
      "name": "Component: Reconciler",
      "color": "f9a798",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-04-18T08:10:08Z",
  "updated_at": "2018-05-20T07:52:45Z",
  "closed_at": "2018-05-19T18:32:51Z",
  "author_association": "CONTRIBUTOR",
  "body": "I have been really enjoying my explorations into building better 'compound components' using the experimental `react-call-return`. This issue is intended to start a discussion of some of the shortcomings of the current API that I ran into.\r\n\r\nExperiments in which the `return` is used as a leaf node that yields some data are very successful. Since #11955 was solved I have not run into further issues with the stability of this feature.\r\n\r\nHowever, for 'compound component' usage, to implement features such as layout, my `return` often yields an element or render prop. In these cases, these elements are rendered with the `call` as the parent, and any context created in the first pass (between the `call` and `return`) is lost.\r\n\r\nA reproduction case can be found here: https://codesandbox.io/s/0p4lvy72pl, as an end-user of these components (unaware that they use call-return internally), I would expect to see 'Greetings 1' instead of 'Default 1'.\r\n\r\nI don't consider this a bug, but rather a side-effect of how I'm using the API. However, I believe the use-case above is a valid one and providing an API that supports this would be beneficial to library authors. Below I'll share some thoughts on such an API for discussion.\r\n\r\n---\r\n\r\nInitially, the API was called coroutine and yield, which suggested a subtree would yield and later resume. Presumably, this is why the API was renamed. My suggestion would be to implement the coroutine-yield functionality, which continues rendering the 'continuation' as children of the yield fiber. Of course I am not aware of all the choices that led to the current API, so input here is welcomed.\r\n\r\n`createCoroutine(children, handler, props)` would function very similarly to the current `createCall`, but the handler does not return the children to render. Instead, it returns some aggregated value. This value is passed to the second argument of `createYield(value, continuation, props)`, together with that yield element's props and index within the coroutine. The element returned from the continuation is reconciled with the yield fiber's children, preserving its position in the tree and thus also any context that was accumulated between the coroutine and yield.\r\n\r\nNote that the new API would be a strict superset of the current implementation, I imagine the call-return could be written with coroutine and yield as follows:\r\n\r\n```javascript\r\nconst createCall = (children, handler, props) => createCoroutine(\r\n  [\r\n    createYield(null, (props, values, index) => handler(values.props, values.yields), props),\r\n    ...React.Children.toArray(children),\r\n  ],\r\n  (props, [_, ...yields]) => ({ props, yields }),\r\n  props\r\n);\r\n\r\nconst createReturn = value => createYield(value, () => null);\r\n```\r\n\r\nI've dived into the reconciler implementation for call and return, and implementing an API like the above seems feasible to me. I'd definitely be willing to give it a shot once the approach is clear. However, I am not aware of all the decisions that led up to the current implementation, and the exact impact on performance (increased tree traversals) etc...\r\n\r\nCC'ing @sebmarkbage and @gaearon\r\n\r\nEDIT: I've prototyped this API on CodeSandbox here: https://codesandbox.io/s/480nx1qw97, it causes multiple renders using `setState` and `forceUpdate`, and uses some nasty traversals of `_reactInternalFiber`, it is **highly unstable**, but it illustrates the idea outlined above.",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
