{
  "url": "https://api.github.com/repos/facebook/react/issues/13008",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13008/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13008/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13008/events",
  "html_url": "https://github.com/facebook/react/issues/13008",
  "id": 330904209,
  "node_id": "MDU6SXNzdWUzMzA5MDQyMDk=",
  "number": 13008,
  "title": "Exposing prevProps in getDerivedStateFromProps for persistent view animations",
  "user": {
    "login": "IljaDaderko",
    "id": 3154053,
    "node_id": "MDQ6VXNlcjMxNTQwNTM=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/3154053?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/IljaDaderko",
    "html_url": "https://github.com/IljaDaderko",
    "followers_url": "https://api.github.com/users/IljaDaderko/followers",
    "following_url": "https://api.github.com/users/IljaDaderko/following{/other_user}",
    "gists_url": "https://api.github.com/users/IljaDaderko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/IljaDaderko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/IljaDaderko/subscriptions",
    "organizations_url": "https://api.github.com/users/IljaDaderko/orgs",
    "repos_url": "https://api.github.com/users/IljaDaderko/repos",
    "events_url": "https://api.github.com/users/IljaDaderko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/IljaDaderko/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-06-09T17:15:17Z",
  "updated_at": "2018-06-11T13:56:24Z",
  "closed_at": "2018-06-10T12:48:49Z",
  "author_association": "CONTRIBUTOR",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\n`getDerivedStateFromProps` does not expose `prevProps`\r\n\r\n**What is the expected behavior?**\r\n`getDerivedStateFromProps` should expose `prevProps` for cleaner implementation of use case mentioned below.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact: 16.4+\r\n\r\nI know there was a similar discussion in the issues here before regarding exposing previous props in `getDerivedStateFromProps`, but I believe I came across a use case where this can be useful, its very specific, yet it required me to replicate a lot of previous props in the state.\r\n\r\nBelow is a component I use in react-native to add an animation where screens crossfade and don't just unmount instantly, it also checks if next route is an overlay and preserves screen behind it. As you can see I had to create `prevPathname` `prevData` and `prevChildren` for this to work, which I think is not too terrible, yet results in a lot of repetition.\r\n\r\nPerhaps my implementation is missing something to remove the repetition or maybe I am not understanding why we are not exposing prevProps?\r\n\r\n```js\r\n// @flow\r\nimport React, { Component } from 'react'\r\nimport { Animated } from 'react-native'\r\nimport { durationNormal, easeInQuad, easeOutQuad } from '../services/Animation'\r\nimport type { Node } from 'react'\r\n\r\ntype Props = {\r\n  pathname: string,\r\n  data: ?{ overlay: boolean },\r\n  children: Node,\r\n  authenticated: boolean\r\n}\r\n\r\ntype State = {\r\n  prevPathname: ?string,\r\n  prevChildren: Node,\r\n  prevData: ?{ overlay: boolean },\r\n  animation: Animated.Value,\r\n  activeChildren: Node,\r\n  pointerEvents: boolean,\r\n  authAnimation: boolean\r\n}\r\n\r\nclass RouteFadeAnimation extends Component<Props, State> {\r\n  state = {\r\n    prevPathname: null,\r\n    prevChildren: null,\r\n    prevData: null,\r\n    animation: new Animated.Value(0),\r\n    activeChildren: null,\r\n    pointerEvents: true,\r\n    authAnimation: true\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\r\n    const { pathname, data, children } = nextProps\r\n    const { prevPathname, prevData, prevChildren } = prevState\r\n    // This will be returned always to store \"previous\" props in state, so we can compare against them in\r\n    // future getDerivedStateFromProps, this is where I'd like to use prevProps\r\n    const prevPropsState = {\r\n      prevChildren: children,\r\n      prevPathname: pathname,\r\n      prevData: data\r\n    }\r\n    // Check if pathname changed, i.e we are going to another view\r\n    if (pathname !== prevPathname) {\r\n      // Check if current visible view is a modal, if it is, we go to default return\r\n      if (!prevData || !prevData.overlay) {\r\n        // Check if future view is not a modal\r\n        if (!data || !data.overlay) {\r\n          // Preserve current view while we are animationg out (even though pathname changed)\r\n          return {\r\n            activeChildren: prevChildren,\r\n            pointerEvents: false,\r\n            ...prevPropsState\r\n          }\r\n        // If future view is a modal, preserve current view, so it is visible behind it\r\n        } else if (data.overlay) {\r\n          return {\r\n            activeChildren: prevChildren,\r\n            ...prevPropsState\r\n          }\r\n        }\r\n      }\r\n      // If previous view was a modal (only normal view can follow after modal) reset our view persistance\r\n      // and use children as opposed to activeChildren\r\n      return {\r\n        activeChildren: null,\r\n        ...prevPropsState\r\n      }\r\n    }\r\n    // Persist prevProps in state\r\n    return {\r\n      ...prevPropsState\r\n    }\r\n  }\r\n\r\n  // This just handles animation based on cases above\r\n  componentDidUpdate(prevProps: Props) {\r\n    const { pathname, data, authenticated } = this.props\r\n    const { authAnimation } = this.state\r\n    if (authenticated && authAnimation) this.animate(1)\r\n    else if (pathname !== prevProps.pathname) {\r\n      if (!prevProps.data || !prevProps.data.overlay) {\r\n        if (!data || !data.overlay) this.animate(0)\r\n      }\r\n    }\r\n  }\r\n\r\n  animate = (value: 0 | 1) => {\r\n    let delay = value === 1 ? 60 : 0\r\n    const { authAnimation } = this.state\r\n    if (authAnimation) delay = 2000\r\n    Animated.timing(this.state.animation, {\r\n      toValue: value,\r\n      duration: durationNormal,\r\n      delay,\r\n      easing: value === 0 ? easeInQuad : easeOutQuad,\r\n      useNativeDriver: true\r\n    }).start(() => this.animationLogic(value))\r\n  }\r\n\r\n  animationLogic = (value: 0 | 1) => {\r\n    if (value === 0) this.setState({ activeChildren: null }, () => this.animate(1))\r\n    else this.setState({ pointerEvents: true, authAnimation: false })\r\n  }\r\n\r\n  render() {\r\n    const { animation, pointerEvents, activeChildren } = this.state\r\n    const { children } = this.props\r\n    return (\r\n      <Animated.View\r\n        pointerEvents={pointerEvents ? 'auto' : 'none'}\r\n        style={{\r\n          opacity: animation.interpolate({ inputRange: [0, 1], outputRange: [0, 1] }),\r\n          transform: [\r\n            {\r\n              scale: animation.interpolate({ inputRange: [0, 1], outputRange: [0.94, 1] })\r\n            }\r\n          ]\r\n        }}\r\n      >\r\n        {activeChildren || children}\r\n      </Animated.View>\r\n    )\r\n  }\r\n}\r\n\r\nexport default RouteFadeAnimation\r\n```\r\n\r\n### Usage example and explanation\r\n\r\nThis component is used to wrap several routes and on pathname change preserve previous view, animate it out, replace it with new view and animate it in. Idea itself comes from react-router's documentation https://reacttraining.com/react-router/native/guides/animation/page-transitions but they use `componentWillMount` there.\r\n\r\nbasic implementation can look like this:\r\n\r\n```js\r\n<RouterFadeAnimation \r\n  pathname={routerProps.pathname} \r\n  data={routerProps.data} \r\n  authenticated={authProps.auth}>\r\n     \r\n     {routerProps.pathname === \"/home\" && <HomePage />}\r\n     {routerProps.pathname === \"/about\" && <AboutPage />}\r\n\r\n</RouterFadeAnimation>\r\n```\r\n\r\nOutside of this, there is similar component called `<RouteModalAnimation />` that overlays component above, it similarly animates views in when routerProps.data has `overlay: true` set, you will see our original component checks for this and preserves its view so it appears behind the modal, as it would otherwise dissapear due to route change.",
  "closed_by": {
    "login": "IljaDaderko",
    "id": 3154053,
    "node_id": "MDQ6VXNlcjMxNTQwNTM=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/3154053?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/IljaDaderko",
    "html_url": "https://github.com/IljaDaderko",
    "followers_url": "https://api.github.com/users/IljaDaderko/followers",
    "following_url": "https://api.github.com/users/IljaDaderko/following{/other_user}",
    "gists_url": "https://api.github.com/users/IljaDaderko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/IljaDaderko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/IljaDaderko/subscriptions",
    "organizations_url": "https://api.github.com/users/IljaDaderko/orgs",
    "repos_url": "https://api.github.com/users/IljaDaderko/repos",
    "events_url": "https://api.github.com/users/IljaDaderko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/IljaDaderko/received_events",
    "type": "User",
    "site_admin": false
  }
}
