{
  "url": "https://api.github.com/repos/facebook/react/issues/17081",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/17081/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/17081/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/17081/events",
  "html_url": "https://github.com/facebook/react/pull/17081",
  "id": 506594344,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MzI3NzU0OTUx",
  "number": 17081,
  "title": "refactoring: warning revamp part 2",
  "user": {
    "login": "Jessidhia",
    "id": 73085,
    "node_id": "MDQ6VXNlcjczMDg1",
    "avatar_url": "https://avatars1.githubusercontent.com/u/73085?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Jessidhia",
    "html_url": "https://github.com/Jessidhia",
    "followers_url": "https://api.github.com/users/Jessidhia/followers",
    "following_url": "https://api.github.com/users/Jessidhia/following{/other_user}",
    "gists_url": "https://api.github.com/users/Jessidhia/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Jessidhia/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Jessidhia/subscriptions",
    "organizations_url": "https://api.github.com/users/Jessidhia/orgs",
    "repos_url": "https://api.github.com/users/Jessidhia/repos",
    "events_url": "https://api.github.com/users/Jessidhia/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Jessidhia/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-10-14T11:27:24Z",
  "updated_at": "2019-10-14T20:40:03Z",
  "closed_at": null,
  "author_association": "COLLABORATOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/17081",
    "html_url": "https://github.com/facebook/react/pull/17081",
    "diff_url": "https://github.com/facebook/react/pull/17081.diff",
    "patch_url": "https://github.com/facebook/react/pull/17081.patch"
  },
  "body": "Part 2 of https://github.com/facebook/react/issues/16753\r\n\r\nUpdating the babel plugin to handle the new syntax was a bit tricky.\r\n\r\n`invariant` was also originally not part of the scope, but because the plugin that validated arguments to `warning` also expected `invariant` to have the same interface, I had to choose between forking the plugin or also transforming `invariant`.\r\n\r\nSome of the expressions may look funny; they were generated by this codemod:\r\n\r\n<details>\r\n\r\n```js\r\n'use strict';\r\n\r\nmodule.exports = function transformer(file, api) {\r\n  const j = api.jscodeshift;\r\n\r\n  return j(file.source)\r\n    .find(j.CallExpression)\r\n    .filter(path => {\r\n      const callee = path.value.callee;\r\n      if (callee.type !== 'Identifier') {\r\n        return false;\r\n      }\r\n      const name = callee.name;\r\n      const scope = path.scope.lookup(name);\r\n\r\n      return (\r\n        // \"isGlobal\" just means file scope, even in Modules\r\n        (scope === null || scope.isGlobal) &&\r\n        (name === 'warning' ||\r\n          name === 'warningWithoutStack' ||\r\n          name === 'lowPriorityWarning' ||\r\n          name === 'lowPriorityWarningWithoutStack' ||\r\n          name === 'invariant')\r\n      );\r\n    })\r\n    .forEach(path => {\r\n      const firstArgument = path.value.arguments[0];\r\n      if (firstArgument.type === 'StringLiteral') {\r\n        // already transformed?\r\n        return;\r\n      }\r\n      if (firstArgument.type === 'Literal') {\r\n        if (firstArgument.value) {\r\n          if (path.parentPath.value.type === 'ExpressionStatement') {\r\n            path.prune();\r\n          } else {\r\n            path.replace(j.identifier('undefined'));\r\n          }\r\n          return;\r\n        }\r\n        path.value.arguments.shift();\r\n        return;\r\n      }\r\n\r\n      path.value.arguments.shift();\r\n      if (path.parentPath.value.type === 'ExpressionStatement') {\r\n        return path.parentPath.replace(\r\n          j.ifStatement(\r\n            j.unaryExpression('!', firstArgument),\r\n            j.blockStatement([path.parentPath.node])\r\n          )\r\n        );\r\n      } else {\r\n        return path.replace(\r\n          j.sequenceExpression([\r\n            j.logicalExpression('||', firstArgument, path.node),\r\n            j.identifier('undefined'),\r\n          ])\r\n        );\r\n      }\r\n    })\r\n    .toSource();\r\n};\r\n```\r\n</details>",
  "closed_by": null
}
