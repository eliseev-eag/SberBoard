{
  "url": "https://api.github.com/repos/facebook/react/issues/1380",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/1380/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/1380/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/1380/events",
  "html_url": "https://github.com/facebook/react/issues/1380",
  "id": 31121026,
  "node_id": "MDU6SXNzdWUzMTEyMTAyNg==",
  "number": 1380,
  "title": "Proposal for porting React's Mixin APIs to a generic primitive",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 48,
  "created_at": "2014-04-09T00:27:18Z",
  "updated_at": "2017-04-21T14:52:01Z",
  "closed_at": "2017-04-21T14:52:01Z",
  "author_association": "MEMBER",
  "body": "Currently React's mixins allow multiple mixins to implement the same method in multiple mixin, if it's a whitelist. We would like to decouple the mixin system from React and therefore we need a way to solve it without a whitelist.\n\nThe idea is to have every mixin call super() to allow predictable chaining.\n\nThe mixin(...mixins) function would essentially create a new prototype chain with each mixin's set of functions stacked on top of each other in order. An object is treated as a prototype. A function is treated as a class/constructor and gets all their static methods + their prototype merged.\n\n``` javascript\nvar A = {\n\n  componentDidMount() {\n    super(); // This will end up calling an empty function, placed by mixin()\n    console.log('A');\n  }\n\n};\n\nclass B {\n\n  static getQueries() {\n    super(); // This will end up calling an empty function, placed by mixin()\n    console.log('B')\n  }\n\n  componentDidMount() {\n    console.log('B');\n    super();\n  }\n\n}\n\nclass C extends mixin(A, B) {\n\n  static getQueries() {\n    super();\n    console.log('C');\n  }\n\n  componentDidMount() {\n    super();\n    console.log('C');\n  }\n\n}\n\nC.getQueries(); // B, C\nnew C().componentDidMount(); // B, A, C\n```\n\nWe can issue warnings when the mixin function is called and some of the overlapping methods are missing super calls.\n\nSolvable but confusing/complex issues:\n\n``` javascript\nclass C extends mixin(A, B) {\n\n  // This state intializer overrides the state initializer in the base class.\n  // The current React class system merges the two. This is also not valid ES6\n  // since we don't have property initializers yet. This is based on the\n  // TypeScript syntax.\n  state = {\n    b: true\n  }\n\n  componentDidMount() {\n    // You forgot to put a super call here but there's no warning since\n    // the mixin logic happens before this class is created.\n  }\n\n}\n```\n\nTo be clear, mixins is an escape hatch to work around reusability limitations in the system. It's not idiomatic React.\n\nIdiomatic React reusable code should primarily be implemented in terms of composition and not inheritance.\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
