{
  "url": "https://api.github.com/repos/facebook/react/issues/15657",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15657/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15657/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15657/events",
  "html_url": "https://github.com/facebook/react/issues/15657",
  "id": 444357983,
  "node_id": "MDU6SXNzdWU0NDQzNTc5ODM=",
  "number": 15657,
  "title": "Changing only a value corresponding to an index using setState",
  "user": {
    "login": "vjr12",
    "id": 42905121,
    "node_id": "MDQ6VXNlcjQyOTA1MTIx",
    "avatar_url": "https://avatars3.githubusercontent.com/u/42905121?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vjr12",
    "html_url": "https://github.com/vjr12",
    "followers_url": "https://api.github.com/users/vjr12/followers",
    "following_url": "https://api.github.com/users/vjr12/following{/other_user}",
    "gists_url": "https://api.github.com/users/vjr12/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vjr12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vjr12/subscriptions",
    "organizations_url": "https://api.github.com/users/vjr12/orgs",
    "repos_url": "https://api.github.com/users/vjr12/repos",
    "events_url": "https://api.github.com/users/vjr12/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vjr12/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1168115654,
      "node_id": "MDU6TGFiZWwxMTY4MTE1NjU0",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect",
      "name": "Resolution: Support Redirect",
      "color": "106099",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-05-15T10:24:23Z",
  "updated_at": "2019-05-15T18:05:58Z",
  "closed_at": "2019-05-15T18:05:57Z",
  "author_association": "NONE",
  "body": "I am maintaining an array of objects which is stored in a state object. Basically I am pushing each object to this array whenever I click on Add button .This stores this object in array.\r\n\r\nI am maintaining a flag updateButtonFlag to show the update button for that particular account.\r\n\r\nI want to update this flag of an account that just got submitted(that is in onAddAccount() function).\r\n\r\nAfter addition , a new card gets displayed with input fields, so that next user details can be entered\r\n\r\nHelp would be appreciated\r\n\r\n```jsx\r\n//Have included only onAddAccount function ,where the logic needs to go.\r\n//There is a fetch call as well, which basically displays accounts info if there are any accounts w.r.t to that user\r\n\r\nimport * as React from \"react\";\r\n\r\ninterface IState {\r\n  users: Account[];\r\n  user: Account;\r\n}\r\ninterface Account {\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  updateButtonFlag: boolean;\r\n}\r\n\r\nexport default class App extends React.Component<{}, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      users: [],\r\n      user: null\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    let useraccounts = await this.fetchAccounts(); // call that returns  accounts, if present\r\n    let id: any, account: IAccount;\r\n    if (useraccounts.length === 0) {\r\n      // if no account, display an empty card\r\n      this.setState(\r\n        {\r\n          accounts: [\r\n            ...this.state.accounts,\r\n            { firstname: \"\", lastname: \"\", phone: \"\", updateButtonFlag: false }\r\n          ]\r\n        },\r\n        () => {}\r\n      );\r\n    }\r\n\r\n    if (useraccounts.length > 0) {\r\n      // if there are accounts existing, display themand add update button to them\r\n      let accountArray = [];\r\n\r\n      for (let i = 0; i < useraccounts.length; i++) {\r\n        account = {\r\n          firstsname: useraccounts[i].firstsname,\r\n          lastname: useraccounts[i].lastname,\r\n          phone: useraccounts[i].phone,\r\n          updateButtonFlag: true\r\n        };\r\n        accountArray.push(account);\r\n      }\r\n      this.setState(\r\n        ({ accounts }) => ({ accounts: [...accounts, ...accountArray] }),\r\n        () => {}\r\n      );\r\n    }\r\n  }\r\n\r\n  onAddAccount = (index: number) => {\r\n    // this adds one more card with input fields after submission of current user info\r\n\r\n    let { users } = this.state;\r\n    let account: IAccount = {\r\n      firstname: users[index].firstname,\r\n      lastname: users[index].lastname,\r\n      phone: users[index].phone,\r\n      updateButtonFlag: false\r\n    }; // maintaining a updateflag to show update button for the corresponding account\r\n    this.submit(account); // submit call  to submit the account details\r\n    //here i need to update the flag of currently submitted account to true, so that update button gets shown , how to do it?\r\n\r\n    this.setState(prevState => ({\r\n      users: [\r\n        ...prevState.users,\r\n        { firstname: \"\", lastname: \"\", phone: \"\", updateButtonFlag: false }\r\n      ]\r\n    }));\r\n  }; // in this line,next card gets added here\r\n\r\n  renderAccounts = (users: Account[]) => {\r\n    return accounts.map((value, index) => {\r\n      return (\r\n        <div key={index}>\r\n          <div>\r\n            <form>\r\n              <label>First Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"firstname\"\r\n                value={value.firstname}\r\n                onChange={e => this.handleChange(e, index)}\r\n                required\r\n              />\r\n              <label>Last Name:</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"lastname\"\r\n                value={value.lastname}\r\n                onChange={e => this.handleChange(e, index)}\r\n              />\r\n              <label>Age:</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"age\"\r\n                value={value.age}\r\n                onChange={e => this.handleChange(e, index)}\r\n                required\r\n              />\r\n              <div>\r\n                <button onClick={() => this.onAddAccount(index)}>\r\n                  Save & Add Another Account\r\n                </button>\r\n                {users[index].updatedButtonFlag ? (\r\n                  <button onClick={() => this.onUpdateAccount(index)}>\r\n                    Update Account\r\n                  </button>\r\n                ) : null}\r\n                <button onClick={() => this.onRemoveAccount(index)}>\r\n                  Remove Account\r\n                </button>\r\n                )}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <div>{this.renderAccounts(accounts)}</div>;\r\n  }\r\n}\r\n```\r\n",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
