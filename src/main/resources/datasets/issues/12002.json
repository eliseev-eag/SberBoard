{
  "url": "https://api.github.com/repos/facebook/react/issues/12002",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12002/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12002/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12002/events",
  "html_url": "https://github.com/facebook/react/issues/12002",
  "id": 287487238,
  "node_id": "MDU6SXNzdWUyODc0ODcyMzg=",
  "number": 12002,
  "title": "Add React.Children.isRenderable",
  "user": {
    "login": "ngub",
    "id": 11064453,
    "node_id": "MDQ6VXNlcjExMDY0NDUz",
    "avatar_url": "https://avatars3.githubusercontent.com/u/11064453?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ngub",
    "html_url": "https://github.com/ngub",
    "followers_url": "https://api.github.com/users/ngub/followers",
    "following_url": "https://api.github.com/users/ngub/following{/other_user}",
    "gists_url": "https://api.github.com/users/ngub/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ngub/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ngub/subscriptions",
    "organizations_url": "https://api.github.com/users/ngub/orgs",
    "repos_url": "https://api.github.com/users/ngub/repos",
    "events_url": "https://api.github.com/users/ngub/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ngub/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-01-10T16:05:12Z",
  "updated_at": "2018-01-10T19:06:00Z",
  "closed_at": "2018-01-10T16:56:04Z",
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\nA feature\r\n\r\n**Motivation:**\r\nGiven a component which gets props from `context` (e.g. it accepts props from Redux store via `connect` HoC) and renders either `null` or some React node by condition based on data from context it would be helpful to know outside the component whether it renders any markup or not. It would let us render wrappers for the component only if it is visible.\r\n\r\n**Usage example:**\r\nLet's say, we have a `FancyContainer` which wraps every child in a `FancyWrapper` (which can add margins, borders, animation etc).\r\n```\r\n<FancyContainer>\r\n  <ConnectedComponent/>\r\n  <ConnectedComponentConditionallyReturningNull/>\r\n  <ConnectedComponent/>\r\n</FancyContainer>\r\n```\r\nThe `ConnectedComponent` doesn't accept props. It gets everything from `context`!\r\n```\r\nconst FancyComponent = ({isNull}) => isNull ? null : <h1>Hello</h1>\r\nconst ConnectedComponent = connect((store) => ({isNull: !store.data}))(FancyComponent)\r\n```\r\nWithout checking if a `ConnectedComponentConditionallyReturningNull` renders any markup we get an empty visible wrapper between first and third children and thus break styling.\r\n\r\nReact.Children.isRenderable would allow us to easily filter children without UI.\r\n```\r\nconst FancyContainer = ({children}) =>\r\n  React.Children.map(children, (child => \r\n    React.Children.isRenderable(child)\r\n      ? <FancyWrapper>{child}</FancyWrapper>\r\n      : child\r\n  ))\r\n```\r\n\r\n**Why not just do X?**\r\nWe could achieve such behavior by passing a handler for the condition switch of the connected component, but this approach would break its encapsulation and it is not suitable for those library components which toggle their \"renderability\" internally.\r\n\r\nWe theoretically could use `:has` CSS pseudo selector (though it is not supported yet by any browser) and setting `ConnectedComponent`'s `display` property to `none` which would result in `FancyContainer` rendering invisible nodes. But if `FancyContainer` is itself wrapped in a `FancyWrapper` we then wouldn't be able to hide its styling.\r\n\r\nWe could try to manually find `<ConnectedComponent/>`'s node in DOM and if it doesn't exist remove `FancyWrapper` but that sound too messy and violates React's declarative nature. Also if data in `context` is dynamic (it usually is) we would then hide components while their data is still on the way from the server and might never reveal them when it is loaded to our `context` (maybe we could but with more mess).\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
