{
  "url": "https://api.github.com/repos/facebook/react/issues/13336",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13336/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13336/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13336/events",
  "html_url": "https://github.com/facebook/react/issues/13336",
  "id": 348134323,
  "node_id": "MDU6SXNzdWUzNDgxMzQzMjM=",
  "number": 13336,
  "title": "Imperative wrappers can't access current context value in commit phase",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 739761016,
      "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
      "name": "Component: Reconciler",
      "color": "f9a798",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-08-07T01:30:41Z",
  "updated_at": "2018-09-25T22:49:47Z",
  "closed_at": "2018-09-25T22:49:47Z",
  "author_association": "MEMBER",
  "body": "Sometimes we have an imperative wrapper like this:\r\n\r\n```js\r\ncomponentDidMount() {\r\n  renderSomethingImperatively(this.props)\r\n}\r\n\r\ncomponentDidUpdate() {\r\n  renderSomethingImperatively(this.props)\r\n}\r\n\r\nrender() {\r\n  return null\r\n}\r\n```\r\n\r\nPortals eliminated the need for this for regular DOM jumps. But we still need this for embedding renderers (e.g. `react-art` [does this](https://github.com/facebook/react/blob/3b3b7fcbbdc734d7f2a2e509a0b07c0eb053f779/packages/react-art/src/ReactART.js#L59-L84)) and use cases like \"Vue inside React\".\r\n\r\nFor cross-renderer embedding, maybe we could extend portals to do that (https://github.com/facebook/react/issues/13332). There are still imperative use cases for cross-library rendering though.\r\n\r\nOne thing that becomes annoying is that new context won't propagate down through this imperative boundary. This is because we don't maintain a stack in the commit phase. We're traversing a flat linked list of effects. So we don't actually know what context value is current by the time `componentDidMount` or `componentDidUpdate` fires.\r\n\r\nFor `react-art` and friends, this means context from a host app is not accessible. This is quite annoying. You could hack around it with something like\r\n\r\n```js\r\n<MyConsumer>\r\n  {value =>\r\n    <ReactART.Surface>\r\n      <MyContext.Provider value={value}>\r\n        <Stuff />\r\n      </MyContext.Provider>\r\n    </ReactART.Surface>\r\n  }\r\n</MyConsumer>\r\n```\r\n\r\nBut this is neither obvious nor convenient. You have to anticipate all contexts that can get used below.\r\n\r\nThis seems even less convenient for imperative cases like \"Vue inside React\". \r\n\r\n```js\r\ncomponentDidMount() {\r\n  renderSomethingImperatively(this.props) // ???\r\n}\r\n\r\ncomponentDidUpdate() {\r\n  renderSomethingImperatively(this.props) // ???\r\n}\r\n\r\nrender() {\r\n  // <MyConsumer>{value => ???}</MyConsumer>\r\n  return <div />\r\n}\r\n```\r\n\r\nSeems like you could use `unstable_read()` in `getDerivedStateFromProps` and that would put it into state so you can use it in lifecycles. So maybe that's sufficient. It still means you need to be explicit about which contexts you want to remember though.\r\n\r\nI wonder if we can find a better solution to these use cases.",
  "closed_by": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  }
}
