{
  "url": "https://api.github.com/repos/facebook/react/issues/10507",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10507/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10507/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10507/events",
  "html_url": "https://github.com/facebook/react/issues/10507",
  "id": 251812657,
  "node_id": "MDU6SXNzdWUyNTE4MTI2NTc=",
  "number": 10507,
  "title": "Consider What Happens to XSS Surface Area With No Whitelist",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": {
    "url": "https://api.github.com/repos/facebook/react/milestones/23",
    "html_url": "https://github.com/facebook/react/milestone/23",
    "labels_url": "https://api.github.com/repos/facebook/react/milestones/23/labels",
    "id": 1670888,
    "node_id": "MDk6TWlsZXN0b25lMTY3MDg4OA==",
    "number": 23,
    "title": "16.0",
    "description": "",
    "creator": {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 69,
    "state": "closed",
    "created_at": "2016-03-29T02:12:16Z",
    "updated_at": "2017-10-04T11:52:38Z",
    "due_on": null,
    "closed_at": "2017-10-04T11:52:38Z"
  },
  "comments": 5,
  "created_at": "2017-08-22T01:30:35Z",
  "updated_at": "2017-09-13T17:12:02Z",
  "closed_at": "2017-09-13T17:12:02Z",
  "author_association": "MEMBER",
  "body": "Consider the case in #10506 but let's say we've fix it by special casing `dangerouslySetInnerHTML` to use a symbol.\r\n\r\nNow consider this URL:\r\n\r\n```\r\n?{\"content\":\"Click%20Me\",\"onclick\":\"alert(%27p0wned%27)\"}\r\n```\r\n\r\nIf `onclick` (or any other event name, current or future) gets passed through as a plain old string, then this is a XSS vulnerability.\r\n\r\nThe tricky part about this one is that it's plain old strings *and* it's a potentially infinite long list since it also includes future event names.\r\n\r\nNow I *think* a safe strategy might be to hard blacklist (meaning they don't get added to the DOM) any attribute that starts with `on`. Does that cover everything?\r\n\r\ncc @nhunzaker ",
  "closed_by": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  }
}
