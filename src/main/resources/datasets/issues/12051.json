{
  "url": "https://api.github.com/repos/facebook/react/issues/12051",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12051/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12051/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12051/events",
  "html_url": "https://github.com/facebook/react/issues/12051",
  "id": 289858687,
  "node_id": "MDU6SXNzdWUyODk4NTg2ODc=",
  "number": 12051,
  "title": "Event Handlers on Fragments",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 127893911,
      "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
      "name": "Component: DOM",
      "color": "fef2c0",
      "default": false
    },
    {
      "id": 739761016,
      "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
      "name": "Component: Reconciler",
      "color": "f9a798",
      "default": false
    },
    {
      "id": 40929153,
      "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
      "name": "Type: Enhancement",
      "color": "84b6eb",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 21,
  "created_at": "2018-01-19T04:20:57Z",
  "updated_at": "2019-08-23T09:22:16Z",
  "closed_at": "2019-08-23T09:21:51Z",
  "author_association": "MEMBER",
  "body": "The use case is when an abstraction wants to listen to some event bubbling up and intercept the event somehow.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <div onClick={() => props.onAction()}>{props.children}</div>;\r\n}\r\n```\r\n\r\nPerhaps there is some state and context involved too.\r\n\r\nThis works fine today as long as you can wrap it in a `<div />`. However, you can't necessarily always do that. I hear that some of this will be relaxed but conceptually I think the constraints will remain in many environment that you don't want a wrapper element around these.\r\n\r\n```js\r\n<ul>\r\n  <Abstraction onAction={...}>\r\n    <li>A</li>\r\n    <li>B</li>\r\n  </Abstraction>\r\n</ul>\r\n```\r\n\r\n```js\r\n<table>\r\n  <tbody>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n    <Abstraction onAction={...}>\r\n      <tr><td>A</td></tr>\r\n      <tr><td>B</td></tr>\r\n    </Abstraction>\r\n  </tbody>\r\n</table>\r\n```\r\n\r\nIt would be nice to be able to use fragments for this.\r\n\r\n```js\r\nfunction Abstraction(props) {\r\n  return <Fragment onClick={() => props.onAction()}>{props.children}</Fragment>;\r\n}\r\n```\r\n\r\nIt is easy to implement with the synthetic event system but I suspect it is doable with other approaches too (including just inserting an element called `<fragment />` in the DOM).\r\n\r\nTo implement this we'd need somewhere to store the \"current\" props. We can use the `stateNode` on fragment fibers to hold that. We also need to schedule commit phase effects whenever the set of event handlers on a fragment changes. In the commit phase we update the stateNode on both Fibers to hold the \"current props\".\r\n\r\nThat way when we bubble up the fiber return pointers, we know that stateNode holds the current set of props and those will be the ones we extract event handlers from.",
  "closed_by": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  }
}
