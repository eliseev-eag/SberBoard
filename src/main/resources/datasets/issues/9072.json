{
  "url": "https://api.github.com/repos/facebook/react/issues/9072",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9072/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9072/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9072/events",
  "html_url": "https://github.com/facebook/react/issues/9072",
  "id": 210568841,
  "node_id": "MDU6SXNzdWUyMTA1Njg4NDE=",
  "number": 9072,
  "title": "[Fiber] DOM reviving through DOM walking seems blocked by the ReactFiberReconciler API",
  "user": {
    "login": "aickin",
    "id": 44199,
    "node_id": "MDQ6VXNlcjQ0MTk5",
    "avatar_url": "https://avatars1.githubusercontent.com/u/44199?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aickin",
    "html_url": "https://github.com/aickin",
    "followers_url": "https://api.github.com/users/aickin/followers",
    "following_url": "https://api.github.com/users/aickin/following{/other_user}",
    "gists_url": "https://api.github.com/users/aickin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aickin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aickin/subscriptions",
    "organizations_url": "https://api.github.com/users/aickin/orgs",
    "repos_url": "https://api.github.com/users/aickin/repos",
    "events_url": "https://api.github.com/users/aickin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aickin/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2017-02-27T18:37:24Z",
  "updated_at": "2017-10-04T18:13:39Z",
  "closed_at": "2017-10-04T18:13:39Z",
  "author_association": "COLLABORATOR",
  "body": "After a discussion with @sebmarkbage about how the Fiber client renderer should revive a server-rendered DOM, I started to dip my toe into seeing how hard it would be to implement in `ReactDOMFiber`.\r\n\r\nMy first thought for implementation was to use `createInstance` to crawl the existing DOM element-by-element, comparing the existing DOM elements to the `createInstance` arguments. That would look something like this (some parts having been simplified):\r\n\r\n```js\r\ncreateInstance(type, props) {\r\n // TODO: the actual check to make sure the markup is correct is probably a little\r\n // more complicated than the conditional here.\r\n if (currentDOMElement && \r\n   currentDOMElement.type === type && \r\n   compareProps(currentDOMElement, props) {\r\n  // the current DOM element in the document should be reused.\r\n  return currentDOMElement;\r\n } else {\r\n  // TODO: warn about markup mismatch.\r\n  const newElement = <call the existing implementation of createInstance() in ReactDomFiber.js>;\r\n  newElement[elementInDocumentToReplace] = currentDOMElement;\r\n  return newElement;\r\n }\r\n}\r\n\r\nappendChild(parent, child) {\r\n if(child[elementInDocumentToReplace]) {\r\n  // we need to patch up the DOM tree because there was a markup mismatch.\r\n  parent.replaceChild(child, child[elementInDocumentToReplace]);\r\n } else if (child.parentNode === null) {\r\n  // either there was no SSR markup tree or this is a descendant of a node that\r\n  // needed to be patched up.\r\n  parent.appendChild(child);\r\n } else {\r\n  // the instance is already correctly in the document from SSR, so\r\n  // this call to appendChild is a no-op.\r\n }\r\n}\r\n```\r\n\r\nThis all seems fairly straightforward to me, with one big problem: I can't figure out any good way to figure out what `currentDOMElement` is. Unfortunately, `createInstance` doesn't take in an argument identifying its parent instance; as far as I can tell, there's no way to determine where in the tree you are during a call to `createInstance`.\r\n\r\nI looked into using `hostContext`, which is currently used in `ReactDOMFiber` to pass down the `type` of ancestors in the tree. I'm fairly certain that `hostContext` isn't good enough to get access to the current DOM node, though, because the method that generates the host context for a particular node, `getChildHostContext`, doesn't receive the parent instance, only the parent's host context and type.\r\n\r\nThere is one truly silly way to solve this with the current API, which is to defer creation of DOM instances to `appendChild`, when you know where in the tree the instance is supposed to be. In this solution, `createInstance` would return the element metadata (type & props) as an Instance instead of a real DOM element, and you'd make the decision whether to use existing markup or make a new DOM element in `appendChild`, when you have all the information you need about where you are in the tree. This strikes me as a pretty bad solution, though, since the whole point of the two calls (at least as I understand it) is to do `createInstance` calls over multiple frames and all the `appendChild` calls synchronously in one frame. This idea would put all the work into the `appendChild` frame, which would kind of defeat the point of Fiber.\r\n\r\nSo: my knowledge of the Fiber codebase is minimal at best, and I could be totally wrong about all this, but I think that `createInstance`'s signature may need to change to support DOM revival on the client. If `createInstance` took in the parent instance and closest preceding sibling instance as arguments, this problem would be solved, but I'm sure there are other solutions, too. Thoughts?",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
