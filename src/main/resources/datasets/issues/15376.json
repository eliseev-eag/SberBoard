{
  "url": "https://api.github.com/repos/facebook/react/issues/15376",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15376/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15376/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15376/events",
  "html_url": "https://github.com/facebook/react/issues/15376",
  "id": 431622115,
  "node_id": "MDU6SXNzdWU0MzE2MjIxMTU=",
  "number": 15376,
  "title": "ReactDomServer - renderToString Failing with Context Provider on IE11",
  "user": {
    "login": "Adkaiser",
    "id": 176357,
    "node_id": "MDQ6VXNlcjE3NjM1Nw==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/176357?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Adkaiser",
    "html_url": "https://github.com/Adkaiser",
    "followers_url": "https://api.github.com/users/Adkaiser/followers",
    "following_url": "https://api.github.com/users/Adkaiser/following{/other_user}",
    "gists_url": "https://api.github.com/users/Adkaiser/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Adkaiser/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Adkaiser/subscriptions",
    "organizations_url": "https://api.github.com/users/Adkaiser/orgs",
    "repos_url": "https://api.github.com/users/Adkaiser/repos",
    "events_url": "https://api.github.com/users/Adkaiser/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Adkaiser/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710332294,
      "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
      "name": "Component: Server Rendering",
      "color": "d4c5f9",
      "default": false
    },
    {
      "id": 620368407,
      "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
      "name": "Resolution: Needs More Information",
      "color": "fffde7",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-04-10T17:24:17Z",
  "updated_at": "2019-09-16T16:23:20Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm encountering an error in one of my components when running in IE11. First, I have a component that renders a Context.Provider:\r\n\r\n```\r\nclass ProviderClass extends React.Component {\r\n  constructor(props) {\r\n    ...\r\n    this.state = loadedState;\r\n  }\r\n\r\n ...class functions...\r\n\r\n  render() {\r\n    return (\r\n      <CustomContext.Provider value={this.state}>\r\n        {this.props.children}\r\n      </CustomContext.Provider>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nA child within this provider consumes the context, and one of its functions calls renderToString. This function call is passed an additional provider:\r\n\r\n```\r\nclass ConsumerClass extends React.Component {\r\n  ...additional functions...\r\n\r\n  interpolate(text, values) {\r\n    let output = ReactDOMServer.renderToString(text);\r\n\r\n    // Replace placeholders\r\n    for (const placeholder in values) {\r\n      // Render replacement\r\n      const value = ReactDOMServer.renderToString(\r\n        // !!!THIS SEEMS to be where the error happens.\r\n        <ProviderClass>{values[placeholder]}</ProviderClass>\r\n      );\r\n      // Build regex\r\n      const escapedPlaceholder = placeholder.replace(\r\n        /([.*+?^=!:${}()|[\\]/\\\\])/g,\r\n        \"\\\\$1\"\r\n      );\r\n      const regex = new RegExp(`{{${escapedPlaceholder}}}`, \"g\");\r\n      // Run replacement\r\n      output = output.replace(regex, value);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  render() {\r\n    ...\r\n    return this.interpolate(text, values);\r\n  }\r\n}\r\nConsumerClass.contextType = CustomContext;\r\n```\r\n\r\nIn almost every browser, including Edge, this works without problems. However, in IE11, this first presents the following warning:\r\n`Warning: Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.`\r\nand then an error:\r\n`Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object.`\r\n\r\nThe object inside the renderToString function appears to have its render function called, as I can see console logs that I put into it. I suspect it's in the return that the problem occurs. I haven't been able to reproduce this in a simpler setup. So far, all I've been able to determine is that this is the object that is being passed to renderToString according to the IE11 console:\r\n```\r\n[object Object]\r\n   {\r\n      [functions]: ,\r\n      $$typeof: 60103,\r\n      __proto__: { },\r\n      _owner: { },\r\n      _self: { },\r\n      _source: { },\r\n      _store: { },\r\n      key: null,\r\n      props: { },\r\n      ref: null,\r\n      Symbol(react.concurrent_mode)_s.8lvg0ehagqo: undefined,\r\n      Symbol(react.context)_r.8lvg0ehagqo: undefined,\r\n      Symbol(react.forward_ref)_t.8lvg0ehagqo: undefined,\r\n      Symbol(react.fragment)_n.8lvg0ehagqo: undefined,\r\n      Symbol(react.lazy)_w.8lvg0ehah3o: undefined,\r\n      Symbol(react.memo)_v.8lvg0ehagqo: undefined,\r\n      Symbol(react.portal)_m.8lvg0ehagqo: undefined,\r\n      Symbol(react.profiler)_p.8lvg0ehagqo: undefined,\r\n      Symbol(react.provider)_q.8lvg0ehagqo: undefined,\r\n      Symbol(react.strict_mode)_o.8lvg0ehagqo: undefined,\r\n      Symbol(react.suspense)_u.8lvg0ehagqo: undefined\r\n   }\r\n```\r\nAnd this is the object that is being returned by that object's render function (appears to be identical).\r\n```\r\n[object Object]\r\n   {\r\n      [functions]: ,\r\n      $$typeof: 60103,\r\n      __proto__: { },\r\n      _owner: { },\r\n      _self: { },\r\n      _source: { },\r\n      _store: { },\r\n      key: null,\r\n      props: { },\r\n      ref: null,\r\n      Symbol(react.concurrent_mode)_s.8lvg0ehagqo: undefined,\r\n      Symbol(react.context)_r.8lvg0ehagqo: undefined,\r\n      Symbol(react.forward_ref)_t.8lvg0ehagqo: undefined,\r\n      Symbol(react.fragment)_n.8lvg0ehagqo: undefined,\r\n      Symbol(react.lazy)_w.8lvg0ehah3o: undefined,\r\n      Symbol(react.memo)_v.8lvg0ehagqo: undefined,\r\n      Symbol(react.portal)_m.8lvg0ehagqo: undefined,\r\n      Symbol(react.profiler)_p.8lvg0ehagqo: undefined,\r\n      Symbol(react.provider)_q.8lvg0ehagqo: undefined,\r\n      Symbol(react.strict_mode)_o.8lvg0ehagqo: undefined,\r\n      Symbol(react.suspense)_u.8lvg0ehagqo: undefined,\r\n      type: { }\r\n   }\r\n```\r\n\r\nThe only other thing I've been able to notice is that, based on console logs, the render function of ConsumerClass seems to be running twice - both times displaying the warning, followed by the error occurring twice at the end of the code run. This might just be some retry functionality built into IE11, as this double run only occurs in cases where the warning does (i.e. the for loop executes at least once).\r\n\r\n",
  "closed_by": null
}
