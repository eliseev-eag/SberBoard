{
  "url": "https://api.github.com/repos/facebook/react/issues/16002",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16002/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16002/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16002/events",
  "html_url": "https://github.com/facebook/react/pull/16002",
  "id": 461265516,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjkyMjI5MTA3",
  "number": 16002,
  "title": "[Fresh] Handle changes at module boundaries",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-06-27T01:59:03Z",
  "updated_at": "2019-06-27T19:53:08Z",
  "closed_at": "2019-06-27T19:53:04Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/16002",
    "html_url": "https://github.com/facebook/react/pull/16002",
    "diff_url": "https://github.com/facebook/react/pull/16002.diff",
    "patch_url": "https://github.com/facebook/react/pull/16002.patch"
  },
  "body": "Normally we use the registration mechanism to \"contain\" changes. We edit a component, there's a new version of it, we update the registration. Cool. We don't want to re-evaluate the world. Just that file alone, if we can.\r\n\r\nWhat if nothing registered during that file's evaluation? If there's nothing to register, there's nothing to update.. Right? Well, not quite.\r\n\r\nIf we had an `App` class, initially we registered it at the module boundary with a fallback `\"[App.js] exports.default\"` ID. But if we rewrite it to a function (imagine I'm a product developer moving to Hooks), in the new version we'll register it twice — first via transform with `\"[App.js] App\"` and then with `\"[App.js] exports.default\"` ID. First registration wins. As a result, `\"[App.js] exports.default\"` ID _keeps pointing to the old `App` class_. That happens on RN now.\r\n\r\nAs a result, when you convert a class to a function, you keep seeing the class.\r\n\r\nWe could patch over it in different ways. But I think the core problem here is that _if the families changed at the module boundary, we can't safely stop at that module_. (Especially in an environment without inline requires.) We need to re-evaluate parent modules, and apply the same algorithm to them, so that they re-render and use the latest versions of exports.\r\n\r\nSo I'm adding a mechanism that the module system can use to do this. The new method is `getFamilyByType`. The module system can compare the previous and next exports. If some were added or removed, we need to propagate the update. (This also helps fix the case where a parent references a deleted export from a child — that should become an error by re-rendering the parent.) The new method also lets us propagate the update if *registered family* becomes different for that export. So that catches cases like class-to-function, function-to-class, wrap-in-HOC, export-a-different-function-component-from-the-same-file.\r\n\r\nI added some integration tests to show the intent although I won't be fully modeling it here. That code will live in the module system.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
