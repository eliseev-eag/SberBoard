{
  "url": "https://api.github.com/repos/facebook/react/issues/16163",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16163/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16163/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16163/events",
  "html_url": "https://github.com/facebook/react/pull/16163",
  "id": 470329536,
  "node_id": "MDExOlB1bGxSZXF1ZXN0Mjk5MzM4Mjk0",
  "number": 16163,
  "title": "[Flare] Redesign core event system",
  "user": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    },
    {
      "id": 1296748300,
      "node_id": "MDU6TGFiZWwxMjk2NzQ4MzAw",
      "url": "https://api.github.com/repos/facebook/react/labels/React%20Flare",
      "name": "React Flare",
      "color": "63f2ff",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-07-19T13:37:56Z",
  "updated_at": "2019-07-28T09:08:34Z",
  "closed_at": "2019-07-23T22:46:45Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/16163",
    "html_url": "https://github.com/facebook/react/pull/16163",
    "diff_url": "https://github.com/facebook/react/pull/16163.diff",
    "patch_url": "https://github.com/facebook/react/pull/16163.patch"
  },
  "body": "This PR applies some core design changes as to how the React Flare event system works. This is a follow up to #16101 and #16122. This design tackles the problems already outlined in those PRs.\r\n\r\nThe design system now consists of two key parts:\r\n- responders (created via `React.unstable_createResponder`)\r\n- listeners (used via `React.unstable_useListener`)\r\n\r\nResponders work pretty much like how they did before, except they're no longer consumed via Event Components, but are rather passed directly as an array to host components:\r\n\r\n```jsx\r\nimport {PressResponder} from 'react-events/press';\r\n\r\n<div responders={<PressResponder />} />\r\n```\r\n\r\nHost components can have multiple event responders, but any duplicate event responders are a warning and no-op. Event responders do not emit events, but they do accept optional props:\r\n\r\n```jsx\r\nimport {PressResponder} from 'react-events/press';\r\n\r\n<div responders={<PressResponder preventDefault={false} />} />\r\n```\r\n\r\nWhen you give a responder to a host component, there's a binding between that host component and the logic from within the relevant event responder implementation. The host component is also the \"responder target\" from there on too. Event responders act like a sort of event emitter, where they listen to native DOM events, but emit custom React Flare events.\r\n\r\nEvent listeners then pick up the React Flare events as the propagate through the React fiber tree. Event listeners are used exclusively in hook form:\r\n\r\n```jsx\r\nReact.useListener(EventResponder, props)\r\n```\r\n\r\nExample:\r\n\r\n```jsx\r\nimport {usePressListener, PressResponder} from 'react-events/press'l\r\n\r\nfunction MyComponent() {\r\n  usePressListener({ onPress: handlePress });\r\n\r\n  function handlePress(e) {\r\n    console.log('You pressed the div!');\r\n  }\r\n\r\n  return <div responders={<PressResonder />}>Press me!</div>\r\n}\r\n```\r\n\r\nEvents emitted from responders will terminate if they propagate the tree and hit another responder of the same type:\r\n\r\n```jsx\r\nfunction MyComponent() {\r\n  // this won't get events from the inner div\r\n  usePressListener({ onPress: handlePress });\r\n\r\n  function handlePress(e) {\r\n    console.log('You pressed the div!');\r\n  }\r\n\r\n  return (\r\n    <div responders={<PressResonder />}>\r\n        <div responders={<PressResonder />}>\r\n          Inner div\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nIf the desired effect is to listen from events, an appropiate component boundary with a hook should be inserted, or another event responder should be used (i.e. `PressWithin`?).\r\n\r\nIf there are multiple responders in a sub-tree that can be intercepted by the same listener, like show:\r\n\r\n```jsx\r\nfunction MyComponent() {\r\n  usePressListener({ onPress: handlePress });\r\n\r\n  function handlePress(e) {\r\n    console.log('You pressed the div!');\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div responders={<PressResonder />}>Div 1</div>\r\n      <div responders={<PressResonder />}>Div 2</div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n```\r\n\r\nThen to only intercept a single event, the children should be broken into sub components that then listen to only the things it wants to be concerned about. It's also possible to determine the child being pressed by other mechanisms (`event.target` and maybe a future `event.responderProps`).\r\n\r\nCompared to the previous event system design in Flare:\r\n\r\n```jsx\r\nfunction PressableButton({children, onPress, onHover, onFocus}) {\r\n  return (\r\n    <Press onPress={onPress}>\r\n      <Hover onHover={onHover}>\r\n        <Focus onFocus={onFocus}>\r\n          <div>\r\n            {children}\r\n          </div>\r\n        </Focus>\r\n      </Hover>\r\n    </Press>\r\n  )\r\n}\r\n```\r\n\r\nWith this PR and design, you would do this:\r\n\r\n```jsx\r\nfunction PressableButton({children, onPress, onHover, onFocus}) {\r\n  usePressResponder({onPress});\r\n  useHoverResponder({onHover});\r\n  useFocusResponder({onFocus});\r\n\r\n  return (\r\n    <div responders={[<PressResponder/ >, <FocusResponder />, <HoverResponder />]}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nNote: there are no fibers created for this new event system design. Instead we attached objects to the existing fibers in the tree already, or use hooks.\r\n",
  "closed_by": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  }
}
