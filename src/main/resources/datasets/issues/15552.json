{
  "url": "https://api.github.com/repos/facebook/react/issues/15552",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15552/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15552/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15552/events",
  "html_url": "https://github.com/facebook/react/issues/15552",
  "id": 439284953,
  "node_id": "MDU6SXNzdWU0MzkyODQ5NTM=",
  "number": 15552,
  "title": "Use options object with custom hook",
  "user": {
    "login": "jasmith79",
    "id": 7632166,
    "node_id": "MDQ6VXNlcjc2MzIxNjY=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/7632166?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jasmith79",
    "html_url": "https://github.com/jasmith79",
    "followers_url": "https://api.github.com/users/jasmith79/followers",
    "following_url": "https://api.github.com/users/jasmith79/following{/other_user}",
    "gists_url": "https://api.github.com/users/jasmith79/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jasmith79/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jasmith79/subscriptions",
    "organizations_url": "https://api.github.com/users/jasmith79/orgs",
    "repos_url": "https://api.github.com/users/jasmith79/repos",
    "events_url": "https://api.github.com/users/jasmith79/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jasmith79/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-05-01T19:12:46Z",
  "updated_at": "2019-05-02T00:05:59Z",
  "closed_at": "2019-05-02T00:05:40Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nNot sure which this would qualify as.\r\n\r\n**What is the current behavior?**\r\nWhen using an object parameter with destructuring, React's memoization is too aggressive.\r\n\r\n**What is the expected behavior?**\r\nHook calls should be more independent\r\n\r\nConsider the following custom fetch hook:\r\n\r\n```javascript\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useFetch = ({\r\n  url,\r\n  request,\r\n  initialData = {},\r\n  fetch = window.fetch.bind(window),\r\n}) => {\r\n  const [data, update] = useState(initialData);\r\n  const fetchData = async () => {\r\n    const resp = await fetch(request || url);\r\n    const json = await resp.json();\r\n    update(json);\r\n  };\r\n\r\n  fetchData();\r\n  return data;\r\n};\r\n```\r\n\r\nI went to write tests for it like so:\r\n\r\n```javascript\r\nconst TestHook = ({ hook, args }) => {\r\n  const res = hook(...args);\r\n  return <div result={res} />;\r\n};\r\n\r\nlet fakeFetch;\r\nbeforeEach(() => {\r\n  fakeFetch = jest.fn();\r\n});\r\n\r\ndescribe('fakeFetch', () => {\r\n  it('should use initialData when present', () => {\r\n    const args = [{\r\n      url: 'http://foo.com',\r\n      initialData: 3,\r\n      fetch: fakeFetch,\r\n    }];\r\n\r\n    const wrapper = mount(<TestHook hook={useFetch} args={args} />);\r\n    const { result } = wrapper.find('div').props();\r\n    expect(result).toBe(3);\r\n  });\r\n\r\n  it('should update with new data from the fetch', done => {\r\n    fakeFetch.mockReturnValueOnce(fakeResponseFactory('foo'));\r\n    const args = [{\r\n      url: 'http://foo.com',\r\n      intialData: 'baz',\r\n      fetch: fakeFetch,\r\n   } ];\r\n\r\n    const wrapper = mount(<TestHook hook={useFetch} args={args} act={act}/>);\r\n    const { result } = wrapper.find('div').props();\r\n    expect(result).toEqual('baz');\r\n    setTimeout(() => {\r\n      act(() => wrapper.update());\r\n      const { result } = wrapper.find('div').props();\r\n      expect(result).toEqual('foo');\r\n      done();\r\n    }, 10);\r\n  });\r\n});\r\n```\r\nThe second test will fail because as far as I can tell it cached the call with the first mock which doesn't return anything, meaning I get a \"Cannot read property 'json' of undefined\" error.\r\n\r\nSwitching the hook to using positional arguments fixes the problem (as does disabling the first test). If this is the desired behavior, then a blurb should probably be added to the 'Rules of Hooks' page about using positional arguments. If not, would appreciate some direction on how to make this work.",
  "closed_by": {
    "login": "jasmith79",
    "id": 7632166,
    "node_id": "MDQ6VXNlcjc2MzIxNjY=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/7632166?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jasmith79",
    "html_url": "https://github.com/jasmith79",
    "followers_url": "https://api.github.com/users/jasmith79/followers",
    "following_url": "https://api.github.com/users/jasmith79/following{/other_user}",
    "gists_url": "https://api.github.com/users/jasmith79/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jasmith79/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jasmith79/subscriptions",
    "organizations_url": "https://api.github.com/users/jasmith79/orgs",
    "repos_url": "https://api.github.com/users/jasmith79/repos",
    "events_url": "https://api.github.com/users/jasmith79/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jasmith79/received_events",
    "type": "User",
    "site_admin": false
  }
}
