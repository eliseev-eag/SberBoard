{
  "url": "https://api.github.com/repos/facebook/react/issues/14092",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14092/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14092/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14092/events",
  "html_url": "https://github.com/facebook/react/issues/14092",
  "id": 377203519,
  "node_id": "MDU6SXNzdWUzNzcyMDM1MTk=",
  "number": 14092,
  "title": "getState() hook proposal",
  "user": {
    "login": "denysonique",
    "id": 631834,
    "node_id": "MDQ6VXNlcjYzMTgzNA==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/631834?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/denysonique",
    "html_url": "https://github.com/denysonique",
    "followers_url": "https://api.github.com/users/denysonique/followers",
    "following_url": "https://api.github.com/users/denysonique/following{/other_user}",
    "gists_url": "https://api.github.com/users/denysonique/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/denysonique/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/denysonique/subscriptions",
    "organizations_url": "https://api.github.com/users/denysonique/orgs",
    "repos_url": "https://api.github.com/users/denysonique/repos",
    "events_url": "https://api.github.com/users/denysonique/events{/privacy}",
    "received_events_url": "https://api.github.com/users/denysonique/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 12,
  "created_at": "2018-11-04T22:43:27Z",
  "updated_at": "2019-08-15T16:09:06Z",
  "closed_at": "2018-11-05T15:04:46Z",
  "author_association": "NONE",
  "body": "`useState()` provided state value currently cannot be used in `useEffect(fn, [])` - (componentDidMount-like scenario) with asynchronous functions after state has been updated following the initial [] run.\r\n\r\nUpon trying to give Hooks a try for a real world application I was initially confused with accessing state. Here is a little example what I tried to do:\r\n\r\n\r\n```javascript\r\nconst UserList = () => {\r\n    const [users, setUsers] = useState([])\r\n    useEffect(() => {\r\n        const socket = io('/dashboard')\r\n        socket.on('user:connect', (user) => {\r\n            setUsers([...users, user])\r\n        })\r\n        socket.on('user:update', (user) => {\r\n            let newUsers = users.map((u) => u.id == user.id ? user : u)\r\n            setUsers(newUsers)\r\n        }) \r\n    }, [])\r\n\r\n    return (\r\n        users.map(({id, email}) => (\r\n            <tr key={id}>\r\n                <td>{id}</td>\r\n                <td>{email}</td>\r\n            </tr>\r\n        ))\r\n    )\r\n}\r\n```\r\nUpon running this I instantly realised that inside the `socket.on()` handler the `users` initially obtained from useState() did not reflect the changes inflicted by `setUsers()` ran on `socket.on('user:connect')`. Passing `[users]` as the second argument of `useEffect()` wasn't an option as that would cause additional `socket.on()` binds. I became skeptical about Hooks for this use case and sadly thought this would be where my journey with using hooks instead of the class components would end.\r\n\r\nFortunately I then found a solution to this problem (with someone indirectly having helped me by accident in the reactflux channel) by using an updater function with `setState()` which made it all work: \r\n```javascript\r\n  socket.on('user:update', (user) => {\r\n            setUsers(users => users.map((u) => u.id == user.id ? user : u))\r\n   })\r\n```\r\n\r\nThe `setState()` problem was solved, but I am now wondering that if I will ever need to access `state` outside of an updater function, i.e. to just reply to a WebSocket message with some value from the state I will be unable to do so and this will force me and other users to revert to class components for such cases.\r\n\r\nI therefore would like to suggest that a `getState()` hook would be an ideal solution to this problem.\r\n                                                                                                                      \r\n \r\n \r\n \r\n_Here is another mini example demonstrating the problem in a more concise manner:_ \r\n```javascript\r\nconst HooksComponent = () => {\r\n    const [value, setValue] = useState({ val: 0 });\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => setValue({ val: 10 }), 100)\r\n        setTimeout(() => console.log('value: ', value.val), 200)\r\n    }, []);\r\n}\r\n//console.log output: 0 instead of 10\r\n```\r\nAnd here is one with a proposed solution:\r\n\r\n```javascript\r\nconst HooksComponent = () => {\r\n    const [state, setState, getState] = useState({ val: 0 });\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => setState({ val: 10 }), 100)\r\n        setTimeout(() => {\r\n            getState(state => {\r\n                console.log('value: ', state.val)\r\n            })\r\n        }, 200)\r\n    }, [])\r\n\r\n```\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
