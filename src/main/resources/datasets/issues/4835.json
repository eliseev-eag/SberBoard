{
  "url": "https://api.github.com/repos/facebook/react/issues/4835",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/4835/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/4835/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/4835/events",
  "html_url": "https://github.com/facebook/react/issues/4835",
  "id": 105806160,
  "node_id": "MDU6SXNzdWUxMDU4MDYxNjA=",
  "number": 4835,
  "title": "Allow ReactShallowRenderer to expose JSX for test debugging",
  "user": {
    "login": "johnnyreilly",
    "id": 1010525,
    "node_id": "MDQ6VXNlcjEwMTA1MjU=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1010525?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/johnnyreilly",
    "html_url": "https://github.com/johnnyreilly",
    "followers_url": "https://api.github.com/users/johnnyreilly/followers",
    "following_url": "https://api.github.com/users/johnnyreilly/following{/other_user}",
    "gists_url": "https://api.github.com/users/johnnyreilly/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/johnnyreilly/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/johnnyreilly/subscriptions",
    "organizations_url": "https://api.github.com/users/johnnyreilly/orgs",
    "repos_url": "https://api.github.com/users/johnnyreilly/repos",
    "events_url": "https://api.github.com/users/johnnyreilly/events{/privacy}",
    "received_events_url": "https://api.github.com/users/johnnyreilly/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2015-09-10T13:29:10Z",
  "updated_at": "2017-10-07T12:36:34Z",
  "closed_at": "2017-10-03T22:17:07Z",
  "author_association": "NONE",
  "body": "Hi,\n\nI've been making use of [ReactShallowRenderer](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) for testing.  I really like it.  You mention in your docs that you would appreciate the React community's feedback on how it should evolve; here's a suggestion!\n\nThe one problem I have is when it comes to investigating failing tests.  \n\nFirst a little digression.  I'm just using vanilla Jasmine for my testing.  When it comes to deep objects not matching up I've been using a custom matcher I wrote called `toEqualAsObject`:\n\n```\nimport jsondiffpatch from 'jsondiffpatch';\n\nconst jdp = jsondiffpatch.create({\n  arrays: {\n    detectMove: true\n  }\n});\n\nconst customMatchers = {\n  toEqualAsObject(util, customEqualityTesters) {\n    return {\n      compare(actual, expected) {\n        const result = {\n          pass: util.equals(actual, expected, customEqualityTesters)\n        };\n\n        if (!result.pass) {\n          const delta = jdp.diff(actual, expected);\n          result.message = `The objects were different.\n\nExpected:\n\n${ JSON.stringify(expected, null, 2) }\n\nActual:\n${ JSON.stringify(actual, null, 2) }\n\nDifference:\n${ JSON.stringify(delta, null, 2) }\n\nDifference format info can be found here: https://github.com/benjamine/jsondiffpatch/blob/master/docs/deltas.md\n`;\n        }\n\n        return result;\n      }\n    };\n  }\n};\n\nexport default customMatchers;\n```\n\nThis matcher builds on [jsondiffpatch](https://www.npmjs.com/package/jsondiffpatch) to help you to isolate where the difference between 2 objects lie.  This is really useful for general testing but doesn't help particularly when it comes to JSX testing like this:  \n\n```\nresult = renderer.getRenderOutput();\nexpect(result.type).toBe('div');\nexpect(result.props.children).toEqual([\n  <span className=\"heading\">Title</span>,\n  <Subcomponent foo=\"bar\" />\n]);\n```\n\nThe reason is, a subtle difference in JSX can result in a fairly different objects being constructed.  Comparing them is not massively revealing and investigation can take some time.  I've a suggestion: It would be really handy if you could extract a JSX representation of an object from the renderer output. What I'm imagining is the ability to do something like this:\n\n```\nresult.props.children.asJSX();\n```\n\nWhich would would produce a string like this:\n\n```\n\"\n  <span className=\"heading\">THE WRONG TITLE</span>\n  <Subcomponent foo=\"bar\" />\n\"\n```\n\nThis would allow the writing of a custom matcher to be used when comparing JSX which would, upon failure, use the `asJSX()` to report a helpful error message.  I've spent more time than I would like digging through differences in object structure when investigating failing tests and think that a feature like this could be a real win.  \n\nWhat do you think?  \n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
