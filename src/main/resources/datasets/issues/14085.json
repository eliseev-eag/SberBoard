{
  "url": "https://api.github.com/repos/facebook/react/issues/14085",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14085/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14085/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14085/events",
  "html_url": "https://github.com/facebook/react/pull/14085",
  "id": 377020506,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjI4MDk3ODQy",
  "number": 14085,
  "title": "Add Debug Tools Package for Introspection of Hooks",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-11-03T03:57:22Z",
  "updated_at": "2019-08-09T15:40:27Z",
  "closed_at": "2018-11-05T18:03:00Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/14085",
    "html_url": "https://github.com/facebook/react/pull/14085",
    "diff_url": "https://github.com/facebook/react/pull/14085.diff",
    "patch_url": "https://github.com/facebook/react/pull/14085.patch"
  },
  "body": "Adds introspection of primitive and custom hooks in a single function component. If you feed it a standalone component it just gives you the initial/default values as the current value of each primitive. If you pass it a Fiber, it gives you the current values by reading the state from the Fiber.\r\n\r\nIdeally we want this in DevTools but it requires so much implementation details that I don't think we'll want to maintain this with multi-version support. We'll probably have to move to snapshot versions of this package in DevTools, or just snapshoting all of DevTools. It's probably useful debug info for others too. So I decided to just make this a new separate package.\r\n\r\nThe algorithm goes something like this:\r\n\r\n1) If running in Fiber mode, set up contexts of all parent providers and set the current hook to the first one of the Fiber. If running in standalone mode, skip this step.\r\n2) Compute the stack trace from the root of the inspection function.\r\n3) Set up a custom Dispatcher.\r\n4) Compute the stack traces to all primitive hooks, using the custom Dispatcher, when used outside a component.\r\n5) Execute the render function of the inspected component. This will call all hooks in order since they have to be unconditional. It's safe because the render function as no side-effects on its own.\r\n6) Inside each primitive hook in the custom Dispatcher, log each primitive, it's current stateful value, and the stack trace at the time it was invoked. T\r\nhis will give us a list of all primitive hooks and their stacks.\r\n7) For each primitive hook in the log, process the stack trace by removing any shared ancestors with the root of the inspection function. This ensures that the bottom of the stack is the render function. Also, for that particular primitive, remove the top of the stack that is shared with the stack when that primitive is called stand alone from a function component. This removes the call to the primitive itself. If the top most function call is called \"useState\" or whatever the primitive is called, remove that too since it's the React package wrapper around the dispatcher. The result should be a stack of only the custom hooks.\r\n8) Loop through the list of primitive hooks, use the stack of custom hooks to form a tree structure. Shared parent paths means that they go into the same subnode.\r\n9) ...\r\n10) Profit.\r\n\r\nCurrently custom hooks doesn't have a \"value\" associated with them so you can only introspect the current values of primitives. In a follow up, we can add a DEV only API to share more information from custom hooks with the devtools. E.g. `useInspect(value)`",
  "closed_by": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  }
}
