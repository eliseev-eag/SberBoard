{
  "url": "https://api.github.com/repos/facebook/react/issues/17024",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/17024/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/17024/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/17024/events",
  "html_url": "https://github.com/facebook/react/issues/17024",
  "id": 502972878,
  "node_id": "MDU6SXNzdWU1MDI5NzI4Nzg=",
  "number": 17024,
  "title": "External tasks read non committed/work-in-progress props outside render phase",
  "user": {
    "login": "yelouafi",
    "id": 5453835,
    "node_id": "MDQ6VXNlcjU0NTM4MzU=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/5453835?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/yelouafi",
    "html_url": "https://github.com/yelouafi",
    "followers_url": "https://api.github.com/users/yelouafi/followers",
    "following_url": "https://api.github.com/users/yelouafi/following{/other_user}",
    "gists_url": "https://api.github.com/users/yelouafi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/yelouafi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/yelouafi/subscriptions",
    "organizations_url": "https://api.github.com/users/yelouafi/orgs",
    "repos_url": "https://api.github.com/users/yelouafi/repos",
    "events_url": "https://api.github.com/users/yelouafi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/yelouafi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-10-05T14:51:29Z",
  "updated_at": "2019-10-05T14:52:04Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nLikely a bug\r\n\r\n**What is the current behavior?**\r\n\r\nIn Concurrent mode, React can split rendering over multiple frames, external tasks (DOM event handlers, intervals ...) perform side effects and should always access committed props (Right?).\r\n\r\nBut in the linked sandbox example, a scheduled task (using `setInterval`) accessing `this.props` reads actually the work-in-progress props.\r\n\r\nThe issue happens with class Components, in render phase React mutates the props of the class instance\r\n\r\nhttps://github.com/facebook/react/blob/4c5698400f04bbc6d0b4bd766b0993d0bcb37609/packages/react-reconciler/src/ReactFiberClassComponent.js#L1042-L1045\r\n\r\nalso the following code indicates that the committed and work-in-progress fibers share the same class instance\r\n\r\nhttps://github.com/facebook/react/blob/4c5698400f04bbc6d0b4bd766b0993d0bcb37609/packages/react-reconciler/src/ReactFiber.js#L413\r\n\r\nIf React assigns pending props to the class instance but after the render work is interrupted for some reason, we yield back to the browser and we're now outside the render phase, but since both the current and WIP fibers share the same mutable instance, `this.props` will continue to reflect the props of the WIP. If a scheduled task reads `this.props` at this moment it'll see the WIP props while it should rather see the committed props.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem**\r\n\r\nsee https://codesandbox.io/s/bold-cache-ytud2\r\n\r\nThe example simulates some expensive work to force React to split the render work and yield back to the browser. Meantime a class component schedules an interval to send `this.props` to the external world: in this case we imperatively update the content of an external DOM ('Parent.props: ' at the top of the screen) node with `this.props` to highlight the issue.\r\n\r\nSteps to reproduce the issue:\r\n \r\n- wait for the first render to complete \r\n\r\n- modify the `input` below `App` then click submit, this should propagate  new props to its child component `BusyChildren`\r\n\r\n- since `BusyChildren` does expensive work, it'll take some time until the new props are committed to the screen. But at the same time the interval task reads the pending props before the work is committed so the top external Dom node shows the work-in-progress props.\r\n\r\n**What is the expected behavior?**\r\n\r\nFor class components, `this.props` should return only the committed props outside the render phase.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThe sandbox uses the latest version 16.10.0\r\n\r\nThe behavior is correct when we start in Sync mode using `React.render`\r\n",
  "closed_by": null
}
