{
  "url": "https://api.github.com/repos/facebook/react/issues/6013",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/6013/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/6013/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/6013/events",
  "html_url": "https://github.com/facebook/react/issues/6013",
  "id": 132694699,
  "node_id": "MDU6SXNzdWUxMzI2OTQ2OTk=",
  "number": 6013,
  "title": "Closer control over reconciliation",
  "user": {
    "login": "ksmithbaylor",
    "id": 1709318,
    "node_id": "MDQ6VXNlcjE3MDkzMTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1709318?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ksmithbaylor",
    "html_url": "https://github.com/ksmithbaylor",
    "followers_url": "https://api.github.com/users/ksmithbaylor/followers",
    "following_url": "https://api.github.com/users/ksmithbaylor/following{/other_user}",
    "gists_url": "https://api.github.com/users/ksmithbaylor/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ksmithbaylor/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ksmithbaylor/subscriptions",
    "organizations_url": "https://api.github.com/users/ksmithbaylor/orgs",
    "repos_url": "https://api.github.com/users/ksmithbaylor/repos",
    "events_url": "https://api.github.com/users/ksmithbaylor/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ksmithbaylor/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2016-02-10T13:05:35Z",
  "updated_at": "2016-02-10T18:24:18Z",
  "closed_at": "2016-02-10T16:13:34Z",
  "author_association": "NONE",
  "body": "I am running into a use case that doesn't seem to be supported by React. I am using redux and react-redux in this example, but the problem could potentially extend to any component that takes children.\n\nI am trying to build a set of components that are independent of one another to the point that they can be included on the page in their own script tags. Each component will have a stateless component and a container that connects it to a redux store:\n\n```\nconst Widget = ({ data, update }) => (\n  <div>\n    <input type=\"text\" onChange={e => update(e.target.value)} />\n    <p>The data is {data}</p>\n  </div>\n);\n\nconst WidgetContainer = connect(\n  state => ({ data: state.data }),\n  dispatch => ({\n    update: val => dispatch({\n      type: 'UPDATE',\n      payload: val\n    })\n  })\n)(Widget);\n```\n\nIf there is a redux store present at a well-defined location, then I want to render the component this way:\n\n```\n<Provider store={window.MyApp.store}>\n  <WidgetContainer />\n</Provider>\n```\n\nIf the store is not present, I want it to render this way:\n\n```\n<Widget />\n```\n\nI've written some helper functions to do this in a generic way. Initially, I render the component by itself to the target DOM node. When the store becomes present, it fires an event that my helper functions are listening for, which will render the container component wrapped in a `Provider` to the same target DOM node. This works great if there is no DOM state.\n\nHowever, I want to allow the user to interact with my Widget before the store is present. For instance, in my `Widget` example, they should be able to enter some text in the `input` and that DOM state should persist when the `WidgetContainer` is rendered in its place.\n\nCurrently, this is not possible due to React's reconciliation algorithm. If two components have a different `type`, React will not attempt to reconcile their sub-trees (relevant code [here](https://github.com/facebook/react/blob/master/src/renderers/shared/reconciler/shouldUpdateReactComponent.js#L39)). This causes the existing `input` node to be thrown away, along with anything the user may have typed. There is no way for me to tell React that I want my two components to be reconciled because I have the foreknowledge that they will generate an identical DOM structure.\n\nWhat I want to know:\n1. Is there a workaround for this issue?\n2. If there isn't, is it a valid enough use case to consider adding a way to \"force\" React to reconcile two elements with different `type`s? One potential solution (which may be infeasible due to my unfamiliarity with the codebase) is to consider two elements with different `type`s but identical `key`s to be candidates for reconciliation.\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
