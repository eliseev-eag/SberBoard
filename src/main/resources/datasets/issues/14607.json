{
  "url": "https://api.github.com/repos/facebook/react/issues/14607",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14607/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14607/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14607/events",
  "html_url": "https://github.com/facebook/react/issues/14607",
  "id": 399751354,
  "node_id": "MDU6SXNzdWUzOTk3NTEzNTQ=",
  "number": 14607,
  "title": "Bug: in shallow renderer `this.state` in `shouldComponentUpdate` will be updated by `getDeriveStateFromProps`",
  "user": {
    "login": "chenesan",
    "id": 7620906,
    "node_id": "MDQ6VXNlcjc2MjA5MDY=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/7620906?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chenesan",
    "html_url": "https://github.com/chenesan",
    "followers_url": "https://api.github.com/users/chenesan/followers",
    "following_url": "https://api.github.com/users/chenesan/following{/other_user}",
    "gists_url": "https://api.github.com/users/chenesan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chenesan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chenesan/subscriptions",
    "organizations_url": "https://api.github.com/users/chenesan/orgs",
    "repos_url": "https://api.github.com/users/chenesan/repos",
    "events_url": "https://api.github.com/users/chenesan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chenesan/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-01-16T10:50:35Z",
  "updated_at": "2019-01-18T02:31:15Z",
  "closed_at": "2019-01-18T02:31:15Z",
  "author_association": "CONTRIBUTOR",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\n\r\nIn `react-test-renderer/shallow`, the shallow renderer will set instance state in `getDerviedStateFromProps` so the `this.state` and `nextState` will be the same in `shouldComponentUpdate`, which is different with the behavior of real rendering.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\ngiven below class component:\r\n\r\n```js\r\n\r\nclass SimpleComponent extends React.Component {\r\n      constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          value: props.value,\r\n        };\r\n      }\r\n\r\n      static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.value === prevState.value) {\r\n          return null;\r\n        }\r\n        return { value: nextProps.value };\r\n      }\r\n\r\n      shouldComponentUpdate(nextProps, nextState) {\r\n        console.log('shouldUpdate:', nextState.value !== this.state.value)\r\n        return nextState.value !== this.state.value;\r\n      }\r\n\r\n      render() {\r\n        return <div className={this.state.value} />;\r\n      }\r\n    }\r\n\r\n```\r\n\r\nrender with ReactDOM, the `shouldComponentUpdate` will return true since `this.state` will be the old value `initial`:\r\n\r\n```js\r\nconst divRef = React.createRef()\r\nconst div = document.createElement('div')\r\n\r\n// in real test code we have to add a `ref={divRef}` in the `div` of SimpleComponent\r\n\r\nconst initialResult = ReactDOM.render(<SimpleComponent value=\"initial\" />, div);\r\nexpect(divRef.current.classList[0]).toEqual(\"initial\");\r\n\r\n// will output `shouldUpdate: true`\r\nconst updatedResult = ReactDOM.render(<SimpleComponent value=\"updated\" />, div);\r\n// so the class name changes\r\nexpect(divRef.current.classList[0]).toEqual(\"updated\");\r\n```\r\n\r\nIn shallow renderer, the behavior is different:\r\n\r\n```js\r\nconst shallowRenderer = createRenderer();\r\nconst initialResult = shallowRenderer.render(<SimpleComponent value=\"initial\" />);\r\nexpect(initialResult).toEqual(<div>value:initial</div>);\r\n// will not update, since in `shouldComponentUpdate` the `this.state` has been updated\r\n// after `getDeriveStateFromProps` and as same as passed `nextState`\r\nconst updatedResult = shallowRenderer.render(<SimpleComponent value=\"updated\" />);\r\n// the following assert will fail\r\nexpect(updatedResult).toEqual(<div>value:updated</div>);\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nShallowRenderer should not set the instance state in getDeriveStateFromProps, or in the `shouldComponentUpdate` we have no way to compare it.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI have tested this in master branch and 16.3, both not work.\r\n\r\nBy the way this problem is related to airbnb/enzyme#1970 . If it's recoginzed as a bug I can provide a PR in next several days.\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
