{
  "url": "https://api.github.com/repos/facebook/react/issues/16130",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16130/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16130/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16130/events",
  "html_url": "https://github.com/facebook/react/issues/16130",
  "id": 467815884,
  "node_id": "MDU6SXNzdWU0Njc4MTU4ODQ=",
  "number": 16130,
  "title": "Double render for failed component with ErrorBoundary",
  "user": {
    "login": "Freak613",
    "id": 9072673,
    "node_id": "MDQ6VXNlcjkwNzI2NzM=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/9072673?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Freak613",
    "html_url": "https://github.com/Freak613",
    "followers_url": "https://api.github.com/users/Freak613/followers",
    "following_url": "https://api.github.com/users/Freak613/following{/other_user}",
    "gists_url": "https://api.github.com/users/Freak613/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Freak613/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Freak613/subscriptions",
    "organizations_url": "https://api.github.com/users/Freak613/orgs",
    "repos_url": "https://api.github.com/users/Freak613/repos",
    "events_url": "https://api.github.com/users/Freak613/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Freak613/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2019-07-14T09:37:45Z",
  "updated_at": "2019-08-15T13:19:07Z",
  "closed_at": "2019-08-15T13:19:07Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen using ErrorBoundary, component has been rendered twice, even after throwing error during the first render.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\nHaving simple example:\r\n- Straightforward ErrorBoundary copied from docs;\r\n- Functional component Boom, that throws error on first render;\r\n\r\n```javascript\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: undefined };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    console.log(\"getDerivedStateFromError\", { error });\r\n    return { error };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // You can also log the error to an error reporting service\r\n    console.log(\"componentDidCatch\", { error, info });\r\n    // this.setState({ error });\r\n  }\r\n\r\n  render() {\r\n    console.log(\"ErrorBoundary.render\", this.state.error);\r\n\r\n    if (this.state.error) {\r\n      return \"Oops\";\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nlet boomCounter = 0;\r\nconst Boom = () => {\r\n  console.log(\"Boom\", ++boomCounter);\r\n  throw new Error(\"Boom\");\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary>\r\n        <Boom />\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nBoom component has been rendered twice, even after throwing error during the first render.\r\nTo make it more clear, I'm logging global counter, increasing with each render :\r\nhttps://codesandbox.io/s/agitated-lumiere-6zd3h\r\n\r\n**What is the expected behavior?**\r\nFailed component shouldn't be rendered after throwing an error.\r\nInternals of the component can produce side-effects or whatever else, that can be worsen if done twice.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6\r\nBrowsers: Safari, Chrome.\r\n\r\n\r\nI have 2 assumptions why is that (I haven't read React core):\r\n- To perform graceful shutdown of useEffect/componentWillUnmount and stuff like that.\r\n- This happens because Boom component provided as external dependency, being rendered in App tree alongside with ErrorBoundary itself. And React perform full render of the App tree, despite ErrorBoundary could have something else to show.\r\n\r\nThis case is very confusing.\r\nFeel free to close the issue if this behavior is expected, though it should be noted in the documentation.\r\nIdeas of how to get desired behavior are welcome.\r\nI haven't found open problem with this exact behavior described, that's why I created a new one.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
