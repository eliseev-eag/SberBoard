{
  "url": "https://api.github.com/repos/facebook/react/issues/3452",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/3452/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/3452/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/3452/events",
  "html_url": "https://github.com/facebook/react/issues/3452",
  "id": 62756775,
  "node_id": "MDU6SXNzdWU2Mjc1Njc3NQ==",
  "number": 3452,
  "title": "Trying to check whether a button click event calls a function in JSX",
  "user": {
    "login": "hai2anand",
    "id": 11542961,
    "node_id": "MDQ6VXNlcjExNTQyOTYx",
    "avatar_url": "https://avatars0.githubusercontent.com/u/11542961?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hai2anand",
    "html_url": "https://github.com/hai2anand",
    "followers_url": "https://api.github.com/users/hai2anand/followers",
    "following_url": "https://api.github.com/users/hai2anand/following{/other_user}",
    "gists_url": "https://api.github.com/users/hai2anand/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hai2anand/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hai2anand/subscriptions",
    "organizations_url": "https://api.github.com/users/hai2anand/orgs",
    "repos_url": "https://api.github.com/users/hai2anand/repos",
    "events_url": "https://api.github.com/users/hai2anand/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hai2anand/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2015-03-18T17:52:24Z",
  "updated_at": "2015-10-15T06:35:03Z",
  "closed_at": "2015-10-15T06:35:03Z",
  "author_association": "NONE",
  "body": "```\nError Result of - Expected: 0 toBe: 1\n        at new jasmine.ExpectationResult (\\node_modules\\jest-cli\\vendor\\jasmine\\jasmine-1.3.0.js:115:32)\n        at null.toBe (node_modules\\jest-cli\\vendor\\jasmine\\jasmine-1.3.0.js:1236:29)\n        at Spec.<anonymous> (\\__tests__\\Login-Test.js:33:65)\n        at jasmine.Block.execute (node_modules\\jest-cli\\vendor\\jasmine\\jasmine-1.3.0.js:1065:17)\n        at jasmine.Queue.next_ (I\\node_modules\\jest-cli\\vendor\\jasmine\\jasmine-1.3.0.js:2098:31)\n        at null._onTimeout (node_modules\\jest-cli\\vendor\\jasmine\\jasmine-1.3.0.js:2088:18)\n        at Timer.listOnTimeout [as ontimeout] (timers.js:112:15)\n```\n\n---\n\n``` js\n// Unit Test case for Login.jsx\njest.dontMock('../src/js/pages/Login.jsx');\n\ndescribe('login', function() {\n    it('should invoke the btnLoginClick click event.', function() {     \n        var React = require('react/addons');\n        var LoginControl = require('../src/js/pages/Login.jsx');\n\n        var TestUtils = React.addons.TestUtils;\n\n        // Render a checkbox with label in the document\n        var LoginUtil = TestUtils.renderIntoDocument(<LoginControl/>);  \n\n\n       LoginControl.handleLoginClick = jest.genMockFunction();\n\n        var input = TestUtils.findRenderedDOMComponentWithTag(\n            LoginUtil, 'button');\n        TestUtils.Simulate.click(input );\n        expect(LoginControl.handleLoginClick.mock.calls.length).toBe(1);\n\n    });\n});\n```\n\n---\n\nLogin.jsx\n\n``` js\n/** @jsx React.DOM */\n'use strict';\nvar React = require('react');\nvar FluxibleMixin = require('fluxible').Mixin;\n\nvar LoginStore = require('../stores/LoginStore.js');\nvar LoginActions = require('../actions/LoginActions.js');\n\nvar Login = React.createClass({\n    mixins: [FluxibleMixin],\n    statics: {\n        storeListeners: [LoginStore]\n    },\n\n    getStateFromStores: function () {\n        return this.getStore(LoginStore).getUser();\n\n    },\n\n    getInitialState: function () {\n      return {\n          isAuthenticated:false\n      };\n    },\n\n    onChange: function () {\n      this.setState(this.getStateFromStores());\n    },\n\n    handleLoginClick: function(event) {\n        this.state.isAuthenticated=true;\n        this.executeAction(LoginActions.loginUser, {\n          userName: this.refs.userNameInput.getDOMNode().value,\n          password: this.refs.passwordInput.getDOMNode().value\n\n        });\n        event.preventDefault();\n    },\n\n    render: function() {\n      return (\n          <div className=\"container\">\n              <form className=\"form-signin\">\n                  <a id=\"tip\" href=\"#\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Hover!\">Hover me</a>\n                  <h2 className=\"form-signin-heading\">Please sign in</h2>\n                  <label>{ this.state.loginMessage }</label>\n                  <label htmlFor=\"inputEmail\" className=\"sr-only\">No address</label>\n                  <input ref=\"userNameInput\" type=\"email\" defaultValue={this.state.userName} id=\"inputEmail\" className=\"form-control\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Please enter a valid email address!\" placeholder=\"Email Address\" required autofocus />\n                  <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\n                  <input ref=\"passwordInput\" type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required />\n                  <div className=\"checkbox\">\n                      <label>\n                          <input type=\"checkbox\" value=\"remember-me\" /> Remember me\n                      </label>\n                  </div>\n                  <button ref=\"btnSubmit\" className=\"btn btn-lg btn-primary btn-block\" onClick={this.handleLoginClick}>Sign in</button>\n              </form>\n            </div>\n\n      );\n    }\n});\n\nmodule.exports = Login;\n```\n\n---\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
