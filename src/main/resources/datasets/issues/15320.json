{
  "url": "https://api.github.com/repos/facebook/react/issues/15320",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15320/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15320/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15320/events",
  "html_url": "https://github.com/facebook/react/issues/15320",
  "id": 429352863,
  "node_id": "MDU6SXNzdWU0MjkzNTI4NjM=",
  "number": 15320,
  "title": "Compound components parent initialization.",
  "user": {
    "login": "pumanitro",
    "id": 7398214,
    "node_id": "MDQ6VXNlcjczOTgyMTQ=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/7398214?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pumanitro",
    "html_url": "https://github.com/pumanitro",
    "followers_url": "https://api.github.com/users/pumanitro/followers",
    "following_url": "https://api.github.com/users/pumanitro/following{/other_user}",
    "gists_url": "https://api.github.com/users/pumanitro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pumanitro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pumanitro/subscriptions",
    "organizations_url": "https://api.github.com/users/pumanitro/orgs",
    "repos_url": "https://api.github.com/users/pumanitro/repos",
    "events_url": "https://api.github.com/users/pumanitro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pumanitro/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-04-04T15:45:04Z",
  "updated_at": "2019-04-10T17:10:34Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**Problem**\r\nThere is no easy way of initializing Parent (not exactly direct) by its children (not exactly direct).\r\n\r\n**Example**\r\nI would like to create Compound Component like;\r\n\r\n```\r\n<Parent>\r\n  <Parent.Child value=\"child1\" label=\"label1\" />\r\n  <Parent.Child value=\"child2\" label=\"label2\" />\r\n</Parent>\r\n```\r\nand spread information through `<Parent.Child  />` component directly to specified `<Parent />` **before they rendering**.\r\n\r\n**Why I need this**\r\nWith such pattern I can:\r\n- edit styles of **elements** of the given compound component easily e.g. `<Parent.Child className={...} />` \r\n- add custom children to the given parent of the compound components or wrap its children - they don't need to be direct children of the parent component.  E.g.\r\n\r\n```\r\n<Parent>\r\n  <StyledWrapper>\r\n    <Parent.Child value=\"child1\" label=\"label1\" />\r\n  </StyledWrapper>\r\n  <Parent.Child value=\"child2\" label=\"label2\" />\r\n  <SomeExampleIcon />\r\n</Parent>\r\n```\r\n\r\n**3 solutions I've tried**\r\n1. Context Api\r\nI can initialize `<Parent/>` component with Context API usage by its children but:\r\n- they need to be rendered first, so I can't get information about them in the `<Parent />` component at the first render.\r\n- unwanted, one, additional whole compound component rerender (caused by context change) - \"blink effect\"\r\nE.g.\r\nI would like to display in `<Parent />` component amount of its children (**not exactly direct**).\r\nFirstly Parent display nothing because its children have not been rendered yet. Then I initialize Parent by using context API, Parent rerenders, correct value is displayed by Parent (initialization effect visible, by small blink)\r\n\r\n2. Mutation\r\nYes, I wanted to use mutation to prevent blink effect and unnecessary component rerender, but:\r\n- it will work only for callbacks usage, not If Parent needs to know about its children before their rendering.\r\nE.g.\r\nParent renders with context API, children renders -> mutates context object, Parent doesn't rerender and can access the actual value in some callback, but not before children render.\r\n\r\n3.  Deep Children Traverse\r\nI wrote something like this:\r\n```\r\nexport const deeplyTraverseChildren = (children, callback) => {\r\n  React.Children.forEach(children, child => {\r\n    callback(child);\r\n    if (child.props.children) {\r\n      deeplyTraverseChildren(child.props.children, callback);\r\n    }\r\n  });\r\n};\r\n```\r\nIt let me use callback to play with deeply traversed children of given Parent component.\r\nWith that, I can Initialize some information about their children before they will be rendered.\r\nThen I can spread data as I want, but:\r\n- there can be a situation where Children component ends up with not used properties by its own, but they are used only by it parent (not exactly direct)\r\n\r\nMaybe you have some better ideas? If yes, please share them.\r\n\r\nI know it breaks in some cases of UP -> Down data flow, but who said its a golden rule for everything. Look for pros that we can achieve with this functionality. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.4\r\n",
  "closed_by": null
}
