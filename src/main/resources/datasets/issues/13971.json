{
  "url": "https://api.github.com/repos/facebook/react/issues/13971",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13971/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13971/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13971/events",
  "html_url": "https://github.com/facebook/react/issues/13971",
  "id": 374086884,
  "node_id": "MDU6SXNzdWUzNzQwODY4ODQ=",
  "number": 13971,
  "title": "PROPOSAL/Convo Starter: new 'affect' API to control how data gets passed from data containing components to presentiation children",
  "user": {
    "login": "gregorskii",
    "id": 1130448,
    "node_id": "MDQ6VXNlcjExMzA0NDg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1130448?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gregorskii",
    "html_url": "https://github.com/gregorskii",
    "followers_url": "https://api.github.com/users/gregorskii/followers",
    "following_url": "https://api.github.com/users/gregorskii/following{/other_user}",
    "gists_url": "https://api.github.com/users/gregorskii/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gregorskii/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gregorskii/subscriptions",
    "organizations_url": "https://api.github.com/users/gregorskii/orgs",
    "repos_url": "https://api.github.com/users/gregorskii/repos",
    "events_url": "https://api.github.com/users/gregorskii/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gregorskii/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-10-25T19:00:24Z",
  "updated_at": "2018-10-25T23:38:07Z",
  "closed_at": "2018-10-25T20:50:32Z",
  "author_association": "NONE",
  "body": "*Feature Request*\r\n\r\nThe new [Hooks API](https://reactjs.org/docs/hooks-intro.html)  is awesome. It had me thinking..\r\n\r\nOne of the issues I have had with React is with render prop based components that pass data to their children. Often I want to be able to control when props are \"effectively complete\" from a container before telling a child component to render usable data. Until the parent component determines it is complete the child component would remain in a loading state. This loading state can be set by default and updated in its own hooks / CDU / CDM as usual.\r\n\r\nWhat I would propose as a possible solution to this is a modification to the render props pattern where a new API could be put in place on components to conditionally restrict them from passing props down to the child tree. This API would be similar to the new effect API but on the downstream updates. It could be part of the hooks API but have the methods be called \"affects\".\r\n\r\nThis API could have a similar footprint where \"affects\" could be skipped like \"effects\" can:\r\n\r\nhttps://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects\r\n\r\nA second argument to the \"affect\" function could be an array of keys that determine if the props should be passed down through the render props to other components.\r\n\r\nWDYT? Is this completely against the nature of how React is expected to work? I understand the pattern is that components can control the props / state / UI updates they make from the data coming INTO them, but I understand that it could be an anti-pattern to stop the components from passing data down to their children. Understandably you could control this via using setState and only passing state down to the children, but sometimes you want to both use the internal state to manage the logic of the component and also have other logic controlling prop updates to children.\r\n\r\nThe use cases for this would be mainly:\r\n\r\n* Data Containers\r\n* API requests\r\n* Conditional API requests\r\n* Combining multiple containers for code isolation into a presentational component\r\n\r\nI understand that each of these bullet points can be solved using various different means, but the new hooks API is so well thought out, understandable, and provides a clear pattern for controlling data INTO components, it would be beneficial to have a similar pattern on data leaving components (or context providers etc).\r\n\r\nThanks",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
