{
  "url": "https://api.github.com/repos/facebook/react/issues/16455",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16455/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16455/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16455/events",
  "html_url": "https://github.com/facebook/react/pull/16455",
  "id": 482360605,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MzA4NjQ5NjEw",
  "number": 16455,
  "title": "[ESLint] Forbid top-level use*() calls",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-08-19T14:54:18Z",
  "updated_at": "2019-08-21T18:04:06Z",
  "closed_at": "2019-08-19T18:54:07Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/16455",
    "html_url": "https://github.com/facebook/react/pull/16455",
    "diff_url": "https://github.com/facebook/react/pull/16455.diff",
    "patch_url": "https://github.com/facebook/react/pull/16455.patch"
  },
  "body": "In the initial release of `eslint-plugin-react-hooks/rules-of-hooks`, we forbid this:\r\n\r\n```js\r\nfunction foo() {\r\n  useState(); // BAD: calling a Hook from a non-Hook\r\n}\r\n```\r\n\r\nBut we didn't forbid this:\r\n\r\n```js\r\n// top-level code\r\n\r\nuseState(); // ALSO BAD: calling a Hook from top level\r\n```\r\n\r\nThis PR forbids it in the lint rule.\r\n\r\n### Why did it work before?\r\n\r\nWe didn't ban it at the time for three reasons:\r\n\r\n1. We didn't know how Hooks would be received by the community. Taking the whole `use*` prefix seemed dicey and we didn't want to push the convention harder than absolutely necessary.\r\n2. It is a runtime crash anyway, so you find out about this immediately.\r\n3. There's a `history` library whose 2.x versions had an API like this:\r\n\r\n```js\r\nconst {createHistory, useBasename} = require('history-2.1.2');\r\nconst browserHistory = useBasename(createHistory)({\r\n  basename: '/',\r\n});\r\n```\r\n\r\nSo banning this pattern would create a false positive for it.\r\n\r\n### Why ban it now?\r\n\r\nIf your environment uses \"inline requires\" (opt-in on React Native), you might not get a crash at all. Instead, **the top level initialization of a module may run as a result of some component's render**, and so Hooks would accidentally \"belong\" to the parent. That's confusing. While \"inline requires\" aren't very common on the web, they're a powerful optimization, so it's plausible they will get used more often with time as build systems add support for them.\r\n\r\nEven regardless of that risk, we can confidently say Hooks have been a successful rollout now. So whether the bugs themselves are a problem or not, **the `use` convention effectively already strongly implies it's a Hook**. From that perspective, `use*()` at top level is just confusing to look at.\r\n\r\n### But I'm not using a Hook!\r\n\r\nThere are some older versions of `history` and `react-router` that had `use`-prefixed APIs for things that aren't Hooks. **If you see a false positive, please feel free to suppress it:**\r\n\r\n```js\r\n// eslint-disable-next-line react-hooks/rules-of-hooks\r\nconst browserHistory = useBasename(createHistory)({\r\n  basename: '/foo'\r\n});\r\n```\r\n\r\nThis is not ideal, but this isn't an issue in recent versions of these libraries â€” and also most apps only have at most a single file with this issue.\r\n\r\nIf you for some reason can't add suppressions, you may alternatively:\r\n\r\n* Rename it during import like `import { useBasename as withBasename } from 'history'`\r\n* Or use `import * as History from 'history'` and `History.useBasename()`\r\n\r\nNote this isn't just to \"appease the linter\". People expect `use` prefix to only be used by Hooks now, so it's good to push the ecosystem towards consistent naming.\r\n\r\n### What about `MyLibrary.useFoo()`?\r\n\r\nWe warn about invalid use of `use*()` and `React.use*()`, but not `MyLibrary.use*()`. This is because initially we saw too many false positives from modules like `MyStore.useNewAnalytics()`.\r\n\r\nThe new top-level error respects the same rule. For example, it would warn for `useBasename()`, but not for `History.useBasename()`. So that's another escape hatch if you want to suppress it.\r\n\r\n```js\r\n// Doesn't warn\r\nconst browserHistory = History.useBasename(History.createHistory)({\r\n  basename: '/foo'\r\n});\r\n```\r\n\r\nIn the future, we might consider making it stricter, and banning invalid calls to `MyLibrary.use*()` too. But it's less common in general because the convention is to import Hooks directly without a namespace. It's also much more commonly encountered in open source, like `app.use()` from Express, or `jest.useFakeTimers()`. So maybe it's not worth it.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
