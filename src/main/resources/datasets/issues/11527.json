{
  "url": "https://api.github.com/repos/facebook/react/issues/11527",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11527/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11527/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11527/events",
  "html_url": "https://github.com/facebook/react/issues/11527",
  "id": 273131299,
  "node_id": "MDU6SXNzdWUyNzMxMzEyOTk=",
  "number": 11527,
  "title": "RFClarification: why is `setState` asynchronous?",
  "user": {
    "login": "mweststrate",
    "id": 1820292,
    "node_id": "MDQ6VXNlcjE4MjAyOTI=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1820292?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mweststrate",
    "html_url": "https://github.com/mweststrate",
    "followers_url": "https://api.github.com/users/mweststrate/followers",
    "following_url": "https://api.github.com/users/mweststrate/following{/other_user}",
    "gists_url": "https://api.github.com/users/mweststrate/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mweststrate/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mweststrate/subscriptions",
    "organizations_url": "https://api.github.com/users/mweststrate/orgs",
    "repos_url": "https://api.github.com/users/mweststrate/repos",
    "events_url": "https://api.github.com/users/mweststrate/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mweststrate/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "gaearon",
      "id": 810438,
      "node_id": "MDQ6VXNlcjgxMDQzOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gaearon",
      "html_url": "https://github.com/gaearon",
      "followers_url": "https://api.github.com/users/gaearon/followers",
      "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
      "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
      "organizations_url": "https://api.github.com/users/gaearon/orgs",
      "repos_url": "https://api.github.com/users/gaearon/repos",
      "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gaearon/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 31,
  "created_at": "2017-11-11T08:59:25Z",
  "updated_at": "2018-11-12T08:07:03Z",
  "closed_at": "2018-01-25T19:48:28Z",
  "author_association": "NONE",
  "body": "For quite a while I've tried to understood why `setState` is asynchronous. And failing to find an answer to it in the past, I came to the conclusion that it was for historical reasons and probably hard to change now. However @gaearon indicated there is a clear reason, so I am curious to find out :)\r\n\r\nAnyway, here are the reasons I often hear, but I think they can't be everything as they are too easy to counter\r\n\r\n## Async setState is required for async rendering\r\n\r\nMany initially think it is because of render efficiency. But I don't think that is the reason behind this behavior, because keeping setState sync with async rendering sounds trivial to me, something along the lines of:\r\n\r\n```javascript\r\nComponent.prototype.setState = (nextState) => {\r\n  this.state = nextState\r\n  if (!this.renderScheduled)\r\n     setImmediate(this.forceUpdate)\r\n}\r\n```\r\n\r\nIn fact, for example `mobx-react` allows synchronous assignments to observables and still respect the async nature of rendering\r\n\r\n## Async setState is needed to know which state was _rendered_\r\n\r\nThe other argument I hear sometimes is that you want to reason about the state that was _rendered_, not the state that was _requested_. But I'm not sure this principle has much merit either. Conceptually it feels strange to me. Rendering is a side effect, state is about facts. Today, I am 32 years old, and next year I will turn 33, regardless whether the owning component manages to re-render this year or not :). \r\n\r\nTo draw a (probably not to good) parallel: If you wouldn't be able to _read_ your last version of a self written word document until you printed it, that would be pretty awkward. I don't think for example game engines give you feedback on what state of the game was exactly rendered and which frames were dropped either.\r\n\r\nAn interesting observations: In 2 years `mobx-react` nobody ever asked me the question: How do I know my observables are rendered? This question just seems not relevant very often.\r\n\r\nI did encounter a few cases where knowing which data was rendered was relevant. The case I remember was where I needed to know the pixel dimensions of some data for layout purposes. But that was elegantly solved by using `didComponentUpdate` and didn't really rely on `setState` being async either. These cases seem so rare that it hardly justify to design the api primarily around them. If it can be done *somehow*, it suffices I think\r\n\r\n---\r\n\r\nI have no doubt that the React team is aware of the confusion the async nature of `setState` often introduces, so I suspect there is another very good reason for the current semantics. Tell me more :)",
  "closed_by": {
    "login": "mweststrate",
    "id": 1820292,
    "node_id": "MDQ6VXNlcjE4MjAyOTI=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1820292?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mweststrate",
    "html_url": "https://github.com/mweststrate",
    "followers_url": "https://api.github.com/users/mweststrate/followers",
    "following_url": "https://api.github.com/users/mweststrate/following{/other_user}",
    "gists_url": "https://api.github.com/users/mweststrate/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mweststrate/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mweststrate/subscriptions",
    "organizations_url": "https://api.github.com/users/mweststrate/orgs",
    "repos_url": "https://api.github.com/users/mweststrate/repos",
    "events_url": "https://api.github.com/users/mweststrate/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mweststrate/received_events",
    "type": "User",
    "site_admin": false
  }
}
