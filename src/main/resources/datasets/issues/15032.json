{
  "url": "https://api.github.com/repos/facebook/react/issues/15032",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15032/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15032/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15032/events",
  "html_url": "https://github.com/facebook/react/issues/15032",
  "id": 417653986,
  "node_id": "MDU6SXNzdWU0MTc2NTM5ODY=",
  "number": 15032,
  "title": "Proposal : Promise render hooks",
  "user": {
    "login": "rozaxe",
    "id": 3525604,
    "node_id": "MDQ6VXNlcjM1MjU2MDQ=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/3525604?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rozaxe",
    "html_url": "https://github.com/rozaxe",
    "followers_url": "https://api.github.com/users/rozaxe/followers",
    "following_url": "https://api.github.com/users/rozaxe/following{/other_user}",
    "gists_url": "https://api.github.com/users/rozaxe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rozaxe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rozaxe/subscriptions",
    "organizations_url": "https://api.github.com/users/rozaxe/orgs",
    "repos_url": "https://api.github.com/users/rozaxe/repos",
    "events_url": "https://api.github.com/users/rozaxe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rozaxe/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-03-06T07:06:35Z",
  "updated_at": "2019-07-22T06:12:33Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "I was playing with flutter and I found the widget [FutureBuilder](https://docs.flutter.io/flutter/widgets/FutureBuilder-class.html) pretty useful.\r\n\r\nThis type of component enables to render itself based on the status of a promise.\r\n\r\nTypically, this could be used to display a \"loading\" state while the promise is resolved and then, display the actual component with the freshly resolved value.\r\n\r\nExample :\r\n\r\n```js\r\n\r\nfunction Hello() {\r\n  \r\n  const snapshot = usePromise(fetchData())\r\n  \r\n  let text = 'Loading'\r\n  \r\n  if (snapshot.hasValue) {\r\n    text = snapshot.value\r\n  }\r\n  \r\n  return <span>{text}</span>\r\n}\r\n```\r\n\r\nI made an example on [CodeSandbox](https://codesandbox.io/s/ykzv1jv88j). First, a 'loading' text is displayed and after a second (promise resolved), display 'hello'.\r\n\r\nFinally, this is just a wrapper around a `useState` but I found it pretty convenient (less boilercode, more expressive).\r\n\r\nDo you think this could be a nice addition to the hooks ?\r\n",
  "closed_by": null
}
