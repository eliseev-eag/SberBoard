{
  "url": "https://api.github.com/repos/facebook/react/issues/2922",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/2922/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/2922/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/2922/events",
  "html_url": "https://github.com/facebook/react/issues/2922",
  "id": 55255311,
  "node_id": "MDU6SXNzdWU1NTI1NTMxMQ==",
  "number": 2922,
  "title": "Will componentDidUpdate fire earlier in this case?",
  "user": {
    "login": "byelims",
    "id": 4300271,
    "node_id": "MDQ6VXNlcjQzMDAyNzE=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4300271?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/byelims",
    "html_url": "https://github.com/byelims",
    "followers_url": "https://api.github.com/users/byelims/followers",
    "following_url": "https://api.github.com/users/byelims/following{/other_user}",
    "gists_url": "https://api.github.com/users/byelims/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/byelims/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/byelims/subscriptions",
    "organizations_url": "https://api.github.com/users/byelims/orgs",
    "repos_url": "https://api.github.com/users/byelims/repos",
    "events_url": "https://api.github.com/users/byelims/events{/privacy}",
    "received_events_url": "https://api.github.com/users/byelims/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2015-01-23T08:09:53Z",
  "updated_at": "2015-02-27T00:01:36Z",
  "closed_at": "2015-02-27T00:01:36Z",
  "author_association": "NONE",
  "body": "I know it fires after DOM is updated. But I have met a problem.\n\nI'm working on a piece of code like following.\n\nHere is the component.\n\n``` js\nfunction getState() {\n  return {\n    layers: Store.getLayers()\n  };\n}\n\nvar Component = React.createClass({\n\n  getInitialState: function() {\n    return getState();\n  },\n\n  componentDidMount: function() {\n    Store.addChangeListener(this._onChange);\n    this.updateLayerNode();\n  },\n\n  componentDidUpdate: function() {\n    this.updateLayerNode();\n  },\n\n  componentWillUnmount: function() {\n    Store.removeChangeListener(this._onChange);\n  },\n\n  render: function() {\n    return (\n      <div>\n        {this.state.layers.map(function(layer) {\n          return (\n            <canvas key={layer.id} ref={layer.id}></canvas>\n          );\n        })}\n      </div>\n    );\n  },\n\n  updateLayerNode: function() {\n    var self = this;\n\n    this.state.layers.forEach(function(layer) {\n      layer.node = self.refs[layer.id].getDOMNode();\n      layer.context = layer.node.getContext('2d');\n    });\n  },\n\n  _onChange: function() {\n    this.setState(getState());\n  }\n}\n```\n\nHere is the store.\n\n``` js\nvar CHANGE_EVENT = 'change';\n\nvar _layers = [];\n\nfunction _createLayer(id) {\n  var layer = {\n    id: id,\n    node: null,\n    context: null\n  };\n  _layers.push(layer);\n}\n\nvar Store = assign({}, EventEmitter.prototype, {\n\n  getLayers: function() {\n    return _layers;\n  },\n\n  getLayer: function(id) {\n    for (var i = 0; i < _layers.length; i++) {\n      if (_layers[i].id === id) {\n        return _layers[i];\n      }\n    }\n  },\n\n  emitChange: function() {\n    this.emit(CHANGE_EVENT);\n  },\n\n  addChangeListener: function(callback) {\n    this.on(CHANGE_EVENT, callback);\n  },\n\n  removeChangeListener: function(callback) {\n    this.removeListener(CHANGE_EVENT, callback);\n  }\n});\n```\n\nA layer means a `<canvas>` node. I need to create a layer somewhere else, e.g. in a click handler, and use the `CanvasRenderingContext2D` to draw something.\n\n``` js\nActions.createLayer(id);\nvar layer = Store.getLayer(id);\nlayer.context.fillRect(0, 0, 100, 50);\n```\n\n~~I have wrote a demo, it works well.~~ But when I work on my project, `getCanvasContext` will be invoked before `componentDidUpdate`. I'm very confused about the execution order.\n\n**Update**: At first, I just create layer and draw after the component is rendered, it works.\n\n``` js\nReact.render(\n    (\n      <div>\n        <Component />\n      </div>\n    ),\n    document.getElementById('demo')\n);\nActions.createLayer(id);\nvar layer = Store.getLayer(id);\nlayer.context.fillRect(0, 0, 100, 50);\n```\n\nBut after I move that into a click handler, it doesn't work anymore.\n\n``` js\nfunction onClick() {\n  Actions.createLayer(id);\n  var layer = Store.getLayer(id);\n  layer.context.fillRect(0, 0, 100, 50);\n}\n\nReact.render(\n    (\n      <div>\n        <Component />\n        <button onClick={onClick}>Draw</button>\n      </div>\n    ),\n    document.getElementById('demo')\n);\n```\n\nAre there any ideas to solve my problem?\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
