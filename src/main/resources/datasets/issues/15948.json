{
  "url": "https://api.github.com/repos/facebook/react/issues/15948",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15948/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15948/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15948/events",
  "html_url": "https://github.com/facebook/react/issues/15948",
  "id": 459100994,
  "node_id": "MDU6SXNzdWU0NTkxMDA5OTQ=",
  "number": 15948,
  "title": "Problem with refreshing initial state when props change",
  "user": {
    "login": "AWielguszewski",
    "id": 20601101,
    "node_id": "MDQ6VXNlcjIwNjAxMTAx",
    "avatar_url": "https://avatars2.githubusercontent.com/u/20601101?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/AWielguszewski",
    "html_url": "https://github.com/AWielguszewski",
    "followers_url": "https://api.github.com/users/AWielguszewski/followers",
    "following_url": "https://api.github.com/users/AWielguszewski/following{/other_user}",
    "gists_url": "https://api.github.com/users/AWielguszewski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/AWielguszewski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/AWielguszewski/subscriptions",
    "organizations_url": "https://api.github.com/users/AWielguszewski/orgs",
    "repos_url": "https://api.github.com/users/AWielguszewski/repos",
    "events_url": "https://api.github.com/users/AWielguszewski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/AWielguszewski/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-06-21T09:23:12Z",
  "updated_at": "2019-06-23T18:53:24Z",
  "closed_at": "2019-06-23T18:48:40Z",
  "author_association": "NONE",
  "body": "**My custom useReducer code**\r\n```javascript\r\nimport { useReducer } from 'react'\r\n\r\ninterface ReturnType extends StateType {\r\n  clear: () => void\r\n  set: (input: File) => void\r\n}\r\ntype ValidatorType = (input: File) => { error: boolean; message: string }\r\ntype InitializerType = (input?: File, validator?: ValidatorType) => StateType\r\ntype ReducerType = (input?: File, validator?: ValidatorType) => ReturnType\r\ntype StateType = {\r\n  value?: File\r\n  error: boolean\r\n  message: string\r\n  disabled: boolean\r\n}\r\ntype ActionType = {\r\n  type: string\r\n  value?: File\r\n}\r\n\r\nconst DEFAULT_VALIDATOR: ValidatorType = input => {\r\n  if (typeof input !== 'object') return { error: true, message: 'Invalid file' }\r\n  if (!('size' in input) || input.size > 500000) return { error: true, message: 'File too big (max 500kb)' }\r\n  return { error: false, message: '' }\r\n}\r\nconst SET: string = 'set'\r\nconst CLEAR: string = 'clear'\r\n\r\nconst setInitialState: InitializerType = (input = undefined, validator = DEFAULT_VALIDATOR) => {\r\n  const { error, message } = input ? validator(input) : { error: false, message: '' }\r\n  return {\r\n    value: error ? undefined : input,\r\n    error,\r\n    message,\r\n    disabled: !!error || !input\r\n  }\r\n}\r\n\r\nconst useImageState: ReducerType = (initial = undefined, validator = DEFAULT_VALIDATOR) => {\r\n  const reducer = (state: StateType, action: ActionType): StateType => {\r\n    switch (action.type) {\r\n      case SET:\r\n        const { error, message } = action.value ? validator(action.value) : { error: false, message: '' }\r\n        return {\r\n          value: error ? undefined : action.value,\r\n          error,\r\n          message,\r\n          disabled: !!error || !action.value\r\n        }\r\n      case CLEAR:\r\n        return {\r\n          value: undefined,\r\n          error: false,\r\n          message: '',\r\n          disabled: true\r\n        }\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n  const [state, dispatch] = useReducer(reducer, setInitialState(initial, validator))\r\n  const set = (input: File): void => dispatch({ type: SET, value: input })\r\n  const clear = (): void => dispatch({ type: CLEAR })\r\n  return { ...state, clear, set }\r\n}\r\n\r\nexport default useImageState\r\n```\r\n\r\n**Usage example**\r\n```javascript\r\nexport const SomeComponent = props => {\r\n  const image = useImageState(props.initialImage)\r\n  ...\r\n}\r\n```\r\n\r\n**What happens**\r\nWhen props change and initialImage is different, the custom useReducer is invoked twice:\r\n- first with `undefined` as initialImage and returns `state.value = undefined` as expected\r\n- second with `object` (proper File type) including all data needed but it still returns `state.value = undefined`. The `setInitialState` from the code above returns valid state with all the data but on this line => ` const [state, dispatch] = useReducer(reducer, setInitialState(initial, validator))` the state is still `{value:undefined, ...}`\r\n\r\n**Expected behaviour**\r\nI want the reducer to change its initial state properly when parent's props change\r\n\r\n**My temporary solution**\r\nIn the `SomeComponent` i introduced `useEffect` with code: \r\n```javascript\r\nuseEffect(() => {\r\n    if (props.initialImage) image.set(props.initialImage)\r\n  }, [props.initialImage])\r\n```\r\nand it changed the state but the question is: \r\nShould i do it like that or should `useReducer` change its state when the initial value changes ",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
