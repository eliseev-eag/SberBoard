{
  "url": "https://api.github.com/repos/facebook/react/issues/10474",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10474/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10474/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10474/events",
  "html_url": "https://github.com/facebook/react/issues/10474",
  "id": 250734072,
  "node_id": "MDU6SXNzdWUyNTA3MzQwNzI=",
  "number": 10474,
  "title": "The fake event trick for rethrowing errors in DEV fires unexpected global error handlers and makes testing harder",
  "user": {
    "login": "brandonbloom",
    "id": 119164,
    "node_id": "MDQ6VXNlcjExOTE2NA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/119164?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brandonbloom",
    "html_url": "https://github.com/brandonbloom",
    "followers_url": "https://api.github.com/users/brandonbloom/followers",
    "following_url": "https://api.github.com/users/brandonbloom/following{/other_user}",
    "gists_url": "https://api.github.com/users/brandonbloom/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brandonbloom/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brandonbloom/subscriptions",
    "organizations_url": "https://api.github.com/users/brandonbloom/orgs",
    "repos_url": "https://api.github.com/users/brandonbloom/repos",
    "events_url": "https://api.github.com/users/brandonbloom/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brandonbloom/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 127893911,
      "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
      "name": "Component: DOM",
      "color": "fef2c0",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 45,
  "created_at": "2017-08-16T19:28:44Z",
  "updated_at": "2019-01-29T08:07:08Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "body": "I'm trying to make use of componentDidCatch in the React 16 beta. I already had a global window error handler which was working fine, but it unexpectedly catches errors that I would expect componentDidCatch to have handled. That is, component-local errors are being treated as window-global errors in dev builds.\r\n\r\nThe problem seems to stem from `invokeGuardedCallbackDev` in `ReactErrorUtils.js`. I think that this entire `__DEV__` block of code is problematic. The stated rational is:\r\n\r\n```\r\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\r\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\r\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\r\n  // functions in invokeGuardedCallback, and the production version of\r\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\r\n  // like caught exceptions, and the DevTools won't pause unless the developer\r\n  // takes the extra step of enabling pause on caught exceptions. This is\r\n  // untintuitive, though, because even though React has caught the error, from\r\n  // the developer's perspective, the error is uncaught.\r\n```\r\n\r\nThis is misguided because it's not about pausing on exceptions, it's about \"pause on _uncaught_ exceptions.\" However, `componentDidCatch` makes exceptions _caught_!\r\n\r\nRather than switching on prod vs dev and using try/catch in prod and window's error handler in dev, React should always use try/catch, but rethrow if you reach the root without hitting a componentDidCatch handler. This would preserve the correct \"pause on uncaught exceptions\" behavior without messing with global error handlers.",
  "closed_by": null
}
