{
  "url": "https://api.github.com/repos/facebook/react/issues/5182",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/5182/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/5182/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/5182/events",
  "html_url": "https://github.com/facebook/react/issues/5182",
  "id": 111632985,
  "node_id": "MDU6SXNzdWUxMTE2MzI5ODU=",
  "number": 5182,
  "title": "Confused about performant way of key usage with a list of fixed count",
  "user": {
    "login": "titoBouzout",
    "id": 64156,
    "node_id": "MDQ6VXNlcjY0MTU2",
    "avatar_url": "https://avatars1.githubusercontent.com/u/64156?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/titoBouzout",
    "html_url": "https://github.com/titoBouzout",
    "followers_url": "https://api.github.com/users/titoBouzout/followers",
    "following_url": "https://api.github.com/users/titoBouzout/following{/other_user}",
    "gists_url": "https://api.github.com/users/titoBouzout/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/titoBouzout/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/titoBouzout/subscriptions",
    "organizations_url": "https://api.github.com/users/titoBouzout/orgs",
    "repos_url": "https://api.github.com/users/titoBouzout/repos",
    "events_url": "https://api.github.com/users/titoBouzout/events{/privacy}",
    "received_events_url": "https://api.github.com/users/titoBouzout/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2015-10-15T14:47:43Z",
  "updated_at": "2015-10-15T17:53:51Z",
  "closed_at": "2015-10-15T16:53:21Z",
  "author_association": "NONE",
  "body": "Hi there! I searched lots, but I'm still confused about what is the best way to get the maximum performance in DOM operations and also CPU and memory usage. I can do lot of assumptions, but I would like to ask please. \n\nI've a list with an always fixed count of 500 items (lets say 5 to illustrate the example), the list is a stream, new elements frequently get pushed and old elements are removed .  List sample:\n\n```\n<div>\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n    <div>4</div>\n    <div>5</div>\n</div>\n```\n\n``` javascript\n    var state = [{id:0,t:'A'},{id:1,t:'B'},{id:2,t:'C'},{id:3,t:'D'},{id:4,t:'E'}] \n    // a new element insertion will append for example {id:5,t:'F'} and remove {id:0,t:'A'}\n```\n\n1 If I render the list like in the example bellow, react will remove from the dom the first item, and append a new one. Because each element in the list has a unique ID. If I insert 100 elements, react will remove 100 divs and appends 100 divs. \n\n``` javascript\n    render: function () {\n        return <div>\n                    {this.state.items.map(function(item, index) {\n                        return <div key={item.id}>{item.t}</div>\n                    })}\n                </div>\n    }\n```\n\n1.1 Q: In this example react will create and destroy a new component everytime I push and remove an item? If so, maybe consumes more CPU?  Removing the first div and appending a new one may be less expensive in DOM operations than the next example?\n\n2 If I render the list like this, react will NOT remove the first div, it will update the text content of all the divs. Because the ID is the index of the element in the list, will be always 0 for the first element.\n\n``` javascript\n    render: function () {\n        return <div>\n                    {this.state.items.map(function(item, index) {\n                        return <div key={index}>{item.t}</div>\n                    })}\n                </div>\n    }\n```\n\n2 1 Q: In this example react will reuse the component instead of destroying and creating a new one everytime I push and remove an item? If so, maybe consumes less CPU than the first example?  Updating the context of each div may be more expensive in DOM operations than in the previous example?\n\nSo I don't know what is the best way to handle this, to be honest I'm not even sure what reacts really does, and what scare me most is what browser internals do. \n\nI can image that for a list with very few amount of elements maybe option 2 will be prefered. and with a huge list of elements option 1 is prefered. Im saying non-sense? =c)\n\nI also can guess this will depend of the content of the div, if the content of the divs is always same, the option 2 will be like a \"noop\" and the option 1 will remove and append a new div every time, \nI'm right?\n\nThanks in advance! Sorry for asking here\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
