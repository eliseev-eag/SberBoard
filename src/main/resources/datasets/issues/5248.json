{
  "url": "https://api.github.com/repos/facebook/react/issues/5248",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/5248/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/5248/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/5248/events",
  "html_url": "https://github.com/facebook/react/issues/5248",
  "id": 112899945,
  "node_id": "MDU6SXNzdWUxMTI4OTk5NDU=",
  "number": 5248,
  "title": "Optimizing the reconciliation of unchanged DOM nodes",
  "user": {
    "login": "milankinen",
    "id": 1080706,
    "node_id": "MDQ6VXNlcjEwODA3MDY=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/1080706?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/milankinen",
    "html_url": "https://github.com/milankinen",
    "followers_url": "https://api.github.com/users/milankinen/followers",
    "following_url": "https://api.github.com/users/milankinen/following{/other_user}",
    "gists_url": "https://api.github.com/users/milankinen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/milankinen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/milankinen/subscriptions",
    "organizations_url": "https://api.github.com/users/milankinen/orgs",
    "repos_url": "https://api.github.com/users/milankinen/repos",
    "events_url": "https://api.github.com/users/milankinen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/milankinen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2015-10-22T21:56:48Z",
  "updated_at": "2017-10-03T22:38:10Z",
  "closed_at": "2017-10-03T22:38:10Z",
  "author_association": "NONE",
  "body": "Hi! I'm not sure if this is a bug or feature but I'll make this issue anyway.\n\nIt seems that React tries to optimize the reconciliation by [early stopping the reconciliation of react element if its reference has not changed](https://github.com/facebook/react/blob/v0.14.0/src/renderers/shared/reconciler/ReactReconciler.js#L70-L84). However, because only `ReactCompositeComponentMixin` has the `_context` property, the check fails with normal DOM nodes (`div`, `ul`, ...). In practice this means that the sub-tree will be diffed although the element hasn't changed at all, resulting poor performance with huge sub-trees.\n\nI tried to change the check a little bit:\n\n``` javascript\nif (nextElement === prevElement && (!internalInstance.hasOwnProperty(\"_context\") || context === internalInstance._context)) {\n  return;\n}\n```\n\nI tried to run it with the following test application and I got a massive performance improvement\n\n``` javascript\nimport React from \"react\"\nimport {render} from \"react-dom\"\n\nconst range = n => Array.apply(null, {length: n}).map(Number.call, Number)\n\nconst staticList = (\n  <ul>\n    {range(100000).map((_, idx) => <li key={idx}>Item #{idx}</li>)}\n  </ul>\n)\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { counter: 0 }\n  }\n\n  increment() {\n    this.setState({counter: this.state.counter + 1})\n  }\n\n  decrement() {\n    this.setState({counter: this.state.counter - 1})\n  }\n\n  render() {\n    const {counter} = this.state\n    return (\n      <div>\n        Counter value is {counter}\n        <div>\n          <button onClick={this.increment.bind(this)}>+</button>\n          <button onClick={this.decrement.bind(this)}>-</button>\n        </div>\n        {staticList}\n      </div>\n    )\n  }\n}\n\nrender(<App />, document.getElementById(\"app\"))\n```\n\nWhat do you think? Does this optimization make any sense or does it have any unwanted effects I'm unaware of? If I've understood right, react elements are [immutable](https://github.com/facebook/react/blob/v0.14.0/src/isomorphic/classic/element/ReactElement.js#L112-L113) so the strict equality check should be enough but how about `ReactDOMNode` (internalInstance)?\n\nAnd yes. I know that this could be solved by using custom component class and `componentShouldUpdate` but that's not I'm searching for.\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
