{
  "url": "https://api.github.com/repos/facebook/react/issues/14253",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14253/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14253/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14253/events",
  "html_url": "https://github.com/facebook/react/issues/14253",
  "id": 381673692,
  "node_id": "MDU6SXNzdWUzODE2NzM2OTI=",
  "number": 14253,
  "title": "useCallback() alternative implementation",
  "user": {
    "login": "muqg",
    "id": 21229458,
    "node_id": "MDQ6VXNlcjIxMjI5NDU4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/21229458?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/muqg",
    "html_url": "https://github.com/muqg",
    "followers_url": "https://api.github.com/users/muqg/followers",
    "following_url": "https://api.github.com/users/muqg/following{/other_user}",
    "gists_url": "https://api.github.com/users/muqg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/muqg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/muqg/subscriptions",
    "organizations_url": "https://api.github.com/users/muqg/orgs",
    "repos_url": "https://api.github.com/users/muqg/repos",
    "events_url": "https://api.github.com/users/muqg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/muqg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-11-16T16:36:01Z",
  "updated_at": "2018-11-17T10:50:01Z",
  "closed_at": "2018-11-16T16:46:26Z",
  "author_association": "NONE",
  "body": "useCallback provides a way to memoize callbacks based on whether an array of given values changes. I have been wondering if it could work like something similar to this instead:\r\n\r\n```JavaScript\r\nfunction useStatic(cb) {\r\n  const callback = useRef(cb)\r\n  callback.current = cb\r\n\r\n  const mem = useRef((...args) => callback.current(...args))\r\n  return mem.current\r\n}\r\n```\r\nNote that this is just a mock implementation to illustrate my idea. This hook above will always return the same function instance that is kept within the reference object, while always calling the latest version of the callback argument. This way the need to pass props to be compared is omitted which could also be an improvement to its performance. \r\n\r\nHere is a side to side usage comparison:\r\n```JavaScript\r\nfunction MyComponent({title}) {\r\n  // Will return the memoized callback if title didn't change.\r\n  const current = useCallback(() => alert(title), [title])\r\n\r\n  // Will return a memoized callback, even if title changes,\r\n  // while there is also no need to check if it did change.\r\n  const alternative = useStatic(() => alert(title))\r\n}\r\n```",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
