{
  "url": "https://api.github.com/repos/facebook/react/issues/7114",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/7114/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/7114/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/7114/events",
  "html_url": "https://github.com/facebook/react/issues/7114",
  "id": 162155795,
  "node_id": "MDU6SXNzdWUxNjIxNTU3OTU=",
  "number": 7114,
  "title": "Context validation limitations",
  "user": {
    "login": "prasannavl",
    "id": 559409,
    "node_id": "MDQ6VXNlcjU1OTQwOQ==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/559409?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/prasannavl",
    "html_url": "https://github.com/prasannavl",
    "followers_url": "https://api.github.com/users/prasannavl/followers",
    "following_url": "https://api.github.com/users/prasannavl/following{/other_user}",
    "gists_url": "https://api.github.com/users/prasannavl/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/prasannavl/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/prasannavl/subscriptions",
    "organizations_url": "https://api.github.com/users/prasannavl/orgs",
    "repos_url": "https://api.github.com/users/prasannavl/repos",
    "events_url": "https://api.github.com/users/prasannavl/events{/privacy}",
    "received_events_url": "https://api.github.com/users/prasannavl/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2016-06-24T14:09:57Z",
  "updated_at": "2017-10-04T00:45:10Z",
  "closed_at": "2017-10-04T00:45:10Z",
  "author_association": "NONE",
  "body": "The problem is best expressed in terms of an example: \n\nI've a function that acts as an plugs into my implementation of an isomorphic style loader. The function is simply set on the very high-level `AppContext` (that contains the application services, and components and the whole shebang) which is passed through root component as a `context`. So, a component inside essentially just needs to get that style applier function from the context and run them. And naturally, abstracting it into a higher order component would make the most sense to initiate the styles and dispose of them, paired with the lifecycle.\n\n**Note:** A similar live implementation running my site, https://www.prasannavl.com is here: https://github.com/prasannavl/prasannavl.com/blob/0060cc4acbd8796f2495a68c3669b1b224476b15/src/modules/core/createStyled.ts (However, since its just my site, I'm duplicating the class to workaround the below mentioned problem)\n\nHowever, I **DO NOT** want to couple this component into my app's context. So, essentially, I want something like this:\n\n``` ts\nexport function createStyledWith<T>(styleApplier: CssStyle.StyleApplierFunction, InnerComponent: T, ...styles: any[]) {\n    class StyledComponent extends React.Component<any, any> {\n        static displayName = getDisplayName(InnerComponent);\n        private removeCss: () => void;\n\n        componentWillMount() {\n            this.removeCss = styleApplier.apply(this, styles);\n        }\n\n        componentWillUnmount() {\n            const removeCss = this.removeCss;\n            setTimeout(removeCss, 0);\n        }\n\n        render() {\n            return React.createElement(InnerComponent as any, this.props);\n        }\n    }\n    // Trick the type system into thinking its the same component\n    return StyledComponent as any as T;\n}\n```\n\nThe problem: How do I create a `styleApplier` that pull the service from the context?\n\nI simply cannot pass the decoupled style applier function into this component, unless I have it stored else where.\n\n**Why?** \n\nI have no access to the context outside of the component. Well, that can be solved by providing a closure that accesses the context, and pull the services. (Or so I thought). But since this doesn't have `contextTypes`, React will refuse to acknowledge the existence of context. So, there's really no way to make this work without another un-necessary abstraction - another higher order component - that pulls the styleapplier out of the context, and then provides it to this component that can then be called.\n\nHigher order components may be gold. But if you fill an entire ship with gold, it will sink. Its great that the React community is insisting on the HOC pattern. But it seems a little dogmatic for that to be the only way to do certain things. Because, its seems totally wasteful to do this for components that are tiny, and exists in hundreds. HOCs may only have small processor time requirement, but does consume memory with each component. More diffing for react, more things to keep around, more lifecycle method executions and so on.\n\nNote that, I'm only using the above as an example. My concern is more of the pattern involved. I encounter this on many scenarios, and seem to have to jump through hoops to access these if I do not want to use more higher order components, with no other good way to solve this.\n\nThings that _could_ potentially solve this:\n- Most reasonable one IMO: Make context validation optional. Don't shove it down the component's throat.\n- Provide a way to access context from the outside without using higher order components. (Well, I think this kinda breaks many encapsulations, but just leaving it out there since it would theoretically solve the issue)\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
