{
  "url": "https://api.github.com/repos/facebook/react/issues/1373",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/1373/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/1373/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/1373/events",
  "html_url": "https://github.com/facebook/react/issues/1373",
  "id": 31034633,
  "node_id": "MDU6SXNzdWUzMTAzNDYzMw==",
  "number": 1373,
  "title": "Implement Better Refs API",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 31,
  "created_at": "2014-04-08T00:40:37Z",
  "updated_at": "2018-12-21T09:29:30Z",
  "closed_at": "2015-01-23T02:19:05Z",
  "author_association": "MEMBER",
  "body": "The ref API is broken is several aspects.\n- You have to refer to this.refs['myname'] as strings to be Closure Compiler Advanced Mode compatible.\n- It doesn't allow the notion of multiple owners of a single instance.\n- Magical dynamic strings potentially break optimizations in VMs.\n- It needs to be always consistent, because it's synchronously resolved. This means that asynchronous batching of rendering introduces potential bugs.\n- We currently have a hook to get sibling refs so that you can have one component refer to it's sibling as a context reference. This only works one level. This breaks the ability to wrap one of those in an encapsulation.\n- It can't be statically typed. You have to cast it at any use in languages like TypeScript.\n- There's no way to attach the ref to the correct \"owner\" in a callback invoked by a child. `<Child renderer={index => <div ref=\"test\">{index}</div>} />` -- this ref will be attached where the callback is issued, not in the current owner.\n\nI think that the solution must ultimately be some kind of first class ref that can be passed around. These refs can be chained to create multi-owner refs very efficiently. By creating this object for the ref, we can also get rid of keeping track of owners on descriptors. Saving perf for the common idiomatic case of not using refs.\nA secondary goal, which may or may not be as important is the idea of making the resolution of refs asynchronous so that you can respond after a batched flush/reconciliation.\n\nThe concept of a first class ref is basically a reference to an object that doesn't exist yet. Luckily there's a first class notion of this in the language already... It's called a Promise.\nYou create a new Ref instance which is just Promise object that will eventually resolve to the actual instance.\n\n``` javascript\nclass Foo {\n\n  myDivRef = React.createRef();\n\n  handleTick() {\n    this.myDivRef.then(myDivNode => {\n      this.setState({ width: myDivNode.offsetWidth });\n    });\n  }\n\n  render() {\n    return (\n      <C tick={this.handleTick}>\n        <div ref={this.myDivRef} />\n        <CustomComponent context={this.myDivRef} />\n      </C>\n    );\n  }\n\n}\n```\n\nSince this builds on top of Promises we would be able to get async/await language features that allow us to do something like this:\n\n``` javascript\n  async handleTick() {\n    this.setState({ width: (await this.myDivRef).offsetWidth });\n  }\n```\n\nThis solves all those use cases AFAIK. The asynchronous API is a little difficult to deal with. But it makes it less weird than the alternative when batching is involved.\n\nAn unsolved problem is that refs can update to point to a different instance. In that case the Promise would need to be re-resolved. This is why Promises are not good enough and we ultimately need something like an Observable that can handle multiple values. We can't wait for that spec though. Maybe we just allow our promises to be reset and if you call then(...) again, you get a new value?\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
