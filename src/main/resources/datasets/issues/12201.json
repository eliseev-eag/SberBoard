{
  "url": "https://api.github.com/repos/facebook/react/issues/12201",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12201/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12201/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12201/events",
  "html_url": "https://github.com/facebook/react/pull/12201",
  "id": 296047945,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTY4MzY5MDY3",
  "number": 12201,
  "title": "Add stack unwinding phase for handling errors",
  "user": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-02-09T23:51:51Z",
  "updated_at": "2018-09-10T15:12:23Z",
  "closed_at": "2018-02-24T01:38:42Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/12201",
    "html_url": "https://github.com/facebook/react/pull/12201",
    "diff_url": "https://github.com/facebook/react/pull/12201.diff",
    "patch_url": "https://github.com/facebook/react/pull/12201.patch"
  },
  "body": "A rewrite of error handling, with semantics that more closely match stack unwinding.\r\n\r\nErrors that are thrown during the render phase unwind to the nearest error boundary, like before. But rather than synchronously unmount the children before retrying, we restart the failed subtree within the same render phase. The failed children are still unmounted (as if all their keys changed) but without an extra commit.\r\n\r\nCommit phase errors are different. They work by scheduling an error on the update queue of the error boundary. When we enter the render phase, the error is popped off the queue. The rest of the algorithm is the same.\r\n\r\nThis approach is designed to work for throwing non-errors, too, though that feature is not implemented yet.\r\n\r\nKnown differences from existing error handling semantics in synchronous mode:\r\n\r\n- When a component throws an error, we continue rendering its siblings rather than unwind immediately.\r\n- Because of the previous point, a single error boundary may capture more than one error during a single render, if multiple child branches fail.\r\n- We call `componentDidCatch` for each error that a boundary captures, instead of just the first one.\r\n- Error boundaries only catch error objects. Non-errors will propagate to the root and cause the tree to unmount, as if itâ€™s an uncaught error.\r\n\r\nUnresolved items:\r\n\r\n- [x] Add `getDerivedStateFromCatch` lifecycle behind a feature flag. This is fired during the render phase so that we can retry without committing, as opposed to `componentDidCatch`, which fires in the commit phase. We'll keep `componentDidCatch` around for logging purposes. If `getDerivedStateFromCatch` is not implemented but `componentDidCatch` is, the fallback behavior is to unmount all the boundary's children. (This part is already implemented.) We may warn about the missing `getDerivedStateFromCatch` in a future release.\r\n- [x] Existing code that schedules recovery updates inside `componentDidCatch` will have mostly the same semantics, with one key exception. We no longer track whether an error boundary failed in a previous commit. So it's now possible to fall into a recursive error loop, in the same way as an unguarded `setState` inside `componentDidUpdate`.",
  "closed_by": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  }
}
