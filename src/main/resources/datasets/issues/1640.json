{
  "url": "https://api.github.com/repos/facebook/react/issues/1640",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/1640/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/1640/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/1640/events",
  "html_url": "https://github.com/facebook/react/pull/1640",
  "id": 34925234,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTY2ODk4OTc=",
  "number": 1640,
  "title": "Configure Componets",
  "user": {
    "login": "mcwhittemore",
    "id": 1551510,
    "node_id": "MDQ6VXNlcjE1NTE1MTA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1551510?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mcwhittemore",
    "html_url": "https://github.com/mcwhittemore",
    "followers_url": "https://api.github.com/users/mcwhittemore/followers",
    "following_url": "https://api.github.com/users/mcwhittemore/following{/other_user}",
    "gists_url": "https://api.github.com/users/mcwhittemore/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mcwhittemore/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mcwhittemore/subscriptions",
    "organizations_url": "https://api.github.com/users/mcwhittemore/orgs",
    "repos_url": "https://api.github.com/users/mcwhittemore/repos",
    "events_url": "https://api.github.com/users/mcwhittemore/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mcwhittemore/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2014-06-04T03:25:53Z",
  "updated_at": "2014-06-12T16:49:54Z",
  "closed_at": "2014-06-08T00:52:42Z",
  "author_association": "NONE",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/1640",
    "html_url": "https://github.com/facebook/react/pull/1640",
    "diff_url": "https://github.com/facebook/react/pull/1640.diff",
    "patch_url": "https://github.com/facebook/react/pull/1640.patch"
  },
  "body": "## Simplifying Configuring Components\n\nIn looking into implementing a system of the basic components it became obvious that a simpler way to override small details such as labels, image paths and the like was needed. On one hand doing this via `props` does that job, but the code reuse needed to continually configure more or less static attributes opens consumers up to points of failure, especially when those props have defaults and thus work by default, if not as desired. The solution presented in this PR is `React.configClass`.\n\n`React.configClass` takes two arguments.\n1. Object returned from React.createClass:\n2. Config object:\n\nWith these two arguments it clones the `originalSpec` of the provided class and merges the config object into `clonedSpec.config` Doing this means `configClass` treats the passed component as an immutable object, thus letting users configure a base component into a custom one while still using the base as intentionally designed if needed.\n## Example\n\nHere is a basic example take from my additions to the Reusable Components docs.\n\n``` javascript\n\nvar PostLineItem = React.createClass({\n  config: {\n    typeImage: '/imgs/post-default.jpg'\n  },\n  render: function(){\n    return (\n      <li>\n        <img src={this.config.typeImage} />\n        {this.props.title}\n      </li>\n    );\n  }\n}).\n\nvar NewsPostLI = React.configClass(PostLineItem, {typeImage: '/imgs/posts-news.jpg'});\nvar MemePostLI = React.configClass(PostLineItem, {typeImage: '/imgs/post-meme.jpg'});\n\nvar PostList = React.createClass({\n  render: function(){\n    var posts = [];\n    for(var i=0; i<this.props.posts.length; i++){\n      var postData = this.props.posts[i];\n      if(postData.type==='news'){\n        posts.push(<NewsPostLI title={postData.title} />);\n      }\n      else if(postData.type==='meme'){\n        posts.push(<MemePostLI title={postData.title} />);\n      }\n      else{\n        posts.push(<PostLineItem title={postData.title} />);\n      }\n    }\n\n    return (\n      <ul>\n        {posts}\n      </ul>\n    );\n  }\n});\n```\n## state vs props vs config\n- state: mutable instance data\n- props: immutable instance data\n- config: immutable lifespan data\n\nThe biggest problem with this change that I see is that it introduces (or at least seems to introduce) yet another kind of data. That said, if we define state, props and config as I have above, I think its clear that config data has always existed and that while it can be serviced via props (which could be serviced by state) doing so forces code duplication.\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
