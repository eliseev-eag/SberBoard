{
  "url": "https://api.github.com/repos/facebook/react/issues/14458",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14458/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14458/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14458/events",
  "html_url": "https://github.com/facebook/react/issues/14458",
  "id": 392208653,
  "node_id": "MDU6SXNzdWUzOTIyMDg2NTM=",
  "number": 14458,
  "title": "getDerivedStateFromProps cannot be used to react to changes in props",
  "user": {
    "login": "sheerun",
    "id": 292365,
    "node_id": "MDQ6VXNlcjI5MjM2NQ==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/292365?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sheerun",
    "html_url": "https://github.com/sheerun",
    "followers_url": "https://api.github.com/users/sheerun/followers",
    "following_url": "https://api.github.com/users/sheerun/following{/other_user}",
    "gists_url": "https://api.github.com/users/sheerun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sheerun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sheerun/subscriptions",
    "organizations_url": "https://api.github.com/users/sheerun/orgs",
    "repos_url": "https://api.github.com/users/sheerun/repos",
    "events_url": "https://api.github.com/users/sheerun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sheerun/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-12-18T15:30:31Z",
  "updated_at": "2018-12-18T16:27:25Z",
  "closed_at": "2018-12-18T15:39:50Z",
  "author_association": "CONTRIBUTOR",
  "body": "## Problem\r\n\r\nThe [blogpost](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) and [docs](https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops) on this method explicitly say:\r\n\r\n> getDerivedStateFromProps exists for only one purpose. It enables a component to update its internal state as the result of changes in props.\r\n\r\n> This method exists for rare use cases where the state depends on changes in props over time. \r\n\r\nAlso the RFC states:\r\n\r\n> Note that React may call this method even if the props have not changed.\r\n\r\n**But how one can react to *changes* in props when no previous props or state are available and this method is invoked both when props change and not? (and also [after setState](https://github.com/facebook/react/issues/13480)).**\r\n\r\n## Use case\r\n\r\nMy component is a filter button that upon clicking show popover dialog (something like [this](https://www.w3schools.com/bootstrap/bootstrap_popover.asp)) with ability to change inside popover, e.g. price of product.\r\n\r\nThe [blogpost](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) recommends following solutions:\r\n\r\n> Recommendation: Fully controlled component\r\n\r\nI don't want fully controlled component as I want to encapsulate behavior of opening and closing popover within filter button itself. I don't want to put this logic anywhere else than the component.\r\n\r\n> Recomendation: To reset all internal state, use the key attribute.\r\n\r\nI don't want to reset all internal state as popover should remain opened (i.e. its `state.opened` property should not be changed). It should only react to change in props, what are maximum and minimum values possible to select with price slider or \"defaultPrice\" value that is passed from model as prop after `onChange` prop is triggered by button.\r\n\r\n> Recommendation: Fully uncontrolled component with a key\r\n\r\nAgain, I cannot use `key` because I want `state.opened` to be preserved and reset to \"default\" or \"managed\" values only other properties like selected price or currency if they change as props.\r\n\r\n> Alternative 1: Reset uncontrolled component with an ID prop\r\n\r\nIn my case the the \"id\" is the price that should be shown as default, and indeed I tried following:\r\n\r\n```js\r\nstatic getDerivedStateFromProps (props, state) {\r\n  if (props.distance !== state.distance) {\r\n    return {\r\n      distance: props.distance\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n```\r\n\r\nUnfortunately this won't work because I want to use `setState({ distance: xxx })` to update current value of slider in real time within component itself (component triggers onChange only when slider is dropped). It turns out that `setState({ distance: xxx })` is overridden by logic `getDerivedStateFromProps` that sets state.distance to props.distance because `props.distance !== state.distance`.\r\n\r\n> Alternative 2: Reset uncontrolled component with an instance method\r\n\r\nAgain, I don't want to reset anything, and I want to encapsulate popover logic and not rely on something like `ref` that has lots and lots of quirks and requires me to write custom code when to call this instance method and when just to pass property like I do everywhere for default values.\r\n\r\nMemoization is not needed for this this use case so I'll skip it.\r\n\r\n## Solutions?\r\n\r\nSincerely I don't know, but one thing for sure, the documentation should be changed.\r\n\r\ngetDerivedStateFromProps **cannot** be used to react to changes in props, it can be **only** be used to derive new state from current props and current state which is indeed very rare use case.\r\n\r\nAlso React deprecated perfectly good API that actually can react to changes in props, because it receives both props and prevProps, so maybe it's time to re-introduce this API and recommend it for this use case",
  "closed_by": {
    "login": "jquense",
    "id": 339286,
    "node_id": "MDQ6VXNlcjMzOTI4Ng==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/339286?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jquense",
    "html_url": "https://github.com/jquense",
    "followers_url": "https://api.github.com/users/jquense/followers",
    "following_url": "https://api.github.com/users/jquense/following{/other_user}",
    "gists_url": "https://api.github.com/users/jquense/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jquense/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jquense/subscriptions",
    "organizations_url": "https://api.github.com/users/jquense/orgs",
    "repos_url": "https://api.github.com/users/jquense/repos",
    "events_url": "https://api.github.com/users/jquense/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jquense/received_events",
    "type": "User",
    "site_admin": false
  }
}
