{
  "url": "https://api.github.com/repos/facebook/react/issues/14228",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14228/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14228/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14228/events",
  "html_url": "https://github.com/facebook/react/issues/14228",
  "id": 380595664,
  "node_id": "MDU6SXNzdWUzODA1OTU2NjQ=",
  "number": 14228,
  "title": "Feature/Question: Optimistic Rendering",
  "user": {
    "login": "iamclaytonray",
    "id": 16495816,
    "node_id": "MDQ6VXNlcjE2NDk1ODE2",
    "avatar_url": "https://avatars3.githubusercontent.com/u/16495816?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iamclaytonray",
    "html_url": "https://github.com/iamclaytonray",
    "followers_url": "https://api.github.com/users/iamclaytonray/followers",
    "following_url": "https://api.github.com/users/iamclaytonray/following{/other_user}",
    "gists_url": "https://api.github.com/users/iamclaytonray/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iamclaytonray/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iamclaytonray/subscriptions",
    "organizations_url": "https://api.github.com/users/iamclaytonray/orgs",
    "repos_url": "https://api.github.com/users/iamclaytonray/repos",
    "events_url": "https://api.github.com/users/iamclaytonray/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iamclaytonray/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-11-14T08:57:09Z",
  "updated_at": "2018-11-15T02:34:32Z",
  "closed_at": "2018-11-15T02:34:32Z",
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature (kind of). It's more like a question that can lead to a proposal.\r\n\r\nTo my understanding, Suspense takes care of \"post-rendering\" in the sense that Suspense will wait on some async action to finish before rendering that UI, otherwise, it renders a fallback UI based on a threshold.\r\n\r\nIs it possible to do something like this but on the opposite end of the spectrum? IE: instead of \"suspending\" or \"post-rendering\" UI, is it possible to \"pre-render\" certain methods to prepare certain \"things\" for the next UI change? This could be something as trivial as instantiating a fetch call before the user clicks a nav-link that would mount the next component, but waiting on the component to be mounted before re-rendering UI. Kind of like lazy loading but at a much bigger (and harder) scale.\r\n\r\nI know this would have obvious performance implications and I'm not 100% sure how this would play well will componentWillUnmount. I would imagine that it'd play nicely with Concurrent React but that could just be naive of me. I agree that premature optimization is a hard rabbit hole to dig yourself out of but I'm more-or-less curious about what something like this could mean for React, as a public API. \r\n\r\n[Usage example with React.Component](https://codesandbox.io/s/ypqx16qopj)\r\n\r\nEdit:\r\n\r\nI forgot to mention that I am aware calling `setState` before a component is mounted is a no-op, and for good reason. Again, not 100% sure of implementation or if this is even a good idea. Just something I was playing around with and wanted to open an issue to see if there is any merit to it.\r\n\r\nAnother Edit:\r\nAfter giving this some more thought and playing around with that example more (a clone, so the link above is the original copy), I don't think I had such a great idea after-all. cWU would destroy any state changes (not to mention it's not the best idea to mutate state directly), calling setState for non-rendered components is a no-op, other lifecycles would have to diff props or Context (if using Context were even feasible), and even if those props or Context were feasible, I'm not sure there would be any perf benefits after all of that logic is executed over just rendering the upcoming component. I'm going to leave this issue open for you guys/gals to review just in case I missed something or you see something I don't (which is still possible) but feel free to close or ping me and I'll happily close it. ",
  "closed_by": {
    "login": "iamclaytonray",
    "id": 16495816,
    "node_id": "MDQ6VXNlcjE2NDk1ODE2",
    "avatar_url": "https://avatars3.githubusercontent.com/u/16495816?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iamclaytonray",
    "html_url": "https://github.com/iamclaytonray",
    "followers_url": "https://api.github.com/users/iamclaytonray/followers",
    "following_url": "https://api.github.com/users/iamclaytonray/following{/other_user}",
    "gists_url": "https://api.github.com/users/iamclaytonray/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iamclaytonray/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iamclaytonray/subscriptions",
    "organizations_url": "https://api.github.com/users/iamclaytonray/orgs",
    "repos_url": "https://api.github.com/users/iamclaytonray/repos",
    "events_url": "https://api.github.com/users/iamclaytonray/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iamclaytonray/received_events",
    "type": "User",
    "site_admin": false
  }
}
