{
  "url": "https://api.github.com/repos/facebook/react/issues/690",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/690/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/690/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/690/events",
  "html_url": "https://github.com/facebook/react/issues/690",
  "id": 24672058,
  "node_id": "MDU6SXNzdWUyNDY3MjA1OA==",
  "number": 690,
  "title": "JSX conditionals requires a lot of workarounds a lot of the time",
  "user": {
    "login": "syranide",
    "id": 1714255,
    "node_id": "MDQ6VXNlcjE3MTQyNTU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/1714255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/syranide",
    "html_url": "https://github.com/syranide",
    "followers_url": "https://api.github.com/users/syranide/followers",
    "following_url": "https://api.github.com/users/syranide/following{/other_user}",
    "gists_url": "https://api.github.com/users/syranide/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/syranide/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/syranide/subscriptions",
    "organizations_url": "https://api.github.com/users/syranide/orgs",
    "repos_url": "https://api.github.com/users/syranide/repos",
    "events_url": "https://api.github.com/users/syranide/events{/privacy}",
    "received_events_url": "https://api.github.com/users/syranide/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": true,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 21,
  "created_at": "2013-12-21T22:25:56Z",
  "updated_at": "2017-11-22T15:52:03Z",
  "closed_at": "2013-12-21T23:03:24Z",
  "author_association": "CONTRIBUTOR",
  "body": "# The one good example\n\nConditionals are currently solved with the ternary `?:` or `&&` + `||` and actually works surprisingly well. However, what can be returned by them is another story.\n\nThe academic textbook example works great:\n\n```\n<div>\n  {condition ?\n    <span></span>\n  : null}\n</div>\n```\n\nor\n\n```\n<div>\n  {condition &&\n    <span></span>\n  }\n</div>\n```\n\nLooks pretty good, works great.\n# Any other is a disaster\n\nBut in order to return 2+ tags you need to return an array, which also requires that you separate them by commas (good bye beautiful JSX):\n\n```\n<div>\n  {condition ?\n    [\n      <span></span>,\n      <span></span>\n    ]\n  : null}\n</div>\n```\n\nIf you want a text-node instead then you have to actually rewrite your JSX-style code to pure JavaScript instead, which is perhaps even worse:\n\n```\n<div>\n  {condition ?\n    'My name is ' + name + '!'\n  : null}\n</div>\n```\n\nLet's also do the complete version, a text-node surrounded by tags, whitespace rules fly out the window and it no longer looks anything like JSX:\n\n```\n<div>\n  {condition ?\n    [\n      <span></span>,\n      'My name is ' + name + '!',\n      <span></span>\n    ]\n  : null}\n</div>\n```\n\nAnd while we're at it, if there are nested ifs then it looks like this, so let's go all out ugly, despite how simple it really should be:\n\n```\n<div>\n  {condition ?\n    [\n      (condition ?\n        [\n          <span></span>,\n          'My name is ' + name + '!',\n          <span></span>\n        ]\n      : null),\n      'Hello ' + name + '!'\n    ]\n  : null}\n</div>\n```\n\nThat is barely even understandable code. When without conditionals it would look like this:\n\n```\n<div>\n  <span></span>\n  My name is {name}!\n  <span></span>\n  Hello {name}!\n</div>\n```\n\nSo in my opinion, something is clearly wrong here, adding a conditionals should never require you to be working with arrays and rewriting inline text to use JavaScript string literals instead, or in general require you to massacre your code.\n# The problem(s)\n## Multiple tags\n\nThe easy part problem is simply that we currently cannot return more than one tag before having to resort to arrays. Intuitively this should be relatively easy to fix in JSX by simply automatically wrapping such as arrays. Simple, intuitive and good output?\n## Conditionals\n\nWhile it may not be a big deal, it's weird that the syntax for an if-statement `<tag>{cond ? true : false }</tag>` is different from a nested if `<tag>{cond ? (cond ? true : false) : false}</tag>` (braces replaced with parenthesis, because we're already in an expression) and it's back to braces if it's inside a tag `<tag>{cond ? <tag>{cond ? true : false}</tag> : false}</tag>`.\n## Text and expressions\n\nThe last big issue is that we can transition from JS to JSX-HTML by adding a root tag `<tag></tag>`, but we cannot transition directly to JSX-text and JSX-expressions `My name is {name}!` without it being wrapped in a tag `<tag>My name is {name}!</tag>` or without being rewritten to plain JavaScript `'My name is ' + name + '!'`. Which is necessary because conditionals are currently implemented as expressions.\n# Solutions\n## New conditional syntax\n\nSo it seems to me like the root of the problem is that conditionals are implemented as JSX expressions, which also causes the problem with having to rewrite JSX text/expressions when adding conditionals unless they are wrapped by tags. If they did not piggyback on JSX expressions then everything but non-parented JSX text/expressions would be solved, and really, that's not an issue at all.\n## Nesting of JSX expressions\n\nAnother solution is to allow JSX-expressions to be nested `<tag>{cond ? {cond ? true : false} : false}</tag>`, JSX text/expressions inside conditionals will still be a problem, but that could reasonably be solved by backtick strings `<tag>{cond ? `My name is {name}!` : null}</tag>`.\n## Or...\n\nOr do you think there are better ways one should use to structure the code? Am I missing something?\n\nI realize that this perhaps is approaching it from the perspective of old-style templates, but from where I'm standing now, these things seem to make it quite cumbersome in more complex situations... there are a lot of situations in which one has to change surrounding code simply because one added a tag, or because one removed a tag... or moved a conditional.\n\nPS. We had some discussion in the chat, and I agree that most of this is probably just \"old-school template habits\", however, returning multiple tags is biting me in the ass a lot. While everything content inside conditionals could be wrapped in divs/spans to make it play nice, it seems weird to have to add markup just to be able to write reasonable JSX.\n",
  "closed_by": {
    "login": "syranide",
    "id": 1714255,
    "node_id": "MDQ6VXNlcjE3MTQyNTU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/1714255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/syranide",
    "html_url": "https://github.com/syranide",
    "followers_url": "https://api.github.com/users/syranide/followers",
    "following_url": "https://api.github.com/users/syranide/following{/other_user}",
    "gists_url": "https://api.github.com/users/syranide/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/syranide/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/syranide/subscriptions",
    "organizations_url": "https://api.github.com/users/syranide/orgs",
    "repos_url": "https://api.github.com/users/syranide/repos",
    "events_url": "https://api.github.com/users/syranide/events{/privacy}",
    "received_events_url": "https://api.github.com/users/syranide/received_events",
    "type": "User",
    "site_admin": false
  }
}
