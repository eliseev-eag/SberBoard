{
  "url": "https://api.github.com/repos/facebook/react/issues/12085",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12085/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12085/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12085/events",
  "html_url": "https://github.com/facebook/react/issues/12085",
  "id": 291035810,
  "node_id": "MDU6SXNzdWUyOTEwMzU4MTA=",
  "number": 12085,
  "title": "Feature request: middleware",
  "user": {
    "login": "adrianhelvik",
    "id": 7836058,
    "node_id": "MDQ6VXNlcjc4MzYwNTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/7836058?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/adrianhelvik",
    "html_url": "https://github.com/adrianhelvik",
    "followers_url": "https://api.github.com/users/adrianhelvik/followers",
    "following_url": "https://api.github.com/users/adrianhelvik/following{/other_user}",
    "gists_url": "https://api.github.com/users/adrianhelvik/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/adrianhelvik/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/adrianhelvik/subscriptions",
    "organizations_url": "https://api.github.com/users/adrianhelvik/orgs",
    "repos_url": "https://api.github.com/users/adrianhelvik/repos",
    "events_url": "https://api.github.com/users/adrianhelvik/events{/privacy}",
    "received_events_url": "https://api.github.com/users/adrianhelvik/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-01-23T23:51:58Z",
  "updated_at": "2018-01-29T19:40:20Z",
  "closed_at": "2018-01-28T13:46:35Z",
  "author_association": "NONE",
  "body": "This is an incomplete draft for a feature I think could be\r\nreally cool. It can replace higher order components\r\nand context in a way I think is more in the component\r\nspirit of React.\r\n\r\nI do not know if this feature is feasible or desirable for\r\nReact, especially as it would lead to a bigger API surface.\r\nThe proposal is written as if it was documentation to\r\ngive a feel for how it would be to use it.\r\n\r\n# About React middleware\r\nA middleware is applied somewhere in the component tree\r\nand are instantiated just after child components are\r\ninstantiated and just before they mount. In this context,\r\nchild components means child components at any depth.\r\n\r\nMiddleware is used just like normal components, but\r\nit works slightly differently. When a middleware element\r\nis used it added to the middleware stack. If it is\r\nalready on the middleware stack, it removed from\r\nthe stack and pushed to the end, with the most\r\ninnermost props.\r\n\r\n## Simplified example\r\nIn addition to the actual classes, the stack also\r\nincludes its most recent props. But this is roughly\r\nhow it works.\r\n\r\n```javascript\r\n<MiddlewareA>\r\n  {/* middleware stack for \"A\": [MiddlewareA] */}\r\n  <A />\r\n  <MiddlewareB>\r\n    {/* middleware stack for \"B\": [MiddlewareA, MiddlewareB] */}\r\n    <B>\r\n      <MiddlewareA\r\n        {/* middleware stack for \"C\": [MiddlewareB, MiddlewareA] */}\r\n        <C />\r\n      </MiddlewareA>\r\n    </B>\r\n  </MiddlewareB>\r\n</MiddlewareB>\r\n```\r\n\r\n# Lifecycle methods\r\n\r\n## Additions to the existing lifecycle methods\r\n\r\n### Mounting\r\n- new: Middleware.shouldMiddlewareMount\r\n- new: Middleware.shouldMiddlewarePropagate\r\n- Component#constructor\r\n- new: Middleware#constructor\r\n- new: Middleware#middlewareWillMount()\r\n- Component#componentWillMount()\r\n- Component#render()\r\n- new: Middleware#interceptRender()\r\n- Component#componentDidMount\r\n\r\n### Unmounting\r\n- new: Middleware#middlewareWillUnmount\r\n\r\n## static shouldMiddlewareMount(ReactComponent)\r\nDetermine if the current middleware should apply for\r\na component. If the method isn't implemented, the\r\nmiddleware will always be applied.\r\n\r\nIf a middleware is on the middleware stack, this method\r\nis called every time a component is constructed.\r\n\r\n### Example\r\n\r\n```javascript\r\nclass TransformInlineStyles extends React.Middleware {\r\n\r\n  /**\r\n   * Only mount middleware when you set\r\n   * transformInlineStyles to a truthy\r\n   * value. Children of the given\r\n   * component can still enable\r\n   * the middleware\r\n   */\r\n  static shouldMiddlewareMount(Component) {\r\n    return Component.transformInlineStyles\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nconst A = props => (\r\n  // ...\r\n)\r\n\r\nconst B = props => (\r\n  // ...\r\n)\r\nB.transformInlineStyles = true\r\n\r\nconst App = () => (\r\n  <TransformInlineStyles>\r\n    {/* Not applied to \"A\" */}\r\n    <A>\r\n      {/* Applied to \"B\" */}\r\n      <B />\r\n    </A>\r\n  </TransformInlineStyles>\r\n)\r\n```\r\n\r\n## static shouldMiddlewarePropagate(ReactComponent)\r\nDetermine whether the middleware should remain on\r\nthe middleware stack or be excluded for the subtree\r\nbelow the given component. If not specified it returns\r\nfalse, in other words: The default behavior for\r\nmiddleware is to propagate.\r\n\r\nThis is useful if you want to limit middleware from\r\naffecting deeply nested children. It is also useful\r\nfor only giving middleware access to its immediate\r\nchildren.\r\n\r\n### Example\r\n\r\n```javascript\r\nimport React from 'react'\r\n\r\nclass ProvideTheme extends React.Middleware {\r\n  static StopPropagation = props => props.children\r\n\r\n  static shouldMiddlewarePropagate(Component) {\r\n    return Component !== this.StopPropagation\r\n  }\r\n\r\n  // ...\r\n}\r\n\r\nconst App = () => (\r\n  <ProvideTheme>\r\n    {/* middleware stack for \"A\": [ProvideTheme] */}\r\n    <A>\r\n      <ProvideTheme.StopPropagation>\r\n        {/* middleware stack for \"B\": [] */}\r\n        <B />\r\n      </ProvideTheme.StopPropagation>\r\n      {/* middleware stack for \"C\": [ProvideTheme] */}\r\n      <C />\r\n    </A>\r\n  </ProvideTheme>\r\n)\r\n```\r\n\r\n## middlewareWillMount(reactInstance)\r\nCalled before the child component calls componentWillMount.\r\nThis is a good place to initialize state for the middleware\r\ninstance.\r\n\r\n## MiddlewareWillUnmount(reactInstance)\r\nCalled before the child component calls componentWillUnmount.\r\n\r\n### Example\r\nThis is a naÃ¯ve example of how it could be used to trigger\r\nautomatic updates with Mobx.\r\n\r\n```javascript\r\nclass Observer extends React.Middleware {\r\n  middlewareWillMount(reactInstance) {\r\n    this.dispose = autorun(() => {\r\n\r\n      // Let Mobx track the observables\r\n      // used in the render method.\r\n      reactInstance.render()\r\n\r\n      // Force update the component instance\r\n      // after Mobx has stopped tracking the\r\n      // autorun function.\r\n      //\r\n      // .. yes, I know it's hacky.\r\n      setTimeout(() => {\r\n        reactInstance.forceUpdate()\r\n      })\r\n    })\r\n  }\r\n\r\n  middlewareWillUnmount(reactInstance) {\r\n    // Stop listening for changes from Mobx\r\n    this.dispose()\r\n  }\r\n}\r\n```\r\n\r\n## interceptRender(children)\r\ninterceptRender is called with the result from the render\r\nfunction of the component. The resulting value is what is\r\nused to render the DOM.\r\n\r\n### Example\r\nThis is an example of a middleware that transforms object\r\nclasses into a string. The result works similarly to how\r\nng-class works in AngularJS.\r\n\r\n```javascript\r\nclass ObjectClassNames extends React.Middleware {\r\n\r\n  /**\r\n   * This is a life cycle method.\r\n   *\r\n   * Intercept the render method and recursively\r\n   * loop through all children, performing\r\n   * this.transformProps() on their props.\r\n   */\r\n  interceptRender(children) {\r\n    return React.Children.map(children, child => {\r\n      if (! React.isValidElement(child)) {\r\n        return child\r\n      }\r\n      return {\r\n        ...child,\r\n        props: this.transformProps(child.props),\r\n        children: this.interceptRender(child.children)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * If a child has an object className, call\r\n   * this.transformClassname() on it.\r\n   */\r\n  transformProps(props) {\r\n    if (! props || ! props.className || typeof props.className !== 'object') {\r\n      return props\r\n    }\r\n\r\n    return {\r\n      ...props,\r\n      className: this.transformClassname(props.className)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Concatenate the truthy keys of the className\r\n   * object into a string.\r\n   */\r\n  transformClassname(className) {\r\n    const result = []\r\n\r\n    for (const key of Object.keys(className)) {\r\n      if (className[key]) {\r\n        result.push(key)\r\n      }\r\n    }\r\n\r\n    return result.join(' ')\r\n  }\r\n}\r\n\r\nconst Widget = (props) => (\r\n  <div className={{ 'Widget': true, 'Widget--active': props.active }}>\r\n    Some widget\r\n  </div>\r\n)\r\n\r\nconst App = () => (\r\n  <ObjectClassNames>\r\n    <Widget active={true} />\r\n  </ObjectClassNames>\r\n)\r\n```\r\n\r\n# Why middleware?\r\nReact middleware can replace two problematic patterns used with React.\r\n\r\n## Context\r\nThe h2 on context in the React docs says \"Why Not To Use\r\nContext\". Context is however a very useful feature. And\r\npeople have been and will continue to use and abuse it\r\nin the forseeable future. React Router has started\r\nabusing context in its most recent version, which shows\r\nthat there is clearly a need here.\r\n\r\nWith middleware, as I propose it, you would be able to\r\ninject props into an arbitrary subtree of your app. This\r\nhas performance implications, but would be an ideal\r\nscenario for libraries such as React Router, as the\r\nrelevant props (or as it is now, context) rarely\r\nchanges. With middleware shouldComponentUpdate\r\nwill still function like you would expect.\r\n\r\n## Higher order components\r\nA primal rule of programming is DRY. When using Mobx\r\nwith React, you must use the observer decorator on\r\nall reactive classes. This isn't a really big deal,\r\nbut not having to include that would reduce the size\r\nof every single observer component by two lines and\r\nmost importantly, I wouldn't forget it.\r\n\r\nWhen creating a higher order component static properties\r\nare no longer available. The package hoist-non-react-static\r\nis designed so that you should be able to access static\r\nproperties of higher order components transparently.\r\nIf a static property is initialized in the lifecycle\r\nmethods of a component, it will however not be proxied.\r\n\r\nCreating higher order components is also a messy affair.\r\n\r\nWith middleware you could achive the same thing in a React\r\nway. To replace connect from react-redux you could set\r\nshouldMiddlewarePropagate to return false, and it would\r\naffect only one component.\r\n\r\nAlternatively you could use static properties for\r\nmapStateToProps and mapDispatchToProps.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
