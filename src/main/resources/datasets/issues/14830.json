{
  "url": "https://api.github.com/repos/facebook/react/issues/14830",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14830/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14830/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14830/events",
  "html_url": "https://github.com/facebook/react/issues/14830",
  "id": 409007099,
  "node_id": "MDU6SXNzdWU0MDkwMDcwOTk=",
  "number": 14830,
  "title": "Prop updates updating state in hooks",
  "user": {
    "login": "iRule95",
    "id": 7540556,
    "node_id": "MDQ6VXNlcjc1NDA1NTY=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/7540556?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iRule95",
    "html_url": "https://github.com/iRule95",
    "followers_url": "https://api.github.com/users/iRule95/followers",
    "following_url": "https://api.github.com/users/iRule95/following{/other_user}",
    "gists_url": "https://api.github.com/users/iRule95/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iRule95/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iRule95/subscriptions",
    "organizations_url": "https://api.github.com/users/iRule95/orgs",
    "repos_url": "https://api.github.com/users/iRule95/repos",
    "events_url": "https://api.github.com/users/iRule95/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iRule95/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-02-11T22:30:38Z",
  "updated_at": "2019-09-26T15:04:57Z",
  "closed_at": "2019-02-12T01:13:37Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nMore of a question / discussion as I could not find it in the documentation. \r\n\r\n**What is the current behavior?**\r\nCurrently when using hooks like `useState` and `useReducer`, any updates to props used by their initial state has no effect on the state managed by these hooks. For instance, consider this example from the Hooks API Reference: \r\n\r\n```\r\nfunction Counter({initialCount}) {\r\n  const [count, setCount] = useState(initialCount);\r\n  return (\r\n    <>\r\n      Count: {count}\r\n      <button onClick={() => setCount(initialCount)}>Reset</button>\r\n      <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\r\n      <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\nNow let's suppose that a parent component initially renders a `Counter` with `initialCount` set to `0`. But later on the `initialCount` prop passed by the parent component is updated to let's say `11`. I would expect that a change in the `initialCount` prop, would then trigger a change in the `count` state but that doesn't happen. \r\n\r\nAt first I wasn't sure why the `count` was not updating as I expect any data changes to flow through where they are used. It seems like that the initial state is only used *initially* as the name suggests in  `useState` or `useReducer` and any changes to it are ignored by these hooks. \r\n\r\nHowever, we are still able to address the problem by using effects:\r\n```\r\nfunction Counter({initialCount}) {\r\n  const [count, setCount] = useState(initialCount);\r\n\r\n  useEffect(() => setCount(initialCount), [initialCount]);\r\n\r\n  return (\r\n    <>\r\n      Count: {count}\r\n      <button onClick={() => setCount(initialCount)}>Reset</button>\r\n      <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\r\n      <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\nThe need to use effects wasn't immediate to me but it makes sense as we would generally *hook* such behavior into component lifecycle methods like `componentDidUpdate`. I am curious as to why this doesn't already happen automatically through `useState` and `useReducer`, and wondering if this is the correct way to listen to such prop changes and accordingly update state, or is there some better way? \r\n\r\nWe could also extract this logic into a custom hook:\r\n```\r\nfunction useStateWithEffect(initialState) {\r\n  const [state, setState] = useState(initialState);\r\n  useEffect(() => setState(initialState), [initialState]);\r\n  return [state, setState]\r\n}\r\n\r\n// Haven't tested the reducer but as an idea\r\nfunction useReducerWithEffect(reducer, initialArg, init = x => x) {\r\n  const reducerWithStateUpdate = (state, action) => action.type === 'updateInitialArg' ? init(action.initialArg) : reducer(state, action);\r\n  const [state, dispatch] = useReducer(reducerWithStateUpdate, initialArg, init);\r\n  useEffect(() => dispatch({ type: 'updateInitialArg', initialArg }), [initialArg]);\r\n  return [state, dispatch]\r\n}\r\n```\r\n\r\nI spent some time trying to figure this out so if someone has reference to material already discussing this problem, please do share as I couldn't find it while going through the docs / posts about hooks.",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
