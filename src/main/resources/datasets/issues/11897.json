{
  "url": "https://api.github.com/repos/facebook/react/issues/11897",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11897/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11897/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11897/events",
  "html_url": "https://github.com/facebook/react/issues/11897",
  "id": 283681401,
  "node_id": "MDU6SXNzdWUyODM2ODE0MDE=",
  "number": 11897,
  "title": "reconciler's tryToClaimNextHydratableInstance next-nextInstance heuristic creating duplicative elements",
  "user": {
    "login": "chandlerprall",
    "id": 313125,
    "node_id": "MDQ6VXNlcjMxMzEyNQ==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/313125?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/chandlerprall",
    "html_url": "https://github.com/chandlerprall",
    "followers_url": "https://api.github.com/users/chandlerprall/followers",
    "following_url": "https://api.github.com/users/chandlerprall/following{/other_user}",
    "gists_url": "https://api.github.com/users/chandlerprall/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/chandlerprall/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/chandlerprall/subscriptions",
    "organizations_url": "https://api.github.com/users/chandlerprall/orgs",
    "repos_url": "https://api.github.com/users/chandlerprall/repos",
    "events_url": "https://api.github.com/users/chandlerprall/events{/privacy}",
    "received_events_url": "https://api.github.com/users/chandlerprall/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710332294,
      "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
      "name": "Component: Server Rendering",
      "color": "d4c5f9",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2017-12-20T20:10:42Z",
  "updated_at": "2018-08-09T12:59:42Z",
  "closed_at": "2018-08-09T12:59:42Z",
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug (though the React code is working as intended)\r\n\r\n**What is the current behavior?**\r\nWhen hydrating from server-rendered DOM, if [react-reconciler encounters an unexpected node](https://github.com/facebook/react/blob/v16.2.0/packages/react-reconciler/src/ReactFiberHydrationContext.js#L229) it will peek ahead to the next DOM node and test if it is the expected node. If so, react-reconciler will delete the unexpected node and continue on by using the second node to hydrate. If the second node does not match the instance then the reconciler gives up and begins inserting DOM nodes without trying to reconcile.\r\n\r\nIn our case, we are server-side rendering the entire #document server-side and re-hydrating at that level. Some 3rd party analytics scripts are injected at the top of <body> before the hydrate call happens, causing the entire application to be injected into the body instead of reconciled with the existing nodes.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem via https://jsfiddle.net or similar (template for React 16: https://jsfiddle.net/Luktwrdm/, template for React 15: https://jsfiddle.net/hmbg7e9w/).**\r\nI can force this to happen in our app by injecting two (or more) empty `script` tags at the top of <body>. I've not been able to reproduce via jsfiddle; unsure what the exact combination of flags are to force this specific code path.\r\n\r\n```\r\ndocument.body.insertBefore(document.createElement('script'), document.body.children[0]);\r\ndocument.body.insertBefore(document.createElement('script'), document.body.children[0]);\r\n```\r\n\r\n**What is the expected behavior?**\r\nIdeally the reconciler would look at all of the sibling nodes to find the matching element.\r\n\r\nA comment in the code at the relevant location says\r\n```\r\n// If we can't hydrate this instance let's try the next one.\r\n// We use this as a heuristic. It's based on intuition and not data so it\r\n// might be flawed or unnecessary.\r\n```\r\n\r\nI hacked together a change to prove out inspecting all sibling elements and that seems to be working with no unintended consequences. I modified\r\n\r\n`nextInstance = getNextHydratableSibling(nextInstance);`\r\nto be\r\n`while (nextInstance = getNextHydratableSibling(nextInstance), nextInstance && !canHydrate(fiber, nextInstance)) {};`\r\n\r\nSo nextInstance will either be the hydratable sibling or it will be null.\r\n\r\nUsing `performance.now()` on my Mac Book Pro, I do not observe this O(1) -> O(n) change to be measurable in my situation.\r\n\r\n```\r\nwith matching DOM: 118-144ms\r\nwith mismatched DOM: 116-172ms\r\nmismatchedDOM & updated function: 116-163ms\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis was introduced with React 16s new hydration approach. (I'll take this over the Invariant 42 full-stop error; thanks for building the new approach!).",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
