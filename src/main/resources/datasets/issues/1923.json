{
  "url": "https://api.github.com/repos/facebook/react/issues/1923",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/1923/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/1923/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/1923/events",
  "html_url": "https://github.com/facebook/react/issues/1923",
  "id": 38654181,
  "node_id": "MDU6SXNzdWUzODY1NDE4MQ==",
  "number": 1923,
  "title": "React.addons.update should return the input object when we replace a value by itself",
  "user": {
    "login": "slorber",
    "id": 749374,
    "node_id": "MDQ6VXNlcjc0OTM3NA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/749374?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/slorber",
    "html_url": "https://github.com/slorber",
    "followers_url": "https://api.github.com/users/slorber/followers",
    "following_url": "https://api.github.com/users/slorber/following{/other_user}",
    "gists_url": "https://api.github.com/users/slorber/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/slorber/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/slorber/subscriptions",
    "organizations_url": "https://api.github.com/users/slorber/orgs",
    "repos_url": "https://api.github.com/users/slorber/repos",
    "events_url": "https://api.github.com/users/slorber/events{/privacy}",
    "received_events_url": "https://api.github.com/users/slorber/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2014-07-24T17:22:38Z",
  "updated_at": "2016-04-01T02:36:15Z",
  "closed_at": "2016-04-01T02:36:15Z",
  "author_association": "CONTRIBUTOR",
  "body": "This code shows the problem\n\n```\nvar root = {\n    prop: \"propValue\",\n    nested: {\n        nestedProp: \"nestedPropValue\"\n    }\n}\n\nvar rootCopy = React.addons.update(root,{\n    nested: { $set: root.nested }\n});\n\nvar rootCopy2 = React.addons.update(root,{\n    nested: { nestedProp : {$set: root.nested} }\n});\n\nconsole.debug(\"root === rootCopy\",root === rootCopy);\nconsole.debug(\"root.prop === rootCopy.prop\",root.prop === rootCopy.prop);\nconsole.debug(\"root.nested === rootCopy.nested\",root.nested === rootCopy.nested);\n\nconsole.debug(\"root === rootCopy2\",root === rootCopy);\nconsole.debug(\"root.prop === rootCopy2.prop\",root.prop === rootCopy2.prop);\nconsole.debug(\"root.nested === rootCopy2.nested\",root.nested === rootCopy2.nested);\n```\n\n```\nroot === rootCopy false app.js:46\nroot.prop === rootCopy.prop true app.js:47\nroot.nested === rootCopy.nested true app.js:48\n\nroot === rootCopy2 false app.js:50\nroot.prop === rootCopy2.prop true app.js:51\nroot.nested === rootCopy2.nested false \n```\n\nI woould expect all these equality to be true.\n\nI think this is the point of immutability/structural sharing to not create useless objects when their inner properties are equally the same.\n\n```\nvar object = {}\nobject = React.addons.update(object, { prop: { $set: propValue} });\nobject = React.addons.update(object, { prop: { $set: propValue} });\n```\n\nOn the 2nd call, it makes sense that the object returned is the object from the arguments.\n\nEnsuring this can help to avoid unexpected behavior in shouldComponentUpdate and prevent some useless renderings that I have encountered (when user clicks twice on the same menu element for exemple)\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
