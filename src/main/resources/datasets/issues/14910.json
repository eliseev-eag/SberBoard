{
  "url": "https://api.github.com/repos/facebook/react/issues/14910",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14910/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14910/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14910/events",
  "html_url": "https://github.com/facebook/react/issues/14910",
  "id": 412786077,
  "node_id": "MDU6SXNzdWU0MTI3ODYwNzc=",
  "number": 14910,
  "title": "The component is not updated when a new state is changed using a callback from useState",
  "user": {
    "login": "Finesse",
    "id": 9006227,
    "node_id": "MDQ6VXNlcjkwMDYyMjc=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9006227?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Finesse",
    "html_url": "https://github.com/Finesse",
    "followers_url": "https://api.github.com/users/Finesse/followers",
    "following_url": "https://api.github.com/users/Finesse/following{/other_user}",
    "gists_url": "https://api.github.com/users/Finesse/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Finesse/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Finesse/subscriptions",
    "organizations_url": "https://api.github.com/users/Finesse/orgs",
    "repos_url": "https://api.github.com/users/Finesse/repos",
    "events_url": "https://api.github.com/users/Finesse/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Finesse/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 40929152,
      "node_id": "MDU6TGFiZWw0MDkyOTE1Mg==",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Duplicate",
      "name": "Resolution: Duplicate",
      "color": "cccccc",
      "default": false
    },
    {
      "id": 40929151,
      "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
      "name": "Type: Bug",
      "color": "b60205",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-02-21T07:35:02Z",
  "updated_at": "2019-02-21T18:44:25Z",
  "closed_at": "2019-02-21T18:44:24Z",
  "author_association": "NONE",
  "body": "This is a bug. I've spent a lot of time trying to localize the bug and have ended with the following minimal example:\r\n\r\n```jsx\r\nimport {useState} from React;\r\n\r\nfunction App() {\r\n  const [imageURL, setImageURL] = useState('https://picsum.photos/1600/1200');\r\n  const [meaninglessValue, setMeaninglessValue] = useState(0);\r\n  \r\n  return (\r\n    <div>\r\n      <p>\r\n        <button onClick={() => setImageURL('https://picsum.photos/1600/1200')}>Set picture 1</button>\r\n        <button onClick={() => setImageURL('https://picsum.photos/1500/1300')}>Set picture 2</button>\r\n        <button onClick={() => setMeaninglessValue(meaninglessValue + 1)}>Change another image prop</button>\r\n      </p>\r\n      <DelayedImage src={imageURL} unused={meaninglessValue} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DelayedImage({src}) {\r\n  const [previousSrc, setPreviousSrc] = useState();\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n  console.log('Image is rendered with', {previousSrc, src, isLoaded});\r\n  \r\n  if (src !== previousSrc) {\r\n    setPreviousSrc(src);\r\n    setIsLoaded(false);\r\n    console.log('Image unloaded');\r\n  }\r\n  \r\n  const handleLoad = () => {\r\n    setIsLoaded(true);\r\n    console.log('Image loaded');\r\n  };\r\n  \r\n  return (\r\n    <img\r\n      src={src}\r\n      alt=\"\"\r\n      onLoad={handleLoad}\r\n      onError={handleLoad}\r\n      style={{\r\n        maxWidth: '100%',\r\n        maxHeight: '80vh',\r\n        opacity: isLoaded ? 1 : 0.2\r\n      }}\r\n     />\r\n  );\r\n}\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n```\r\n\r\n[Live demo](https://codepen.io/TheFinesse/pen/qgGBqj?editors=0010)\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Open the demo\r\n2. Wait until the image is loaded (becomes opaque)\r\n3. Click the \"Set picture 2\" button\r\n4. Wait a bit (while the image is loading)\r\n\r\n**Expected result:**\r\n\r\nThe second image gets opaque after a few seconds (the `DelayedImage` component gets rerendered with the new state).\r\n\r\n**Actual result:**\r\n\r\nThe image stays translucent despite the new state that should make it opaque.\r\n\r\nI reproduced the bug with React 16.8.2 in Safari 12.0.3 and Chrome 72.0.3626.109 on macOS 10.14.3 (didn't try other versions).\r\n\r\n### More details about the example\r\n\r\nThe `DelayedImage` component is an image that gets translucent while being loaded. The information about whether the image is loading or loaded is stored in a state using the `useState` hook. The other state hook is used to check whether the image URL has changed (like in [the FAQ example](https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops)).\r\n\r\nWhen the component is rendered for the first time, it works as expected: it is translucent while the image is loading and opaque after the image is loaded. When the `src` prop is changed (by clicking the \"Set picture 2\" button), the image gets translucent but doesn't get opaque when it's loaded.\r\n\r\nAccording to the console messages, the correct value (`isLoaded === true`) is set to the state but React doesn't rerenders the component. React rerenders the component with the correct state when any other `DelayedImage` props is changed (by clicking the last button or changing a prop using Redux Dev Tools).",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
