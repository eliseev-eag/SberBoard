{
  "url": "https://api.github.com/repos/facebook/react/issues/4341",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/4341/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/4341/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/4341/events",
  "html_url": "https://github.com/facebook/react/issues/4341",
  "id": 94318279,
  "node_id": "MDU6SXNzdWU5NDMxODI3OQ==",
  "number": 4341,
  "title": "Inherited prop className",
  "user": {
    "login": "mjurczyk",
    "id": 9549760,
    "node_id": "MDQ6VXNlcjk1NDk3NjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/9549760?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mjurczyk",
    "html_url": "https://github.com/mjurczyk",
    "followers_url": "https://api.github.com/users/mjurczyk/followers",
    "following_url": "https://api.github.com/users/mjurczyk/following{/other_user}",
    "gists_url": "https://api.github.com/users/mjurczyk/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mjurczyk/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mjurczyk/subscriptions",
    "organizations_url": "https://api.github.com/users/mjurczyk/orgs",
    "repos_url": "https://api.github.com/users/mjurczyk/repos",
    "events_url": "https://api.github.com/users/mjurczyk/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mjurczyk/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2015-07-10T14:31:50Z",
  "updated_at": "2015-07-10T17:50:42Z",
  "closed_at": "2015-07-10T17:50:42Z",
  "author_association": "NONE",
  "body": "Hey,\n\nwe have been recently using React (+Flux) in our project and we approached a quite intriguing problem. Following the WebComponents-like approach, we try to create a bunch of reusable components with similar behaviours. The problem arises when we want to put the same component, with the same 'logic', on a different view, with a different design (that be -> a different CSS class attached). We need to create the same component with different set of class' names (+usually a few default ones) and right now it seems to be only possible by passing props like `classes` or `inheritedCls`.\n\n**_tl;dr;**_ It would be really cool if React passed the `className` from the component definition to it's actual DOM elements. That would save us creating and passing a `classes` props, ex.:\n\n**_Initialization in a parent component**_:\n\n``` js\nclass ParentComponentAlpha {\n    render () {\n      return (<MyComponent className={'contextual-styling-1'} />);\n    }\n};\n\nclass ParentComponentBeta {\n    render () {\n      return (<MyComponent className={'contextual-styling-2'} />);\n    }\n};\n```\n\n**_Current way of appending 'inherited' classes**_:\n\n``` js\nclass MyComponent {\n  propTypes: {\n    classes: React.PropTypes.arrayOf(React.propTypes.string)\n  },\n\n  render () {\n    var innerClasses = [\n      'cmp--default',\n      'cmp--mobile'\n    ];  \n\n    // Renders <div role=\"my-cmp\" class=\"cmp--default cmp--mobile contextual-styling-.\"> ... </div>\n    return (\n      <div role={'my-cmp'} className={innerClasses.concat([...this.props.classes])}>\n        Hello world\n      </div>\n    );\n  }\n};\n```\n\n**_Nicer and simpler way:**_\n\n``` js\nclass MyComponent {\n  render () {\n    var innerClasses = [\n      'cmp--default',\n      'cmp--mobile'\n    ];  \n\n    // Still renders <div role=\"my-cmp\" class=\"cmp--default cmp--mobile contextual-styling-.\"> ... </div>\n    // Includes inner classes and implicitly adds the inherited class' names from ParentComponent\n    return (\n      <div role={'my-cmp'} className={innerClasses}>\n        Hello world\n      </div>\n    );\n  }\n};\n```\n\nI would love to hear your opinions on that. We needed such functionality in the project and ended up passing the inherited class' names by props, which feels a little inelegant.\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
