{
  "url": "https://api.github.com/repos/facebook/react/issues/17044",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/17044/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/17044/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/17044/events",
  "html_url": "https://github.com/facebook/react/issues/17044",
  "id": 504190491,
  "node_id": "MDU6SXNzdWU1MDQxOTA0OTE=",
  "number": 17044,
  "title": "[Feature Request] Additional lifecycle hooks (useDidMountEffect & useWillUnmountEffect) working just like class methods",
  "user": {
    "login": "ku8ar",
    "id": 16975059,
    "node_id": "MDQ6VXNlcjE2OTc1MDU5",
    "avatar_url": "https://avatars1.githubusercontent.com/u/16975059?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ku8ar",
    "html_url": "https://github.com/ku8ar",
    "followers_url": "https://api.github.com/users/ku8ar/followers",
    "following_url": "https://api.github.com/users/ku8ar/following{/other_user}",
    "gists_url": "https://api.github.com/users/ku8ar/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ku8ar/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ku8ar/subscriptions",
    "organizations_url": "https://api.github.com/users/ku8ar/orgs",
    "repos_url": "https://api.github.com/users/ku8ar/repos",
    "events_url": "https://api.github.com/users/ku8ar/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ku8ar/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-10-08T17:57:35Z",
  "updated_at": "2019-10-09T18:04:10Z",
  "closed_at": "2019-10-09T18:04:09Z",
  "author_association": "CONTRIBUTOR",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nWhile refactoring the code to React Hooks, I came across several \"problems\" that negatively affect my work. Working with Hooks should be a pleasure, but sometimes it's very hard work.\r\n\r\nLet's start with the simplest example: `componentDidMount`. This most popular method in the component's lifecycle has no equivalent in Hooks! Of course, there is `useEffect` with which we can build similar \"effect\", but its syntax is NOT INTUITIVE.\r\n\r\nLet's look:\r\n\r\n```javascript\r\n// good old code\r\nclass App extends Component {\r\n  componentDidMount() { // very human name\r\n    console.log('mounted!')\r\n  }\r\n  render() {\r\n    return <View />\r\n  }\r\n}\r\n\r\n// new API\r\nconst App = () => {\r\n  useEffect(\r\n    () => {\r\n      console.log('mounted!')\r\n    },\r\n    [] // ordinary human looks here and thinks: \"square? wtf?\"\r\n  )\r\n  return <View />\r\n}\r\n```\r\n\r\nPersonally, for me, every empty array, or even unnecessary brackets, are just information noise. But `useDidMountEffect` can be written very easily...\r\n```javascript\r\nconst useDidMountEffect = callback => useEffect(() => { callback() }, [])\r\n```\r\n...so, let's get to the second case: `componentWillUnmount`.\r\n\r\nReact documentation mentions that we can use `useEffect` to call a function when a component is unmounted:\r\n> Cleaning up an effect\r\n> The clean-up function runs before the component is removed from the UI...\r\nhttps://reactjs.org/docs/hooks-reference.html#useeffect\r\n\r\nSo let's check it out:\r\n\r\n```javascript\r\n// again good old code for \"contrast\"\r\nclass App extends Component {\r\n  componentWillUnmount() { // yummie! this name is so sweet and readable...\r\n    console.log('unmounted!')\r\n  }\r\n  render() {\r\n    return <View />\r\n  }\r\n}\r\n\r\n// new API\r\nconst App = () => {\r\n  useEffect(\r\n    () => () => { // circle, arrow, circle, arrow, bracket and done: we can finally write our logic...\r\n      console.log('unmounted!')\r\n    },\r\n    [] // Square again? React is special square friendly library or something?\r\n  )\r\n  return <View />\r\n}\r\n```\r\n\r\nBut as in the first example, here we can also write a custom hook:\r\n```javascript\r\nconst useWillUnmountEffect = callback => useEffect(() => () => callback(), [])\r\n```\r\nEverything simple easy and fun? It seems so. **But not completely.** This custom hook forced me to write this issue, because the above code will not work at some specific moment. Probably most React Masters already guess when it won't work.\r\n\r\nWhere is the problem? Let's see:\r\n```javascript\r\nconst App = () => {\r\n  const [value, setValue] = useState('nie')\r\n  useEffect(\r\n    () => () => console.log('React Hooks: ', value),\r\n    []\r\n  )\r\n  return <TextInput value={value} onChangeText={setValue} />\r\n}\r\n```\r\nAnd now try to initiate the following actions on the above code:\r\n1. mount the component\r\n2. enter the value `works like charm!` to input\r\n3. unmount the component\r\n4. Check the console and find out the result is `React hooks: nie` instead `React hooks: works like charm!`\r\n\r\nWhat happened here? Of course, reference to the first value instead ACTUAL value...\r\n\r\n\r\nSo how can we fix this bug? Very easy xD\r\n\r\n```javascript\r\n// using hooks...\r\nconst App = () => {\r\n  const [value, setValue] = useState('')\r\n  const actualValue = React.useRef(value)\r\n  useEffect(\r\n    () => {\r\n      actualValue.current = value\r\n    },\r\n    [value]\r\n  )\r\n  useEffect(\r\n    () => () => console.log(actualValue.current),\r\n    []\r\n  )\r\n  return <TextInput value={value} onChangeText={setValue} />\r\n}\r\n\r\n// using classic React...\r\nclass App extends Component {\r\n  state = {\r\n    value: ''\r\n  }\r\n  setValue = value => this.setState({value})\r\n  componentWillUnmount() {\r\n    console.log(this.state.value)\r\n  }\r\n  render() {\r\n    return <TextInput value={this.state.value} onChangeText={this.setValue} />\r\n  }\r\n}\r\n```\r\nYep. This is how we were able to implement logging in the console of the last value of the given component.\r\n\r\n**And now the question: which version is more readable for a beginner? This with weird refs, arrows everwhere and squares, or with small and elegant class?**\r\nPersonally, I think programming should be easy. Or at least strive for simplicity. And the class implementation (old) is much easier to read and understand logic.\r\n\r\n**What is the expected behavior?**\r\n\r\nNew hooks:\r\n\r\n```javascript\r\nconst App = () => {\r\n  React.useDidMountEffect(() => console.log('Mounted!'))\r\n\r\n  React.useWillUnmountEffect(() => console.log('Unmounted!'))\r\n\r\n  return <View />\r\n}\r\n```\r\nWithout any deps. In addition, `useWillUnmountEffect` get the ACTUAL context to use props or state in it.\r\n\r\nAnd now defense. Someone can say: if you write your own custom hooks that behave the same as the proposed solution, why not just add them to your project and forget about the case? Well:\r\n* Currently, React contains a hook, which is a syntax sugar of another hook. Of course, we are talking about useState (which is an ordinary wrapper on useReducer). `useState` is also a hook that is a replacement for the `state` in class, so proposed hooks are analogy to `useState`.\r\n* Writing a reusable `useWillUnmountEffect` hook is very difficult (probably even impossible)\r\n* Programmers typically write the code as follows: `useEffect(callback, [])`, which causes each rerender to do shallow compare (`Object.is`) on dynamically created empty arrays. The proposed hooks will be more efficient.\r\n* An additional, readable function in the API reduces the information noise created in the application code.\r\n* Programming is supposed to be fun\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n\"react\": \"^16.8.0\"",
  "closed_by": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  }
}
