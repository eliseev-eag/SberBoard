{
  "url": "https://api.github.com/repos/facebook/react/issues/12720",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12720/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12720/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12720/events",
  "html_url": "https://github.com/facebook/react/issues/12720",
  "id": 318929501,
  "node_id": "MDU6SXNzdWUzMTg5Mjk1MDE=",
  "number": 12720,
  "title": "Consuming Context with a HOC: when root component with provider is rendered multiple times, how to identify correct context to consume at child component level",
  "user": {
    "login": "rtrg",
    "id": 22656114,
    "node_id": "MDQ6VXNlcjIyNjU2MTE0",
    "avatar_url": "https://avatars0.githubusercontent.com/u/22656114?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rtrg",
    "html_url": "https://github.com/rtrg",
    "followers_url": "https://api.github.com/users/rtrg/followers",
    "following_url": "https://api.github.com/users/rtrg/following{/other_user}",
    "gists_url": "https://api.github.com/users/rtrg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rtrg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rtrg/subscriptions",
    "organizations_url": "https://api.github.com/users/rtrg/orgs",
    "repos_url": "https://api.github.com/users/rtrg/repos",
    "events_url": "https://api.github.com/users/rtrg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rtrg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-04-30T15:21:21Z",
  "updated_at": "2018-11-20T21:51:49Z",
  "closed_at": "2018-04-30T16:27:16Z",
  "author_association": "NONE",
  "body": "I am planning to use react context API for my library which exposes a root component `R.js`.\r\n\r\n**RContext.js**\r\n```\r\nexport default const RContext = React.createContext({text: 'Hi'});\r\n```\r\n\r\n**getRContext.js** (HOC)\r\n```\r\nimport RContext from './RContext';\r\n\r\nexport function getRContext(Comp) =>\r\n     class {\r\n         ...\r\n         render() {\r\n             <RContext .Consumer>\r\n                   (contextValue) => <Comp  text={contextValue.text} />\r\n             </RContext .Consumer>\r\n         }\r\n     }\r\n````\r\n\r\n**R.js**\r\n```\r\nimport RContext from './RContext';\r\n\r\nexport default class R {\r\n    ...\r\n    render() {\r\n        <RContext.Provider value={{text: this.props.text}}>\r\n             <C {...this.props}/>\r\n        </RContext.Provider>\r\n    }\r\n}\r\n```\r\n\r\n**C.js**\r\n```\r\nimport getRContext from './getRContext';\r\nclass C {\r\n    ...\r\n    render() {\r\n        <div>\r\n             {this.props.text}\r\n        </div>\r\n    }\r\n}\r\nexport default getRContext(C);\r\n```\r\n\r\n**The problem is, in a single app, multiple Root components(`R.js`) can be rendered, since only single context is being used, both will consume same value**\r\n\r\n**App.js**\r\n```\r\nimport R from './R';\r\nclass App {\r\n    ...\r\n    render() {\r\n        <R text={'Welcome'}/>\r\n         .....\r\n        <R text={'End'}/>\r\n    }\r\n}\r\n```\r\n\r\n**I can create multiple contexts like below, but it requires passing some identifier from root component to all children, so that corresponding identifier can be used to consume correct context**\r\n\r\n**RContext.js**\r\n```\r\nconst idToContext = {};\r\nexport default getContext(id) {\r\n      if(idToContext.id) {return idToContext.id}\r\n      idToContext.id = React.createContext({text: 'Hi'});\r\n}\r\n```\r\n\r\n**getRContext.js**\r\n```\r\nimport Context from './RContext';\r\n\r\nexport function getRContext(Comp) =>\r\n     class {\r\n         ...\r\n         render() {\r\n              const RContext = Context(this.props.id);\r\n             <RContext .Consumer>\r\n                   (contextValue) => <Comp  text={contextValue.text} />\r\n             </RContext .Consumer>\r\n         }\r\n     }\r\n````\r\n\r\nQuestions:\r\n1) Is there a way to pass certain props(can assume these props won't effect life cycle, in this case id for example) to all children(not only immediate)?\r\n\r\n2) Should I create a idContext HOC and wrap all components to consume id and then consume RContext based on id?\r\n\r\n3) Please suggest any other better approaches if possible, Thanks in advance!\r\n",
  "closed_by": {
    "login": "rtrg",
    "id": 22656114,
    "node_id": "MDQ6VXNlcjIyNjU2MTE0",
    "avatar_url": "https://avatars0.githubusercontent.com/u/22656114?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rtrg",
    "html_url": "https://github.com/rtrg",
    "followers_url": "https://api.github.com/users/rtrg/followers",
    "following_url": "https://api.github.com/users/rtrg/following{/other_user}",
    "gists_url": "https://api.github.com/users/rtrg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rtrg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rtrg/subscriptions",
    "organizations_url": "https://api.github.com/users/rtrg/orgs",
    "repos_url": "https://api.github.com/users/rtrg/repos",
    "events_url": "https://api.github.com/users/rtrg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rtrg/received_events",
    "type": "User",
    "site_admin": false
  }
}
