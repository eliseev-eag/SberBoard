{
  "url": "https://api.github.com/repos/facebook/react/issues/16317",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16317/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16317/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16317/events",
  "html_url": "https://github.com/facebook/react/issues/16317",
  "id": 478550295,
  "node_id": "MDU6SXNzdWU0Nzg1NTAyOTU=",
  "number": 16317,
  "title": "[Feature Request] Finish/normalize Portal API",
  "user": {
    "login": "devknoll",
    "id": 1477230,
    "node_id": "MDQ6VXNlcjE0NzcyMzA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/1477230?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/devknoll",
    "html_url": "https://github.com/devknoll",
    "followers_url": "https://api.github.com/users/devknoll/followers",
    "following_url": "https://api.github.com/users/devknoll/following{/other_user}",
    "gists_url": "https://api.github.com/users/devknoll/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/devknoll/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/devknoll/subscriptions",
    "organizations_url": "https://api.github.com/users/devknoll/orgs",
    "repos_url": "https://api.github.com/users/devknoll/repos",
    "events_url": "https://api.github.com/users/devknoll/events{/privacy}",
    "received_events_url": "https://api.github.com/users/devknoll/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-08-08T15:43:18Z",
  "updated_at": "2019-08-09T17:45:56Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature\r\n\r\n**What is the expected behavior?**\r\n\r\nPortals are in a weird state. The core `react` knows about them but you can only create them from other libs (e.g. `ReactDOM`). You have to branch your code because they can’t be server-side rendered. And so on.\r\n\r\nThis is just a pre-RFC to brainstorm ways that Portals can become first-class citizens:\r\n\r\n* Extend `React.createRef()` to allow an optional renderer-specific argument (e.g. the DOM element), matching `useRef()`\r\n* Add `React.createPortal(child, ref)` (*note the use of `ref` rather than a e.g. a direct DOM element*)\r\n* Deprecate `ReactDOM.createPortal()`\r\n\r\nNow with some thought into the structure of your app with modals, they could be e.g. server-side rendered with:\r\n\r\n```\r\nfunction App(props) {\r\n  const modal = useRef(null)\r\n  return (\r\n    <div>\r\n      <ModalContext.Provider value={modal}>\r\n        <div>{props.content}</div>\r\n      </ModalContext.Provider>\r\n      <div ref={modal} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Modal(props) {\r\n  const modal = useContext(ModalContext)\r\n  return React.createPortal(\r\n    props.children,\r\n    modal,\r\n  )\r\n}\r\n\r\n// Somewhere in {props.content} tree...\r\nreturn (\r\n  <>\r\n    {visible && (\r\n      <Modal>\r\n        Hello, World!\r\n      </Modal>\r\n    )}\r\n  </>\r\n)\r\n```\r\n\r\nAfter `ReactDOM.createPortal(...)` is deprecated, legacy web or those with no need to SSR portals can simply upgrade with:\r\n\r\n```\r\nthis.el = React.createRef(document.createElement('div'))\r\n```\r\n\r\nfor the same behavior.\r\n\r\nAs an initial version, React can error if `ref.current` is null when it goes to mount the portal. Some sort of dirty flag could be considered separately if proven necessary, but with the pattern proposed above, it shouldn’t be necessary as the portal host would *always* be mounted first as a natural consequence of how React works.",
  "closed_by": null
}
