{
  "url": "https://api.github.com/repos/facebook/react/issues/12396",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12396/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12396/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12396/events",
  "html_url": "https://github.com/facebook/react/issues/12396",
  "id": 306214649,
  "node_id": "MDU6SXNzdWUzMDYyMTQ2NDk=",
  "number": 12396,
  "title": "PROPOSAL: Allow void elements to have children with override property",
  "user": {
    "login": "dxprog",
    "id": 950392,
    "node_id": "MDQ6VXNlcjk1MDM5Mg==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/950392?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dxprog",
    "html_url": "https://github.com/dxprog",
    "followers_url": "https://api.github.com/users/dxprog/followers",
    "following_url": "https://api.github.com/users/dxprog/following{/other_user}",
    "gists_url": "https://api.github.com/users/dxprog/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dxprog/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dxprog/subscriptions",
    "organizations_url": "https://api.github.com/users/dxprog/orgs",
    "repos_url": "https://api.github.com/users/dxprog/repos",
    "events_url": "https://api.github.com/users/dxprog/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dxprog/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-03-18T05:27:16Z",
  "updated_at": "2018-03-18T19:14:41Z",
  "closed_at": "2018-03-18T17:48:04Z",
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen creating one of the whitelisted void elements, an error is thrown:\r\n\r\n```javascript\r\n<link>https://reactjs.org/blog/</link>\r\n<link dangerouslySetInnerHTML={{ __html: 'https://reactjs.org/blog/' }} />\r\nReact.createElement('link', null, 'https://reactjs.org/blog/');\r\n\r\n// Invariant Violation: link is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.\r\n```\r\n\r\nThis is a correct assumption to make for 100% of all browser front-ends.\r\n\r\n**What is the proposed new behavior?**\r\n\r\nIn the exceptional case of generating SGML-like code (likely server rendered), it may become necessary to override the default behaviour of these whitelisted HTML void elements. For example, RSS uses the `link` tag to denote the site's root URL and the URL for individual `item` entries. The actual value is a `TextNode` of the `link` tag and will cause the above error when trying to generate via a React component.\r\n\r\nMy proposed solution would add a new, lengthily named property that bypasses the void element check and allows for these items to be rendered with `children`/`dangerouslySetInnerHTML`. Example implementation:\r\n\r\n```javascript\r\n<link allowInvalidVoidElementChildren={true}>https://reactjs.org/blog/</link>\r\n<link allowInvalidVoidElementChildren={true} dangerouslySetInnerHTML={{ __html: 'https://reactjs.org/blog/' }} />\r\nReact.createElement('link', { allowInvalidVoidElementChildren: true }, 'https://reactjs.org/blog/');\r\n\r\n// <link>https://reactjs.org/blog/</link>\r\n```\r\n\r\nMuch in the vein of `dangerouslySetInnerHTML`, the property is named such that it:\r\n\r\n- Likely avoids name collisions from any existing consumer code\r\n- Makes it explicit that setting this flag causes non-standard and potentially undesirable effects for most usual use cases\r\n\r\nThis feature should be implemented in a way that all existing unit tests pass without alteration. New unit tests would be added to ensure that the new functionality works as intended.\r\n\r\nThe following files have been identified as the places to implement this feature:\r\n\r\n- `packages/react-dom/src/shared/assertValidProps.js`\r\n- `packages/react-dom/src/__tests__/ReactDOMComponent-test.js`\r\n- `packages/react-dom/src/shared/DOMProperty.js`\r\n\r\n**Did this work in previous versions of React?**\r\n\r\nIf this worked in previous versions of React, it was likely a bug.\r\n",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
