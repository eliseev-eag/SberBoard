{
  "url": "https://api.github.com/repos/facebook/react/issues/15791",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15791/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15791/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15791/events",
  "html_url": "https://github.com/facebook/react/pull/15791",
  "id": 450785367,
  "node_id": "MDExOlB1bGxSZXF1ZXN0Mjg0MDM1Nzc1",
  "number": 15791,
  "title": "[Flare] Add InteractOutside event responder surface",
  "user": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    },
    {
      "id": 1296748300,
      "node_id": "MDU6TGFiZWwxMjk2NzQ4MzAw",
      "url": "https://api.github.com/repos/facebook/react/labels/React%20Flare",
      "name": "React Flare",
      "color": "63f2ff",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 39,
  "created_at": "2019-05-31T12:54:43Z",
  "updated_at": "2019-06-16T01:31:38Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/15791",
    "html_url": "https://github.com/facebook/react/pull/15791",
    "diff_url": "https://github.com/facebook/react/pull/15791.diff",
    "patch_url": "https://github.com/facebook/react/pull/15791.patch"
  },
  "body": "When testing Flare internally, we ran into quite a few cases where functionality was needed to detect press events that occured _outside_ of a pressable target region. To tackle this effectively, we deemed a new event responder surface might be ideal. This PR adds the `InteractOutside` event surface, that detects presses that occur outside of the children within the event responder. Notably these are the current supported features for `InteractOutside`:\r\n\r\n- `onInteractOutside`\r\n- `interactOnScroll` (defaults to `false`)\r\n- `interactOnBlur` (defaults to `true`)\r\n- `disabled`\r\n\r\nHere's an example of how this might work:\r\n\r\n```jsx\r\nfunction Dialog({\r\n  children,\r\n  closeDialog,\r\n  styles,\r\n  autoFocus,\r\nhasOverlay,\r\n}) {\r\n  // It both works with or without an overlay!\r\n  // No invisible overlay hacks needed!\r\n  return (\r\n    <>\r\n      { hasOverlay && <DialogOverlay styles={styles} /> }\r\n      <InteractOutside onInteractOutside={closeDialog} interactOnBlur={false}>\r\n        <FocusScope contain={true} autoFocus={autoFocus}>\r\n          <DialogContainer onEscapeKey={closeDialog}>\r\n            <DialogHeader onExit={closeDialog} />\r\n            {children}\r\n          </DialogContainer>\r\n        </FocusScope>\r\n      </InteractOutside>\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\nInteraction events that start within the `InteractOutside` responder are handled so they can't leak to outside the responder. Furthermore, interaction events that originate from outside the responder will not fire `onInteractOutside` if they move to within the responder after. This implementation should account for portals, something no other implementation seems to properly do â€“ so there's a definite benefit here. `InteractOutside` can also support many children, so it's not constrained to having a single child.",
  "closed_by": null
}
