{
  "url": "https://api.github.com/repos/facebook/react/issues/16725",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16725/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16725/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16725/events",
  "html_url": "https://github.com/facebook/react/pull/16725",
  "id": 491495003,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MzE1ODUwNzc1",
  "number": 16725,
  "title": "Event Replaying",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2019-09-10T07:17:39Z",
  "updated_at": "2019-10-04T02:24:02Z",
  "closed_at": "2019-09-23T18:21:11Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/16725",
    "html_url": "https://github.com/facebook/react/pull/16725",
    "diff_url": "https://github.com/facebook/react/pull/16725.diff",
    "patch_url": "https://github.com/facebook/react/pull/16725.patch"
  },
  "body": "There's a gap between when we call `createRoot` or `createSyncRoot` and when we actually commit the hydrated tree. E.g. it can take a while before the user calls `root.render()`. In batched mode, there's a gap before the scheduled callback actually starts rendering. In concurrent mode, there's a gap every time we yield. Additionally, for Suspense boundaries, we use Partial Hydration and there's a gap between rendering each new level.\r\n\r\nIn between these gaps, there can be events issued on dehydrated DOM nodes that are currently dropped. This adds the basic infra for replaying those events.\r\n\r\nIt is not behind a feature flag or any mode because it should not be possible to get into this mode in the legacy `ReactDOM.hydrate(...)` API since it doesn't leave any gaps. So if there is a reason this has any behavior changes, that's a bug and we'd like to find it.\r\n\r\n## Principle\r\n\r\nThe constraint here is that we can't wait for the actual components to load/render before showing the server rendered HTML. We also can't load much in terms of even the event system. We're limited to as much script we can reasonably inline into the HTML page which isn't much.\r\n\r\nSome interactions don't make sense to do any other way than handling once we do have the code. Such a click on a rich UI. These needs to be prioritized.\r\n\r\nOther interactions can't be replayed later. They have to be dealt with by the browser right now. Such as text input.\r\n\r\nMany small interactions such as hovering or scrolling a bit also is fairly harmless.\r\n\r\nSome events are not really user driven and can be inferred by a hydrating component (such as image \"load\").\r\n\r\nThere are cases where the dehydrated tree needs to be dropped and we can no longer replay that event. Such as if it gets deleted by a previous event or forced client-rendered. We could use this mechanism to force hydration even synchronously such as before invoking a discrete event. However, the issue with doing that is that there are so many discrete events that happen just by navigating around such as keypresses or touch to scroll. This would also not work before the code has loaded so we'd have to always wait to show the SSR content until the code has loaded. This wouldn't work with the plain HTML option.\r\n\r\nMy hypothesis here is that we can get far by letting the browser do most of what it does by default. Server rendered components would know to be somewhat resilient to this. Then we simply replay those events as \"passive\" events later to let JS observed what happened. This inherently is a somewhat degrated experience.\r\n\r\n## Event Types\r\n\r\nI've categorized events as \"discrete\", \"continuous\" or \"other\".\r\n\r\nThe \"discrete\" category are similar to Discrete priority events. It's events that needs to be replayed in the order they were issued and each one needs to be replayed.\r\n\r\nThe \"continuous\" category are things like mouseover, focus, selectionchange. It's expected that there are a lot of these while the user is simply navigating the page. However, the previous ones are not really relevant and can be collapsed. Only the last state for each type needs to be replayed. There's only one \"hover target\" and one \"active element\" once we hydrate. The intermediate steps are not relevant.\r\n\r\nThe \"other\" category don't need to be replayed. Either because it can be replayed by the Host component hydrating itself or it's not a critical event.\r\n\r\n## In this PR:\r\n\r\n- [x] Replay continuous events.\r\n- [x] Listen to all replayable events eagerly when we call createRoot.\r\n- [x] Tests\r\n\r\n## Follow up PRs:\r\n\r\n- [ ] Avoid attaching active listeners eagerly in Flare.\r\n- [ ] Expose callback when an event doesn't get a target during replay. I.e. it's \"dropped\".\r\n- [ ] Don't replay events if `beforeunload` fires. This means a link or form successfully navigated. This avoids double side-effects by the browser navigation and JS both triggering.\r\n- [ ] Allow grandfathered events to be passed to `ReactDOM.createRoot(..., {replayEvents: ...})`. This allows an early light script to track events that happened before even React loaded onto the page.\r\n- [x] Increase priority of suspense boundaries that are blocked on for discrete updates to User Blocking priority. (All boundaries or just the first event?) This gives us \"selective hydration\".\r\n   - [x] We have an option to also attempt at sync priority which could allow `preventDefault` behavior *if* that succeeds. This is useful for handling links with JS.\r\n- [x] Increase priority of suspense boundaries that are blocked on for continuous updates to Low priority.\r\n- [x] Add API such as `ReactDOM.hydrate(node)` to increase the priority of that boundary to Normal pri or whatever scheduler priority context we're running in.\r\n- [ ] Timeout boundary if it takes too long to hydrate.\r\n\r\nIn future PRs we can improve the actual replaying mechanism based on special cases. I'm sure there's a long tail.\r\n\r\nIn particular the integration with Flare has some flaws right now. We can also evaluate having Flare replaying happen at other levels such as in the synthetic layer.",
  "closed_by": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  }
}
