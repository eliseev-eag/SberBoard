{
  "url": "https://api.github.com/repos/facebook/react/issues/13739",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13739/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13739/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13739/events",
  "html_url": "https://github.com/facebook/react/issues/13739",
  "id": 364268746,
  "node_id": "MDU6SXNzdWUzNjQyNjg3NDY=",
  "number": 13739,
  "title": "React Context value propagation performance ",
  "user": {
    "login": "alexreardon",
    "id": 2182637,
    "node_id": "MDQ6VXNlcjIxODI2Mzc=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/2182637?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alexreardon",
    "html_url": "https://github.com/alexreardon",
    "followers_url": "https://api.github.com/users/alexreardon/followers",
    "following_url": "https://api.github.com/users/alexreardon/following{/other_user}",
    "gists_url": "https://api.github.com/users/alexreardon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alexreardon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alexreardon/subscriptions",
    "organizations_url": "https://api.github.com/users/alexreardon/orgs",
    "repos_url": "https://api.github.com/users/alexreardon/repos",
    "events_url": "https://api.github.com/users/alexreardon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alexreardon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710722093,
      "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
      "name": "Type: Needs Investigation",
      "color": "fbca04",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 32,
  "created_at": "2018-09-27T01:16:24Z",
  "updated_at": "2019-08-15T07:20:33Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "Hi there!\r\n\r\nI have observed a performance issue with context providers and value updates. I have spoken with @gaearon with this on twitter, so he will have a bit more context\r\n\r\nLet's say you have a provider:\r\n\r\n```js\r\nconst CounterContext = React.createContext(1);\r\nconst Provider = ContextContext.Provider\r\n```\r\n\r\nAnd you update the value to the provider\r\n\r\n```js\r\nrender() {\r\n  return (\r\n    return <Provider value={this.state.value}>{this.props.children}</Provider>\r\n  )\r\n}\r\n```\r\n\r\nAll good so far.\r\n\r\nLet's say you want to pass this value down the tree, but for performance reasons you do not want to render the tree. The only components you want to render are your consumer components (in our case `CounterContext.Consumer`)\r\n\r\nA naive way would be to do something like this:\r\n\r\n```js\r\nclass Blocker extends React.Component {\r\n  shouldComponentUpdate() {\r\n    return false;\r\n  }\r\n  render() {\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// ...\r\n\r\nrender() {\r\n  return (\r\n    <Provider value={this.state.value}>\r\n\t <Blocker>\r\n          {this.props.children}\r\n     </Blocker>\r\n    </Provider>\r\n  )\r\n}\r\n```\r\n\r\nEven though no components in the tree are rendered except for the consumers, the update itself is very expensive. I suspect that the tree walking algorithm takes a while to run.\r\n\r\n## Standalone example\r\n\r\nhttps://codesandbox.io/s/61jnr811kr\r\n\r\nThis example has about a 20-30ms render time for a simple counter update. In a production app with a list of 500 nodes (~500 * 10 components, 5000 components) we were looking at update times similar to that of rendering the tree (150ms+)\r\n\r\n## A bit more context\r\n\r\nI was trying to replace `react-redux` with a root `StateProvider` that would create a subscription to a store and pass the latest state into the context. The consumers would then pick up this update, run a selector, and re-render if the result value had changed. I had this all working in `react-beautiful-dnd` but I found the updates through the context itself was too slow for usage (You can see the relevant files [here](https://github.com/atlassian/react-beautiful-dnd/tree/state-provider/src/view/state-provider) and [here](https://github.com/atlassian/react-beautiful-dnd/blob/state-provider/src/view/draggable/context-draggable.js))",
  "closed_by": null
}
