{
  "url": "https://api.github.com/repos/facebook/react/issues/16555",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16555/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16555/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16555/events",
  "html_url": "https://github.com/facebook/react/pull/16555",
  "id": 484546823,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MzEwNDAwMzUz",
  "number": 16555,
  "title": "Add trusted types to react on server side",
  "user": {
    "login": "Siegrift",
    "id": 22679154,
    "node_id": "MDQ6VXNlcjIyNjc5MTU0",
    "avatar_url": "https://avatars0.githubusercontent.com/u/22679154?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Siegrift",
    "html_url": "https://github.com/Siegrift",
    "followers_url": "https://api.github.com/users/Siegrift/followers",
    "following_url": "https://api.github.com/users/Siegrift/following{/other_user}",
    "gists_url": "https://api.github.com/users/Siegrift/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Siegrift/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Siegrift/subscriptions",
    "organizations_url": "https://api.github.com/users/Siegrift/orgs",
    "repos_url": "https://api.github.com/users/Siegrift/repos",
    "events_url": "https://api.github.com/users/Siegrift/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Siegrift/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-08-23T14:01:19Z",
  "updated_at": "2019-09-12T13:09:08Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/16555",
    "html_url": "https://github.com/facebook/react/pull/16555",
    "diff_url": "https://github.com/facebook/react/pull/16555.diff",
    "patch_url": "https://github.com/facebook/react/pull/16555.patch"
  },
  "body": "## Trusted Types\r\n[Trusted Types](https://github.com/WICG/trusted-types) ([spec](https://wicg.github.io/trusted-types/dist/spec/), [introductory article](https://developers.google.com/web/updates/2019/02/trusted-types)) is a new experimental DOM API implemented within the WICG , with a working [Chrome implementation](https://www.chromestatus.com/feature/5650088592408576).\r\n\r\nThe API creates a few new objects available on the global object in the browser, like most other web APIs ([impl in TS](https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts) and in [Closure compiler](https://github.com/WICG/trusted-types/blob/master/externs/externs.js)).\r\n\r\nUnder certain conditions, controlled by a HTTP header (analogous to Content-Security-Policy behavior), the API can enable the enforcement - then it changes the signature of several DOM API functions and property setters, such that they accept specific object types, and reject strings. Colloquially, DOM API becomes strongly typed.\r\n\r\nFor example, with Trusted Types Element.innerHTML property setter accepts a TrustedHTML object.\r\n\r\nTrusted Type objects stringify to their inner value. This API shape is a deliberate choice that enables existing web applications and libraries to gradually migrate from strings to Trusted Types without breaking functionality. In our example, it makes it possible to write the following:\r\n\r\n```javascript\r\nconst policy = TrustedTypes.createPolicy('foo', { \r\n  createHTML: (s) => { /* some validation*/; return s} \r\n});\r\n\r\nconst trustedHTML = policy.createHTML('bar');\r\nanElement.innerHTML = trustedHTML\r\n\r\nanElement.innerHTML === 'bar'\r\n```\r\n\r\nThe above code works regardless if the Trusted Types enforcement is enabled or not.\r\n\r\nReading from the DOM is unaffected, so Element.innerHTML getter returns a string. That's for practical reasons -- web applications read from DOM more often than they write to it, and only writing exposes the application to DOM XSS risks. Typing only the setters allows us to secure web applications with minimal code changes.\r\n\r\n## Adding Trusted Types to React for server side\r\nUnfortunately, there are no Trusted Types (TT) on server side. However, it’s really easy to introduce a reflected xss attack via server side rendering. Markup rendered on server side is rendered to string (without any DOM emulation) and returned as a response from the server and there is no way TT can prevent this attack. This creates inconsistency when rendering on client and server side (client side would fail with TT violation), which shouldn’t happen. Also, if application uses hot reloading, you will get a TT error after each reload (because React templates are re-rendered to DOM, this time on client).\r\n\r\nThis PR enables applications to use Trusted Types on server side. Functions inside [ReactDOMNodeStreamRenderer.js](https://github.com/facebook/react/blob/fc807720780962729df2ad1b0f53258603c020c7/packages/react-dom/src/server/ReactDOMStringRenderer.js) and [ReactDOMStringRenderer.js](https://github.com/facebook/react/blob/fc807720780962729df2ad1b0f53258603c020c7/packages/react-dom/src/server/ReactDOMNodeStreamRenderer.js) in react-dom/server package now accept optional third parameter with [trusted types polyfill implementation](https://github.com/WICG/trusted-types). If TT are provided, they are enforced, **otherwise no behavioral change is made**. If TT are enforced, we check whether the values are trusted before creating the markup from them and throw an error otherwise.   \r\n\r\n## Reference\r\n* [Add trusted types to react on client side](https://github.com/facebook/react/pull/16157)\r\n",
  "closed_by": null
}
