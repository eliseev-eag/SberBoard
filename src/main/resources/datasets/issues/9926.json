{
  "url": "https://api.github.com/repos/facebook/react/issues/9926",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9926/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9926/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9926/events",
  "html_url": "https://github.com/facebook/react/issues/9926",
  "id": 235227572,
  "node_id": "MDU6SXNzdWUyMzUyMjc1NzI=",
  "number": 9926,
  "title": "Inconsistencies among the documentation",
  "user": {
    "login": "rosenfeld",
    "id": 32246,
    "node_id": "MDQ6VXNlcjMyMjQ2",
    "avatar_url": "https://avatars1.githubusercontent.com/u/32246?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rosenfeld",
    "html_url": "https://github.com/rosenfeld",
    "followers_url": "https://api.github.com/users/rosenfeld/followers",
    "following_url": "https://api.github.com/users/rosenfeld/following{/other_user}",
    "gists_url": "https://api.github.com/users/rosenfeld/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rosenfeld/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rosenfeld/subscriptions",
    "organizations_url": "https://api.github.com/users/rosenfeld/orgs",
    "repos_url": "https://api.github.com/users/rosenfeld/repos",
    "events_url": "https://api.github.com/users/rosenfeld/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rosenfeld/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-06-12T13:11:50Z",
  "updated_at": "2017-06-17T12:30:02Z",
  "closed_at": "2017-06-17T11:32:52Z",
  "author_association": "NONE",
  "body": "Hi, I'm trying to figure out whether adopting React would be a safe or risky choice. It's very important to me to being able to draw the boundaries, i.e., to be able to define which node elements should be managed by React and which ones should not. It's pretty important that I should be able to integrate well with non-react components. So, I was trying to understand what guarantees I get when using React and noticed two sections in the documentation that don't seem to be compatible:\r\n\r\nhttps://facebook.github.io/react/docs/integrating-with-other-libraries.html\r\n\r\n> To prevent React from touching the DOM after mounting, we will return an empty < div /> from the render() method. The <div /> element has no properties or children, so React has no reason to update it, leaving the jQuery plugin free to manage that part of the DOM\r\n\r\nSo, it suggests using the mount/unmount hooks in order to initialize and destroy the the third-party components, however this is not enough to guarantee the integration will succeed. I'll get more into that later.\r\n\r\nhttps://facebook.github.io/react/docs/reconciliation.html\r\n\r\n> It is important to remember that the reconciliation algorithm is an implementation detail. React could rerender the whole app on every action; the end result would be the same.\r\n\r\nhttps://facebook.github.io/react/docs/react-component.html#shouldcomponentupdate\r\n\r\n> Currently, if shouldComponentUpdate() returns false, then componentWillUpdate(), render(), and componentDidUpdate() will not be invoked. Note that in the future React may treat shouldComponentUpdate() as a hint rather than a strict directive, and returning false may still result in a re-rendering of the component.\r\n\r\nThis is a problem to me. If I can't really rely on the reconciliation algorithm to not touch the elements React is not supposed to manage, then I have no guarantees that it would be possible to integrate React with third-party components in the future. This is a big concern.\r\n\r\nSo, let me give you an example to illustrate that. Suppose I want to integrate with a very lightweight multi-options autocomplete component that only provides 3 public APIs, a constructor, a desctructor and some onChange hook. It's an stateful component but we don't have direct access to its state so that we can restore it after destroying and recreating it. It opens a menu with several items containing a checkbox and the item label. As you click on the items, checking its checkbox, onChange would be triggered, which we could use to change the state of some ancestor component managed by React.\r\n\r\nWhile responding to the state change event, if React simply decides to re-render the ancestor component, without respecting `shouldComponentUpdate`, or ignoring the diff algorithm, it means it would probably call `componentWillUnmount` in the autocomplete component wrapper, which would only be able to destroy that component. Then, after `componentDidMount` we would only be able to initialize the component again, but we would have lost all of its state, like the scroll position and currently selected items and so on. In other words, that means React wouldn't be able to play nice with third-party components. In order to have such a guarantee, we need to have more guarantees from React itself. The reconciliation algorithm shouldn't be just an implementation detail without any guarantees. `shouldComponentUpdate` shouldn't be considered just a hint. Otherwise, how are we supposed to wrap third-library components in a reliable way?\r\n\r\nI'm really scared to start migrating our application to use React unless I feel confident that I'll always be able to integrate with third-party stateful components. Could you please review such statements in the documentation?",
  "closed_by": {
    "login": "rosenfeld",
    "id": 32246,
    "node_id": "MDQ6VXNlcjMyMjQ2",
    "avatar_url": "https://avatars1.githubusercontent.com/u/32246?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rosenfeld",
    "html_url": "https://github.com/rosenfeld",
    "followers_url": "https://api.github.com/users/rosenfeld/followers",
    "following_url": "https://api.github.com/users/rosenfeld/following{/other_user}",
    "gists_url": "https://api.github.com/users/rosenfeld/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rosenfeld/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rosenfeld/subscriptions",
    "organizations_url": "https://api.github.com/users/rosenfeld/orgs",
    "repos_url": "https://api.github.com/users/rosenfeld/repos",
    "events_url": "https://api.github.com/users/rosenfeld/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rosenfeld/received_events",
    "type": "User",
    "site_admin": false
  }
}
