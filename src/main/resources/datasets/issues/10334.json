{
  "url": "https://api.github.com/repos/facebook/react/issues/10334",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10334/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10334/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10334/events",
  "html_url": "https://github.com/facebook/react/pull/10334",
  "id": 246918696,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTMzMzYzMDEx",
  "number": 10334,
  "title": "Context improvements",
  "user": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2017-08-01T00:03:38Z",
  "updated_at": "2017-08-01T18:59:17Z",
  "closed_at": "2017-08-01T15:38:55Z",
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/10334",
    "html_url": "https://github.com/facebook/react/pull/10334",
    "diff_url": "https://github.com/facebook/react/pull/10334.diff",
    "patch_url": "https://github.com/facebook/react/pull/10334.patch"
  },
  "body": "React maintains context using a stack structure (`ReactFiberStack`). Each time a context-providing component is encountered during the begin-work phase, it is pushed onto the stack. We push early to ensure stack size consistency/predictability. However, at the time we initially push, the context-providing instance may not yet exist. In this case we add a placeholder context object and a default value for whether we performed work at this level and assume that we will update both later.\r\n\r\nPreviously we initialized the \"did perform work at this level\" value to false. However that approach can cause problems for context-providing components, making it possible for a component to block its own updates by failing [this check in `ReactFiberClassComponent`](https://github.com/facebook/react/blob/1454f9c10c4f487bd87227aad0162d0c888b20e3/src/renderers/shared/fiber/ReactFiberClassComponent.js#L583-L589). This was initially reported by @edvinerikson [via Twitter](https://twitter.com/edvinerikson/status/891974391742988288).\r\n\r\nI believe a more correct approach to initializing the \"did perform work at this level\" bit for a context-providing component is for the component to default to the same value as its parent. We can later update the value using the `invalidateContextProvider` helper to match what `shouldComponentUpdate` returned.\r\n\r\nI have added some new test cases to the `ReactIncremental-test` to cover the previous regression case. These new tests may overlap somewhat with the existing ones but I thought it better to be slightly verbose in this case. (I'm open to feedback on this though!)\r\n\r\nPS While investigating this issue I also noticed a difference in behavior between stack and fiber DOM renderers. I believe in this case that fiber is behaving correctly _and_ the noop renderer is consistent with fiber's behavior, so I didn't bother adding additional stack-specific tests.",
  "closed_by": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  }
}
