{
  "url": "https://api.github.com/repos/facebook/react/issues/15828",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15828/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15828/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15828/events",
  "html_url": "https://github.com/facebook/react/issues/15828",
  "id": 452583482,
  "node_id": "MDU6SXNzdWU0NTI1ODM0ODI=",
  "number": 15828,
  "title": "Trigger render of components upon any change of value",
  "user": {
    "login": "derekgreer",
    "id": 210185,
    "node_id": "MDQ6VXNlcjIxMDE4NQ==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/210185?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/derekgreer",
    "html_url": "https://github.com/derekgreer",
    "followers_url": "https://api.github.com/users/derekgreer/followers",
    "following_url": "https://api.github.com/users/derekgreer/following{/other_user}",
    "gists_url": "https://api.github.com/users/derekgreer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/derekgreer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/derekgreer/subscriptions",
    "organizations_url": "https://api.github.com/users/derekgreer/orgs",
    "repos_url": "https://api.github.com/users/derekgreer/repos",
    "events_url": "https://api.github.com/users/derekgreer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/derekgreer/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-06-05T15:57:10Z",
  "updated_at": "2019-06-05T16:02:00Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\nThis issue is based on https://github.com/facebook/react/issues/11417.\r\n\r\nCurrently, React interprets null or undefined values as a signal to treat a component as uncontrolled.  This continues to be an ongoing point of confusion for users, clearly pointing to the design as being an instance of violating the ***Principle of Least Astonishment***.  \r\n\r\nWhen developers are first learning React, they generally encounter documentation, blog articles, explicit instruction from other developers, etc. which explains the relationship of state to the how the DOM is rendered.  They learn that React intelligently determines which DOM elements to re-render based upon which portions of the components' state object _changes_.  Developers are then _surprised_ by the behavior that the DOM is not updated when a state value changes from some value (e.g. \"ABC\") to null or undefined.\r\n\r\nIt feels like the Facebook developers in some respects may be too close to the problem to see it for what it is.  The comments at https://github.com/facebook/react/issues/11417#issuecomment-413240002 and https://github.com/facebook/react/issues/11417#issuecomment-473368945 conclude that it isn't clear that changing the behavior would be more clear or better.  Perhaps how it would be better would be more easily deduced by the following questions:\r\n\r\nWhich is a better experience for React users:\r\n\r\n**React components trigger the associated DOM component to be replaced  when**:\r\na) the value changes in any way\r\nb) the value changes in any way, except if changed to null or undefined which is treated in a special way\r\n\r\n**React components are treated as uncontrolled when**:\r\na) there is an explicit property set denoting that the component is uncontrolled (e.g. <input controlled={false} ... />)\r\nb) there is an implicit change in whether the component is treated as controlled or uncontrolled based on whether the value is null, undefined, or other value\r\n\r\nAnytime an API changes, there's a cost involved.  Sometimes our users or other developers suggest changes to the behavior of a system or API which is clearly a better experience, but may come at too high a cost to change for reasons other than usability.  It's understandable for the React developers to communicate that it's unclear as to which path is better over all, but the comments seem to suggest that it's unclear that the change would cause less confusion to the users with respect to how changes in state affect the DOM.  That's just baffling.  Take a poll and I'm sure you'd find that the vast majority of React users would see treating all changes the same as being the more clear and preferred behavior as compared to null and undefined being special cases.  \r\n\r\nCorresponding to changing the behavior to work uniformly, it would be best to come up with a different way of denoting that a component is considered controlled or uncontrolled.  An explicit property (e.g. controlled={true|false}) with a sensible default (e.g. true) would make the API more clear.  Using value to BOTH represent how you change state AND how you signal whether React should treat the component as controlled or uncontrolled overloads the responsibility of value and creates confusion.\r\n\r\n\r\n\r\n",
  "closed_by": null
}
