{
  "url": "https://api.github.com/repos/facebook/react/issues/15293",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15293/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15293/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15293/events",
  "html_url": "https://github.com/facebook/react/issues/15293",
  "id": 428032141,
  "node_id": "MDU6SXNzdWU0MjgwMzIxNDE=",
  "number": 15293,
  "title": "Is it recommended to fetch in effect or should it be imperative",
  "user": {
    "login": "otakustay",
    "id": 639549,
    "node_id": "MDQ6VXNlcjYzOTU0OQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/639549?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/otakustay",
    "html_url": "https://github.com/otakustay",
    "followers_url": "https://api.github.com/users/otakustay/followers",
    "following_url": "https://api.github.com/users/otakustay/following{/other_user}",
    "gists_url": "https://api.github.com/users/otakustay/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/otakustay/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/otakustay/subscriptions",
    "organizations_url": "https://api.github.com/users/otakustay/orgs",
    "repos_url": "https://api.github.com/users/otakustay/repos",
    "events_url": "https://api.github.com/users/otakustay/events{/privacy}",
    "received_events_url": "https://api.github.com/users/otakustay/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1109410193,
      "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
      "name": "Component: Hooks",
      "color": "c2f27b",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-04-02T05:34:28Z",
  "updated_at": "2019-04-04T11:08:26Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "In out team we encountered a explosive discussion on how we should handle the relationship of a fetch and its parameters, after searching in community I still find various solutions to this, I'd like to raise this discussion to find a best practive.\r\n\r\n## Background\r\n\r\nSuppose we have a simple list view like:\r\n\r\n<img width=\"687\" alt=\"Jietu20190402-130206@2x\" src=\"https://user-images.githubusercontent.com/639549/55377435-87268b80-5547-11e9-97a8-313a5713ced3.png\">\r\n\r\nWhenever user types keyword in textbox and clicks \"Search\" button, or they change the page number, we should fetch a new list from remote and render it in table.\r\n\r\nWe use redux to manage global state of this simple app, the store is structured as:\r\n\r\n```js\r\n{\r\n    filter: '',\r\n    pageIndex: 0,\r\n    results: []\r\n}\r\n```\r\n\r\nWe developed a total of 3 solutions to demonstrate how the change of `filter` and `pageIndex` should cause a fetch of `results`.\r\n\r\n## Use effect and separation of view and logic\r\n\r\nThis is the first demo: https://codesandbox.io/s/20x1m39w00\r\n\r\nIn this implementation we tried to:\r\n\r\n1. Utilize `useEffect` to trigger a fetch when any parameter changes.\r\n2. Do not pass any parameter as prop to `components/List` component.\r\n\r\nIn my point of view, I like this solution best because:\r\n\r\n1. It have a very clear separation of view and logic, `components/List` does not receive any redundant props such as `filter` or `pageIndex`.\r\n2. It theoretically treat a callback prop as a normal one, make it a dependency of `useEffect`.\r\n3. It works in a **reactive** way, which means \"we trigger a fetch not because the action taken from user, only because the change of state\".\r\n\r\nStill we have concerns about it:\r\n\r\n1. It obviously triggers more render and updates because change of `filter` or `pageIndex` does not dispatch `FETCH_RESULTS` immediately, this cause a sync dispatch in effect which we previously avoided by `no-set-state-did-update` rule.\r\n2. We create a state update from another state update, this \"chaining\" is not clear enough for developers and may cause unwanted infinite loop.\r\n\r\n## Use effect and params together\r\n\r\nThe second demo is much like the first one: https://codesandbox.io/s/54o1rjvyv4\r\n\r\nThe only change is we pass `filter` and `pageIndex` to `components/List`, in this case we believe **effect is a part of component** so that every dependencies used to form an effect should be passed as prop.\r\n\r\nThis solution gives a more clear view of what is used to fetch data in `components/List`, this is \r\n a highly adopted solution in community, however we're not sure this is recommended officially.\r\n\r\n## Imperative action to fetch data\r\n\r\nAs opposed to previous, this is our third demo: https://codesandbox.io/s/p5yv48x97x\r\n\r\nIn this solution we changed our thought and implement the app in a more \"redux way\":\r\n\r\n1. We trigger the fetch on user interactions, either click on \"Search\" button or change the page number, however either interaction only provides its own parameter, we don't provide `pageIndex` when \"Search\" button is clicked.\r\n2. We have a thunk which computes a new parameter object based on current state using `getState()` function, a `FETCH_RESULTS` action is dispatched.\r\n3. We have several reducers to observe `FETCH_RESULTS` action and updates corresponding parameter in global state.\r\n4. Fetched list is connected to `components/List` component, this component now is a pure presentational component, no lifecycle effect is involved.\r\n5. To solve the first fetch when application is mounted, we create an `containers/App` container component.\r\n\r\nBy doing these we eliminated the \"chaining state update\" issue, however it introduces several concerns:\r\n\r\n1. If we add more user interactions in the future, the `loadResults` thunk could be more and more complex.\r\n2. The use of `getState` in `redux-thunk` is not highly recommended in community, we found some articles stating that developers should avoid to use it in most cases.\r\n3. We can't explain the exist of the `containers/App` container only to trigger a fetch on mount, thee `useEffect` take no dependencies and `exhaustive-deps` rules complains about it, not paring mount and update is also a big uncomfortable point to us.\r\n4. Trigger fetch from user interactions is what we called \"imperative\", we're confused about whether a reactive framework like react recommends imperative programming.\r\n\r\n------\r\n\r\nSince we are not able to get a conclusion for a very long time, we decide to raise this issue for more discussion to find a better solution to these very common use cases.",
  "closed_by": null
}
