{
  "url": "https://api.github.com/repos/facebook/react/issues/10399",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10399/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10399/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10399/events",
  "html_url": "https://github.com/facebook/react/issues/10399",
  "id": 248484493,
  "node_id": "MDU6SXNzdWUyNDg0ODQ0OTM=",
  "number": 10399,
  "title": "RFC: Plan for Attributes in React 16",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2017-08-07T17:53:44Z",
  "updated_at": "2017-09-08T19:46:04Z",
  "closed_at": "2017-09-08T19:46:04Z",
  "author_association": "MEMBER",
  "body": "## Note: the final plan has changed. Refer to https://facebook.github.io/react/blog/2017/09/08/dom-attributes-in-react-16.html for details on what ends up in React 16.\r\n\r\n-----\r\n\r\nThis is a more formal conclusion of the discussion in https://github.com/facebook/react/pull/7311.\r\nIt is mostly (not yet fully) implemented by https://github.com/facebook/react/pull/10385.\r\n\r\nThis is meant to address https://github.com/facebook/react/issues/140.\r\n\r\nI wrote this doc but it’s mostly based on discussion with @nhunzaker. I decided to write it in an attempt to formalize the behavior we want, so that if there are bugs, we can refer back to this.\r\n\r\n## Current Behavior\r\n\r\nReact only lets you use “approved” camelCase properties that look organic in JavaScript:\r\n\r\n```js\r\n// No warning\r\n<div className />           // => <div class />\r\n<img srcSet />              // => <img srcset />\r\n<svg enableBackground />    // => <svg enable-background />\r\n\r\n// Warns\r\n<div class />               // => <div />\r\n<img srcset />              // => <img />\r\n<svg enable-background />   // => <svg />\r\n```\r\n\r\nThere are two downsides to this.\r\n\r\n### Problem: Custom Attributes\r\n\r\nYou can’t pass custom, non-standard, library-specific, or not-yet-standardized attributes:\r\n\r\n```js\r\n// Warns\r\n<input nwdirectory />      // => <input />\r\n<div ng-app />             // => <div />\r\n<div inert />              // => <div />\r\n```\r\n\r\nThis is a [very popular feature request](https://github.com/facebook/react/issues/140).\r\n\r\n### Problem: Maintaining a Whitelist\r\n\r\nWe currently have to maintain a whitelist of all allowed attributes, and use it even in the production build.\r\nBy being more permissive, **we can drop ReactDOM size by 7% post-min/gzip** without any changes to app code.\r\n\r\n## Guiding Principles\r\n\r\nIf we change the current behavior, there’s a few existing principles we want to preserve:\r\n\r\n* **Code should behave identically in development and production.** This one is pretty obvious but it constraints what we can do with the whitelist.\r\n* **Existing applications should keep on working.** We are okay getting more permissive and passing more attributes through to the DOM, but we don’t want to change React DOM APIs at this point.\r\n* **There should be one obviously valid way to supply a property to component.** For example, allowing both `class` and `className` would be ambiguous and confusing to component authors.\r\n* **We should maintain the spirit of JavaScript-centric API.** Our users have already bought into the idea that it is more important for props to be consistent when used in JavaScript, than to match the HTML/SVG specs. We don’t want to change this now.\r\n\r\nI think there is a compromise that lets us solve the problems above without deviating from these principles.\r\n\r\n## Proposed Behavior: Overview\r\n\r\nWe drop a large part of the whitelist, but we make the behavior less strict.\r\nThese used to be ignored due to wrong casing, but now will be passed through:\r\n\r\n```js\r\n<div srcset />      // works but warns\r\n<div classname />   // works but warns\r\n<svg CalcMode />    // works but warns\r\n```\r\n\r\nInstead of being omitted, they will only emit a warning now.\r\nHowever, we still don’t pass through attributes that differ in more than casing from React version:\r\n\r\n```js\r\n<div class />            // doesn't work, warns\r\n<div accept-charset />   // doesn't work, warns\r\n<svg stroke-dasharray /> // doesn't work, warns\r\n```\r\n\r\nThis lets us drop 7% of ReactDOM bundle size and keep most of the whitelist for development only.\r\n\r\n## Proposed Behavior: In Depth\r\n\r\nLet’s say `reactAttr` is the attribute name you use in React, and `domAttr` is its name in HTML/SVG specs.  \r\n**Our whitelist is a map from `reactAttr` to `domAttr`.**\r\n\r\nIn React 15, it might look like this:\r\n\r\n| `reactAttr`  | `domAttr` |\r\n| ------------- | ------------- |\r\n| `className`  | `class`  |\r\n| `srcSet`  | `srcset`  |\r\n| `acceptCharset`  | `accept-charset`  |\r\n| `arabicForm`  | `arabic-form`  |\r\n| `strokeDashArray`  | `stroke-dasharray`  |\r\n| `calcMode`  | `calcMode`  |\r\n\r\n### Proposed Changes to the Whitelist\r\n\r\nWe remove any attributes where `lowercase(reactAttr) === lowercase(domAttr)` and don’t have special behavior. In other words, **we delete any attributes that “just work” in regular HTML.**\r\n\r\n| `reactAttr`  | `domAttr` |\r\n| ------------- | ------------- |\r\n| `className`  | `class`  |\r\n| <s>`srcSet`</s>  | <s>`srcset`</s>  |\r\n| `acceptCharset`  | `accept-charset`  |\r\n| `arabicForm`  | `arabic-form`  |\r\n| `strokeDashArray`  | `stroke-dasharray`  |\r\n| <s>`calcMode`</s>  | <s>`calcMode`</s>  |\r\n\r\n(This is where we get 7% size savings.)  \r\nWe still keep the full attribute whitelist in DEV mode for warnings.\r\n\r\n### Proposed Changes to the Algorithm\r\n\r\nLet’s say `givenAttr` is the attribute in user’s JSX.\r\nWe follow these steps now:\r\n\r\n**Step 1: Check if there exists a `reactAttr` in the whitelist equal to the `givenAttr`.**\r\n\r\nIf it there is a match, **use the corresponding `domAttr` name from the whitelist and exit.**  \r\nFor example:\r\n\r\n```js\r\n<div className />        // => <div class />\r\n<div acceptCharset />    // => <div accept-charset />\r\n<svg strokeDashArray />  // => <svg stroke-dasharray />\r\n```\r\n\r\nThis matches behavior in 15.\r\nIf there is no match, **continue**.\r\n\r\n**Step 2: Check if there exists a `domAttr` in the whitelist that `lowercase(domAttr) === lowercase(givenAttr)`**\r\n\r\nWe’re trying to determine if the user was using a DOM version of attribute that is sufficiently different from the one suggested by React (that is, by more than casing).\r\n\r\nIn this case, **don’t render anything, warn and exit.**\r\n\r\n```js\r\n<div class />            // => <div /> + warning\r\n<div accept-charset />   // => <div /> + warning\r\n<svg stroke-dasharray /> // => <svg /> + warning\r\n```\r\n\r\nSo far this matches behavior in 15.\r\n\r\nNote that this **does not** catch the cases that were sufficiently similar that we excluded them from the whitelist. For example:\r\n\r\n```js\r\n<div srcset />           // not in the whitelist, continue the algorithm\r\n<div classname />        // not in the whitelist, continue the algorithm\r\n<svg CalcMode />         // not in the whitelist, continue the algorithm\r\n```\r\n\r\nThis is because we don’t keep them in the whitelist anymore.  \r\nIf we hit such case, **continue below**.\r\n\r\n**Step 3: If the value type is valid, write `givenAttr` to the DOM, with a warning if it deviates from React canonical API.**\r\n\r\nThis is where we deviate from 15.  \r\nIf we reached this stage, we render it to the DOM anyway, which may or may not be successful:\r\n\r\n```js\r\n<div srcset />           // => <div srcset /> (works) + warning\r\n<div classname />        // => <div classname /> (not very useful) + warning\r\n<svg CalcMode  />        // => <svg CalcMode /> (works) + warning\r\n```\r\n\r\nWe only render strings and numbers.\r\n\r\nIf the value is of a different type, we skip it and warn.\r\nFor numbers, we also warn (but still render it) if the value coerced to string is `'NaN'`.\r\n\r\nSuccess now depends on whether DOM accepts such an attribute.\r\n\r\n**However, we will still warn if there is a `reactAttr` that `lowercase(reactAttr) === lowercase(givenAttr)`.**  \r\n\r\nIn other words, we warn if there is a canonical React API that differs in casing, such as for all above cases.\r\n\r\nThis step also captures the new requirement. Any completely unknown attributes will happily pass through:\r\n\r\n```js\r\n<input nwdirectory />      // => <input nwdirectory />\r\n<div ng-app />             // => <div ng-app />\r\n<div inert />              // => <div inert />\r\n```\r\n\r\n### Other Considerations\r\n\r\n* ARIA and DATA attributes still pass through. The validation of ARIA attributes has moved to be development-only. We allow (but warn on) any unexpected ARIA attributes or attributes that *seem* like ARIA attributes (e.g. `ariaSomething`). This is a minor deviation from “pass everything through” approach but seems sensible.\r\n* Handling of custom element attributes has not changed.\r\n* Handling of special attributes (e.g. `style`) has not changed.\r\n* Note how with this approach, adding support for a new DOM attribute is still possible in a minor version as long as it’s only different in casing. People would get a warning about the new canonical name for it, but at least the old name (which they might have been using) would still work. Unlike the case where we completely disallow a second name for known attributes but allow custom attributes in general.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
