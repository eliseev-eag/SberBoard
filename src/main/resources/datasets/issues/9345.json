{
  "url": "https://api.github.com/repos/facebook/react/issues/9345",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9345/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9345/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9345/events",
  "html_url": "https://github.com/facebook/react/issues/9345",
  "id": 219665696,
  "node_id": "MDU6SXNzdWUyMTk2NjU2OTY=",
  "number": 9345,
  "title": "Offer an opinionated helper for HOC creation for authors",
  "user": {
    "login": "Pomax",
    "id": 177243,
    "node_id": "MDQ6VXNlcjE3NzI0Mw==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/177243?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Pomax",
    "html_url": "https://github.com/Pomax",
    "followers_url": "https://api.github.com/users/Pomax/followers",
    "following_url": "https://api.github.com/users/Pomax/following{/other_user}",
    "gists_url": "https://api.github.com/users/Pomax/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Pomax/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Pomax/subscriptions",
    "organizations_url": "https://api.github.com/users/Pomax/orgs",
    "repos_url": "https://api.github.com/users/Pomax/repos",
    "events_url": "https://api.github.com/users/Pomax/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Pomax/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2017-04-05T17:57:04Z",
  "updated_at": "2017-09-20T16:20:45Z",
  "closed_at": "2017-09-20T16:20:45Z",
  "author_association": "NONE",
  "body": "HOCs are great, I think we can all agree. What is not so great, however, is that React has no opinion on how people should implement HOCs, and so both users and authors alike have no guideline when it comes to implementing a consistent api for \"using multiple HOCs\", especially when those HOCs get chained. As such, I think that there's an opportunity to make the lives of both developers who work with React, as well as HOC maintainers who have to make sure their HOCs work in a variety of code bases easier by having React be slightly opinionated on how to write a HOC.\r\n\r\nTo describe the problem: right now there is no established way to ask a HOC for the component class(es) that were put in, nor an established way to access the \"real element\" that a HOC wraps. As such, each HOC has to either settle for \"too bad for my users\" or invent its own API for this, and as many have gone the second route, there are a fair few different ways that this access has been implemented over different HOCs.\r\n\r\nTo fix this, I'd like to suggest establishing a best practice, guided by React, by adding a `React.createHOC({ ... })` mechanism with corresponding `import HOC from React; class Thing extends HOC { ... }`\" to the next version of React, so that users and authors no longer need to guess APIs.\r\n\r\nMy suggestion would be for this React.HOC class to define:\r\n\r\n- a constructor that takes an arbitrary number of Component classes\r\n- a getClasses() function that returns the (list of) Component class(es) that were passed in\r\n- a getInstances() function that returns the (list of) element(s) that the HOC actually builds (and knows how to access by `ref` based on the Component class names)\r\n\r\nAs an example (and the following code is public domain - which I unfortunately need to be point out because I am unable to sign the CLA necessary to file PRs, so I can't file a PR in conjunction to this issue. As such, the following code lacks as much implementation as possible so as to allow for PRs by others):\r\n\r\n```\r\nclass HOC extends Component {\r\n  constructor(...componentClasses) {\r\n    this.componentClasses = componentClasses\r\n  }\r\n\r\n  getClasses() {\r\n  /*\r\n    Passed component might themselves be HOCs, so this function needs\r\n    to perform an iteration check to build a valid list of contained classes.\r\n\r\n      classesList = this.componentClasses.map( componentClass => {\r\n        if (componentClass.getClasses) {\r\n          return componentClass.getClasses()\r\n        }\r\n      }).filter( result => result)\r\n\r\n    probably paired with an array flattening operation\r\n  */\r\n  }\r\n\r\n  getInstances() {\r\n  /*\r\n    the same holds here; in order to make this work, a naming convention needs\r\n    to be declared around refs: if you use React.HOC then you will name your refs\r\n    after the component class you pushed in.\r\n\r\n      instanceRefs = this.componentClasses.map( c => c.constructor.name )\r\n      elements = instanceRefs.map(ref => this.refs[ref])\r\n\r\n    this then needs the same check before we can return it:\r\n\r\n      elements = elements.map(e=> e.getInstances ? e.getInstances() : e)\r\n\r\n    and again probably with an array unpack so it's a flat list.\r\n  */\r\n  }\r\n}\r\n```\r\n\r\nThis lets React solve the problem of standardizing the barebones functionality that users and authors should be able to rely on to \"just work\", without interfering with how HOCs currently work, or dictating how people should write their HOCs: you can keep writing HOCs as plain Components that wrap one or more components, but extending from HOC now offers you a zero-effort option to impart some functionality for free that users will appreciate.\r\n\r\nThere is an interesting suggestion in https://github.com/yannickcr/eslint-plugin-react/issues/678#issuecomment-291816217 that instead relies on rebinding `props`, but this might not good enough as this would also expose refs used by the HOC for internal purposes, and the user should not be able to fiddle with.\r\n\r\nAnyway, this is mostly an issue filed to get a ball rolling on not so much standardizing \"how HOCs should be made\" (it feels like React should stay unopinionated on that) but on having React offer a helping opinion on one way in which you can write a HOC, with the promise that using that means you're now compatible with any other HOC that uses the same suggestion.",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
