{
  "url": "https://api.github.com/repos/facebook/react/issues/12227",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12227/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12227/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12227/events",
  "html_url": "https://github.com/facebook/react/issues/12227",
  "id": 297220662,
  "node_id": "MDU6SXNzdWUyOTcyMjA2NjI=",
  "number": 12227,
  "title": "Provide a way to perform a synchronous render into another root during the commit phase",
  "user": {
    "login": "saranrapjs",
    "id": 707098,
    "node_id": "MDQ6VXNlcjcwNzA5OA==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/707098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/saranrapjs",
    "html_url": "https://github.com/saranrapjs",
    "followers_url": "https://api.github.com/users/saranrapjs/followers",
    "following_url": "https://api.github.com/users/saranrapjs/following{/other_user}",
    "gists_url": "https://api.github.com/users/saranrapjs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/saranrapjs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/saranrapjs/subscriptions",
    "organizations_url": "https://api.github.com/users/saranrapjs/orgs",
    "repos_url": "https://api.github.com/users/saranrapjs/repos",
    "events_url": "https://api.github.com/users/saranrapjs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/saranrapjs/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 739761016,
      "node_id": "MDU6TGFiZWw3Mzk3NjEwMTY=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Reconciler",
      "name": "Component: Reconciler",
      "color": "f9a798",
      "default": false
    },
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2018-02-14T19:41:49Z",
  "updated_at": "2018-11-07T04:39:11Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nReentrancy checks prevent synchronous `ReactDOM.render` in a nested React component. This used to work before React 16, and [seems related to this issue about nested ReactDOM renders](https://github.com/facebook/react/issues/12034)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHere's a [JSFiddle](https://jsfiddle.net/e5hbzc1r/14/) that documents the problem, with a simulation of the external dependency where this manifests.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm running into what I think is a [similar problem to this one](https://github.com/facebook/react/issues/12034), with a nested `ReactDOM.render`, except where the difference is that I don't think we can use portals to address our use-case.\r\n\r\nWe have a component which manages the DOM tree for all nodes below it outside of React — it's a contenteditable node and uses the best-in-class [ProseMirror](https://prosemirror.net/) library to manage its children. The component looks something like this:\r\n\r\n```javascript\r\nclass ProseMirror extends Component {\r\n\tcomponentDidMount() {\r\n\t\t// ProseMirror manages the DOM for all nodes below this.el.\r\n\t}\r\n\r\n\tsetRef(el) {\r\n\t\tthis.el = el;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (<div ref={this.setRef} />);\r\n\t}\r\n}\r\n```\r\n\r\nAs part of its render cycle, our configuration of ProseMirror ends up calling:\r\n\r\n```javascript\r\nReactDOM.render(<CrucialSubComponent />, someDivManagedByProseMirror);\r\n```\r\n\r\nto render an isolated child node of `<ProseMirror />`, and wants to be able to immediately afterwards be able to leverage:\r\n\r\n```javascript\r\nthis.el.querySelector('.my-subcomponent')\r\n```\r\n\r\n...but this piece of the DOM is no longer available synchronously, and it looks like this is because of the re-entrancy change that came about in React 16. Portals don't work for us, because the site where the `ReactDOM.render` is being called isn't itself directly part of the root React tree (this is [clearer to observe in the fiddle](https://jsfiddle.net/e5hbzc1r/14/)). The hierarchy is something like `<ProseMirror /> ---> (opaque ProseMirror rendering code) --> <CrucialSubComponent />`. Is there a way to skip these re-entrancy checks in these cases where there's an isolated React render happening in a grandchild of a component, but where the React tree isn't the immediate parent?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nQuerying the DOM immediately after ReactDOM.render worked in versions prior to React 16. We're excited about the async possibilities for our main React tree, but curious if there are workarounds where we can ignore the reentrancy checks for these isolated renders.",
  "closed_by": null
}
