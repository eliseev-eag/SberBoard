{
  "url": "https://api.github.com/repos/facebook/react/issues/15409",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15409/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15409/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15409/events",
  "html_url": "https://github.com/facebook/react/issues/15409",
  "id": 432860837,
  "node_id": "MDU6SXNzdWU0MzI4NjA4Mzc=",
  "number": 15409,
  "title": "useInterval in conditional, effect-based rendering with Context API just has some problems",
  "user": {
    "login": "jotceg",
    "id": 39415217,
    "node_id": "MDQ6VXNlcjM5NDE1MjE3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/39415217?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jotceg",
    "html_url": "https://github.com/jotceg",
    "followers_url": "https://api.github.com/users/jotceg/followers",
    "following_url": "https://api.github.com/users/jotceg/following{/other_user}",
    "gists_url": "https://api.github.com/users/jotceg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jotceg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jotceg/subscriptions",
    "organizations_url": "https://api.github.com/users/jotceg/orgs",
    "repos_url": "https://api.github.com/users/jotceg/repos",
    "events_url": "https://api.github.com/users/jotceg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jotceg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-04-13T15:41:50Z",
  "updated_at": "2019-04-15T12:14:11Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nIf i'm changing the context's state within a children components, conditional interval setting in useEffect just doesn't work. In my app, i have a button. When user clicks this button, the context of an app should change and then useEffect function should catch that (useEffect(() => ..., [state...])) and set the interval, which updates the time property of context (each second it decreases context's time property by 1) should update this time and another, text component should get it and display properly. Then, if the user will click the button again, it should pause the timer and if the user clicks again, it should restore it again and so on. However, i have some problems with it:\r\n\r\n1. Cannot nest the hook into hook - i tried to use useInterval() custom hook from @gaearon 's blog: https://overreacted.io/making-setinterval-declarative-with-react-hooks/ and while that works, if i need to use it in useEffect, it didn't work because of hooks rules (https://codesandbox.io/s/24qw59q44r). Ok, i extracted that function and adapted it to make it runnable in useEffect() (moved the useRef() outside of a useEffect()) and now it can make intervals in useEffect (https://codesandbox.io/s/ww11py0087) but that didn't solve my issues...\r\n2. If i'm updating the context's state from within the children of it (using Context.Consumer) and then try to toggle the interval in an app, first i want to make sure what state it's currently. However, if i'm console.log() the timer state, on the first time i'm getting two values at once, after that it's normal, but these two-at-once above causes the issue. However, i fixed that... by just deleting the context.consumer from children component and making the context's updates from it with the props (instead of `<button onClick={() => { context.doSomething() } }></button`, now i'm doing something like: `<button onClick={props.onClick}></button>` and that fixes the two-at-once logging issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThe links are above.\r\n\r\n**What is the expected behavior?**\r\n\r\nIt should properly update context from within the children's component, properly set the state and properly set intervals and clean it when it's needed (when user clicks the button).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.6\r\n\r\nHowever, i find the solution for all of that problems, but i'm not sure if it's really efficient:\r\n```jsx\r\nimport React from 'react';\r\n\r\nimport { IonApp }  from @ionic/react;\r\n\r\nimport { Context, IContext } from ./context/context;\r\n\r\nimport { ITime } from ./interfaces/time;\r\n\r\nimport { Circle } from ./components/Circle;\r\nimport { Background } from './components/Background';\r\nimport { TimeText } from './components/TimeText';\r\nimport { ThenText } from './components/ThenText';\r\nimport { MiddleAction } from './components/MiddleAction';\r\nimport { SideAction } from './components/SideAction';\r\nimport { Actions } from './components/Actions';\r\n\r\nimport { TimerState } from './enums/timerState';\r\n\r\nimport { useInterval } from './helpers/useInterval';\r\nimport { updateTime } from './helpers/updateTime';\r\n\r\nexport const App = (): JSX.Element => {\r\n\r\n  const context: IContext = React.useContext(Context);\r\n\r\n  const [state, setState] = React.useState({\r\n    ...context,\r\n    updateTimerState: (timerState: TimerState) => {\r\n      setState({\r\n        ...state,\r\n        timerState\r\n      } as IContext);\r\n    },\r\n    timerState: TimerState.Paused\r\n  } as IContext);\r\n\r\n  const callback = React.useRef(() => {\r\n    return updateTime(state.time);\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    // switch (context.timerState) {\r\n    //   case TimerState.Running:\r\n    //     console.log('i\\'m really running');\r\n    //   case TimerState.Paused:\r\n    //     console.log('i\\'m paused');\r\n    //   case TimerState.Reseted:\r\n    //     console.log('reseted');\r\n    // };\r\n      if (state.timerState === TimerState.Running) {\r\n        const tick = () => {\r\n          setState({\r\n            ...state,\r\n            time: callback.current()\r\n          } as IContext);\r\n        };\r\n\r\n        let id = setInterval(tick, 1000);\r\n        return () => clearInterval(id);\r\n      };\r\n      if (state.timerState === TimerState.Paused) {\r\n        console.log('p');\r\n      }\r\n  }, [state.timerState]);\r\n\r\n  return (\r\n    <Context.Provider value={state}>\r\n      <Context.Consumer>\r\n        {\r\n          (context: IContext): JSX.Element => (\r\n            <IonApp>\r\n              <Background>\r\n                <Circle>\r\n                  <TimeText />\r\n                  <ThenText />\r\n                </Circle>\r\n                <div style={{marginTop: '32px'}}>\r\n                  <Actions>\r\n                    <SideAction type='backward' />\r\n                    <MiddleAction onClick={() => {\r\n                      context.updateTimerState(context.timerState === TimerState.Running ? TimerState.Paused : TimerState.Running);\r\n                    }} />\r\n                    <SideAction type='forward' />\r\n                  </Actions>\r\n                </div>\r\n              </Background>\r\n            </IonApp>\r\n          ) as JSX.Element\r\n        }\r\n      </Context.Consumer>\r\n    </Context.Provider>\r\n    ) as JSX.Element;\r\n};\r\n```",
  "closed_by": null
}
