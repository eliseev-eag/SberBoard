{
  "url": "https://api.github.com/repos/facebook/react/issues/16091",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16091/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16091/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16091/events",
  "html_url": "https://github.com/facebook/react/issues/16091",
  "id": 465913162,
  "node_id": "MDU6SXNzdWU0NjU5MTMxNjI=",
  "number": 16091,
  "title": "[Question] useRef to reduce dependencies in useEffect/useCallback",
  "user": {
    "login": "dangcuuson",
    "id": 20551609,
    "node_id": "MDQ6VXNlcjIwNTUxNjA5",
    "avatar_url": "https://avatars1.githubusercontent.com/u/20551609?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dangcuuson",
    "html_url": "https://github.com/dangcuuson",
    "followers_url": "https://api.github.com/users/dangcuuson/followers",
    "following_url": "https://api.github.com/users/dangcuuson/following{/other_user}",
    "gists_url": "https://api.github.com/users/dangcuuson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dangcuuson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dangcuuson/subscriptions",
    "organizations_url": "https://api.github.com/users/dangcuuson/orgs",
    "repos_url": "https://api.github.com/users/dangcuuson/repos",
    "events_url": "https://api.github.com/users/dangcuuson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dangcuuson/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-07-09T18:00:38Z",
  "updated_at": "2019-07-18T19:48:40Z",
  "closed_at": "2019-07-18T19:48:40Z",
  "author_association": "NONE",
  "body": "Firstly, sorry for putting a question in the issues tracker, since I'm not sure where to put this.\r\n\r\nI really love the concept of hooks & have been converting many class components to hooks. One of the common problems I usually get with hooks, is to access the latest state/props in `useEffect` and `useCallback`, while avoiding specify too many dependencies to these hooks. \r\n\r\n(I'm aware of exhausive deps, but for optimization, I don't want `useEffect` to be called too many times, or `useCallback` to return a different function every times)\r\n\r\nFor example, I want to maintain the identity of function returned from `useCallback`, so I'd need to put `[]` as 2nd argument (because I'm gonna pass it to a component inside `React.memo` and don't want to write custom props comparator). So it'd be like this:\r\n```js\r\nuseCallback(() => doStuff(value1, value2), [])\r\n```\r\n\r\nOf course it won't work because `doStuff` will always receive initial value of `value1` and `value2`. That's why I'd need to use `useRef`:\r\n\r\n```js\r\nconst ref = useRef({ value1, value2 });\r\nref.current = { value1, value2 };\r\nuseCallback(() => doStuff(ref.current.value1, ref.current.value2), [])\r\n```\r\n\r\nAnd could say that this happens so many time that I decided to write a custom hook for it :)\r\n\r\n```ts\r\nexport function useCallbackWithRef<TRef, TCb extends (...args: any[]) => any>(\r\n  refData: TRef,\r\n  callback: (refData: TRef) => TCb\r\n): TCb {\r\n  const ref = React.useRef(refData);\r\n  ref.current = refData;\r\n  return React.useCallback((...args: any[]) => {\r\n    return callback(ref.current)(...args);\r\n  }, []) as TCb;\r\n}\r\n\r\n//usage\r\nuseCallbackWithRef({ value1, value2 }, ref => () => doStuff(ref.value1, ref.value2))\r\n```\r\n\r\nAnd it seems to work quite nice: [Codesandbox](https://codesandbox.io/s/white-brook-1myr7)\r\n\r\nI'm going to use this across many places in my project, but I don't want to have many regrets later on so I just want to ask a few things:\r\n\r\n1. Is there any performance issue with excessive use of `useRef`? Since they're just pointer to an already exist object, I guess it's not going to have any memory impact?\r\n2. I read somewhere that React may decide to re-compute value in `useMemo` if needed, even if I specify `[]` as dependencies. Is it better if I change the implementation to `useState` with lazy init, instead of `useCallback`?\r\n3. Or is there a much more simpler, a true React way to achieve what I want but I have overlooked?",
  "closed_by": {
    "login": "dangcuuson",
    "id": 20551609,
    "node_id": "MDQ6VXNlcjIwNTUxNjA5",
    "avatar_url": "https://avatars1.githubusercontent.com/u/20551609?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dangcuuson",
    "html_url": "https://github.com/dangcuuson",
    "followers_url": "https://api.github.com/users/dangcuuson/followers",
    "following_url": "https://api.github.com/users/dangcuuson/following{/other_user}",
    "gists_url": "https://api.github.com/users/dangcuuson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dangcuuson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dangcuuson/subscriptions",
    "organizations_url": "https://api.github.com/users/dangcuuson/orgs",
    "repos_url": "https://api.github.com/users/dangcuuson/repos",
    "events_url": "https://api.github.com/users/dangcuuson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dangcuuson/received_events",
    "type": "User",
    "site_admin": false
  }
}
