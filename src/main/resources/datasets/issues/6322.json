{
  "url": "https://api.github.com/repos/facebook/react/issues/6322",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/6322/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/6322/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/6322/events",
  "html_url": "https://github.com/facebook/react/issues/6322",
  "id": 142960944,
  "node_id": "MDU6SXNzdWUxNDI5NjA5NDQ=",
  "number": 6322,
  "title": "1000% performance improvement for intensive react apps",
  "user": {
    "login": "amized",
    "id": 13376866,
    "node_id": "MDQ6VXNlcjEzMzc2ODY2",
    "avatar_url": "https://avatars1.githubusercontent.com/u/13376866?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amized",
    "html_url": "https://github.com/amized",
    "followers_url": "https://api.github.com/users/amized/followers",
    "following_url": "https://api.github.com/users/amized/following{/other_user}",
    "gists_url": "https://api.github.com/users/amized/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amized/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amized/subscriptions",
    "organizations_url": "https://api.github.com/users/amized/orgs",
    "repos_url": "https://api.github.com/users/amized/repos",
    "events_url": "https://api.github.com/users/amized/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amized/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2016-03-23T13:38:09Z",
  "updated_at": "2016-04-15T20:00:23Z",
  "closed_at": "2016-04-15T20:00:23Z",
  "author_association": "NONE",
  "body": "I have a real-time redux-react app that is performance critical. I have lot’s of components on the page that may update very frequently.\n\nI noticed that some of my animations were running jerkily and general component updates were lagging when lots of actions were being dispatched in a small space of time (say 40 per second). I run a Mac 10.9.5 with the latest chrome.\n\nI ran performance diagnostics using the react tools and then optimised my app as much as possible (mainly using shouldComponentUpdate), making sure no time was wasted in unnecessary DOM reconciliation or rendering.\n\nBut even after doing this, my app was still lagging. So I dug deeper by running a CPU profile in chrome devtools. I noticed that at the times when my animations were running jerkily or slow, the react setState() method calls were taking up to 25 ms - 30 ms on average. \n\nThat would only allow a maximum of 30 component updates a second before performance hits the wall, which in my case is an unacceptable limit. I also ran a timeline to see if it was browser painting that was slow - turns out no. Below you can see the majority of the work was being done inside scripts, not rendering. This seemed very odd to me.\n\n![screen shot 2016\n![screen shot 2016-03-23 at 11 42 02 pm](https://cloud.githubusercontent.com/assets/13376866/13986287/ba97e06c-f155-11e5-8470-8ece5ffbfa7a.png)\n-03-24 at 12 11 41 am](https://cloud.githubusercontent.com/assets/13376866/13986269/9f33e6b8-f155-11e5-8a21-5681027e3a32.png)\n\nSo I looked at the function stack:\n\n![screen shot 2016-03-23 at 11 51 17 pm](https://cloud.githubusercontent.com/assets/13376866/13986382/4620c1f8-f156-11e5-8729-9fc6715d16d8.png)\n\nIn this example the setState method took 24 ms purely in scripting (not rendering) and you can see a large chuck of that was spent in ReactInputSelection.hasSelectionCapabilities, the light blue method in the bottom row.\n\nTracing it back this was being called from the ReactReconcileTransaction.js module.\n\n```\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n```\n\nIn here, supposedly React uses ReactInputSelection to restore an input selection after `<input>` and `<textarea>` components get updated. Naturally I wanted to see what would happen if I turned it off, so I took the SELECTION_RESTORATION task out of the transaction wrapper.\n\n```\n//var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\nvar TRANSACTION_WRAPPERS = [EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n```\n\nAnd guess what happened:\n\n![screen shot 2016-03-23 at 11 51 07 pm](https://cloud.githubusercontent.com/assets/13376866/13986479/bf2867ae-f156-11e5-81de-d043ed853089.png)\n\nThe extract same setState() calls took only 1ms - 3ms! Notice the aggregated total time went from 4.91 s in the first example to only 174 ms after turning off SELECTION_RESTORATION.\n\n**In others word, a > 1000% performance increase**. \n\nFor my app this was huge, and afterwards everything ran perfectly smooth.\n\nSo I have a few questions: \n- Why is the ReactInputSelection being called ferociously on almost every element I render, when I don’t even have any `<input>` or `<textarea>` elements in my components?\n- Why does the ReactInput selection restoration take so long? Is this a bug?\n- If this is a necessary cost, then can we have a way to disable selection restoration for performance critical apps that wouldn’t need to make use of that feature\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
