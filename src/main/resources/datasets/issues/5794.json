{
  "url": "https://api.github.com/repos/facebook/react/issues/5794",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/5794/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/5794/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/5794/events",
  "html_url": "https://github.com/facebook/react/issues/5794",
  "id": 125317891,
  "node_id": "MDU6SXNzdWUxMjUzMTc4OTE=",
  "number": 5794,
  "title": " Do we really need to write <MyComponent/> to call `Stateless functional components`?",
  "user": {
    "login": "stken2050",
    "id": 1316994,
    "node_id": "MDQ6VXNlcjEzMTY5OTQ=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/1316994?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stken2050",
    "html_url": "https://github.com/stken2050",
    "followers_url": "https://api.github.com/users/stken2050/followers",
    "following_url": "https://api.github.com/users/stken2050/following{/other_user}",
    "gists_url": "https://api.github.com/users/stken2050/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stken2050/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stken2050/subscriptions",
    "organizations_url": "https://api.github.com/users/stken2050/orgs",
    "repos_url": "https://api.github.com/users/stken2050/repos",
    "events_url": "https://api.github.com/users/stken2050/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stken2050/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2016-01-07T04:06:34Z",
  "updated_at": "2016-01-07T06:35:06Z",
  "closed_at": "2016-01-07T04:14:58Z",
  "author_association": "NONE",
  "body": "What I have discovered most excitingly in the last v0.14 release is Stateless functional components.\nI think this can unleash React power in JS functional programming realm.\n\nAccordingly, I have found the fact I do not have to write  `<MyComponent/>` to use my components since as long as I stick to Stateless functional components, all I need to do is to call the Stateless functional components in normal JS way, that is, `MyComponent();`.\nMore importantly, avoiding to write in the legacy way `<MyComponent/>`, I do not have to write `props`. like below:\n\nhttps://jsfiddle.net/r4y5kdoq/6/\n\n``` js\n  var ChildNumberComponent = (number) => (\n  <div>child{number}</div>\n  );\n\n  var ChildrenNumberComponent3 = () => {\n\n    var el = (\n    <div>\n        {ChildNumberComponent(0)}\n        {ChildNumberComponent(1)}\n        {ChildNumberComponent(2)}\n    </div>\n    );\n    return el;\n\n  };\n\n  var mount = ReactDOM.render(ChildrenNumberComponent3(), \n                    document.getElementById('container'));\n```\n\nhttps://jsfiddle.net/r4y5kdoq/7/\n\n``` js\n  var ChildNumberComponent = (number) => (\n  <div>child{number}</div>\n  );\n\n  var ChildrenNumberComponent5 = () => {\n\n    var el = (\n    <div>\n        {[ChildNumberComponent(0),\n      ChildNumberComponent(1),\n      ChildNumberComponent(2),\n      ChildNumberComponent(3),\n      ChildNumberComponent(4)]}\n    </div>\n    );\n    return el;\n\n  };\n\n  var mount = ReactDOM.render(ChildrenNumberComponent5(), \n                    document.getElementById('container'));\n```\n\nAlthough, I often encounter some warning that says:\n\n> Warning: Each child in an array or iterator should have a unique \"key\" prop. Check the top-level render call using <div>. See https://fb.me/react-warning-keys for more information.\n\nI think this is another issue.\n\nTo me, it's obvious that when we can express and use Components in vanilla JS function with `{ }` wrapping expression, it appears potentially much more powerful to write in the JS legacy functional way rather than to write  `<MyComponent someattr = {val} />` with `props` in the HTML way. In JSX, `MyComponent(val)` is simpler and more straightforward to call and receive the args and less rules of React we need to follow, although I don't have intention to deny to still have a wide option in the legacy HTML tag way.\n\nSo, this is my thought about not using `props` anymore for Stateless functional components.\n\n---\n\nThe another discovery is not using `state` anymore for stateful Components.\n\nThe major reason we have not had Stateless functional components until recently should be the fact we need to deal state in real world.\n\nI wrote a little helper component with my own event system that is [Time Engine](https://www.npmjs.com/package/timeengine)\n\n``` js\n  //***React state with life cycle is stateless sequence*****\n  var seqComponent = (__seq) => {\n\n    class SeqComponent extends React.Component {\n      constructor() {\n        super();\n        this.state = {\n          seq: __seq.t\n        };\n        var timeseq = __seq\n          .tMap((val) => {\n            this.setState({\n              seq: val\n            });\n          });\n      }\n      render() {\n        return (<span>{this.state.seq}</span>);\n      };\n    }\n\n    return (<SeqComponent/>);\n  };\n```\n\nThis helper Component is the only (to be hidden) place to write react `state` system, and with this special Component, I can deal stateful mutable Component with the pure functional Components such as:\n\n``` js\n var PhysicsComponent = () => {\n\n    var __seqElement = __([x, y]) //atomic update\n      .tMap(([x, y]) => (\n      <div>\n        <svg height = \"100%\"  width = \"100%\">\n            <circle r=\"3\" fill=\"red\"\n        cx = {50 + x * Drawscale} cy = {500 - y * Drawscale}/>\n        </svg>\n      </div>));\n\n    var el = (<div>{seqComponent(__seqElement)}</div>);\n\n    return el;\n  };\n\n  var mount = React.render(PhysicsComponent(), document.getElementById('container'));\n```\n\nThe working live demo is:\nhttp://sakurafunctional.github.io/demo/react-physics/\n\nCode:\nhttps://github.com/sakurafunctional/sakurafunctional.github.io/blob/master/demo/react-physics/index.jsx\n\nHopefully, I could show some potential of the new stateful Components and help others who want to seek a way to write stateful Components with Stateless functional components.\n\nOverall, I would like to hear your thought. Thanks.\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
