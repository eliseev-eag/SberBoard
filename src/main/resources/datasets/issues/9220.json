{
  "url": "https://api.github.com/repos/facebook/react/issues/9220",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9220/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9220/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9220/events",
  "html_url": "https://github.com/facebook/react/issues/9220",
  "id": 215317435,
  "node_id": "MDU6SXNzdWUyMTUzMTc0MzU=",
  "number": 9220,
  "title": "Document how React treats different attributes",
  "user": {
    "login": "MMeent",
    "id": 2960313,
    "node_id": "MDQ6VXNlcjI5NjAzMTM=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/2960313?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MMeent",
    "html_url": "https://github.com/MMeent",
    "followers_url": "https://api.github.com/users/MMeent/followers",
    "following_url": "https://api.github.com/users/MMeent/following{/other_user}",
    "gists_url": "https://api.github.com/users/MMeent/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MMeent/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MMeent/subscriptions",
    "organizations_url": "https://api.github.com/users/MMeent/orgs",
    "repos_url": "https://api.github.com/users/MMeent/repos",
    "events_url": "https://api.github.com/users/MMeent/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MMeent/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2017-03-20T02:22:15Z",
  "updated_at": "2017-10-08T18:31:39Z",
  "closed_at": "2017-10-08T18:31:39Z",
  "author_association": "NONE",
  "body": "As of #9106 there are quite a lot of tests for HTML's boolean properties on tags. According to these tests HTML properties should get rendered into empty strings or not set, e.g. `<div hidden={true} />` should render to `<div hidden=\"\" />` and `<div hidden={false} />` should render to `<div />`. \r\n\r\nBut when I look further, there are other tests which do similar things: `<a href={true} />` should render to `<a href=\"true\" />`. This means that if I take `true` as my property value, I will not know what the result will be. \r\n\r\nThe issue being: React currently does not have a clearly-defined and documented way with which they handle their props. Could the docs be updated to specify which type of prop will result in what? e.g. \"any number gets parsed to a string (using Number.toString()), an object gets stringified by using `arg => Object.entries(arg).map(([key, val]) => `${key}: ${val};`).join()`, and booleans toggle the property.\"\r\n\r\nIn short, these are the bugs/undocumented features/contradictions that the tests expect to happen, plus my expectations:\r\n\r\n- `prop={true}` gets parsed to [`prop=\"\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L222) or [`prop=\"true\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L209) for select properties  \r\n    expected: either `prop=\"\"` or `prop=\"prop\"`, not both // as per checked=checked HTML standard\r\n- `prop=\"\"` gets parsed as [`prop=\"\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L303) or [` `](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L239)  \r\n    expected: `prop=\"\"`\r\n- `prop=\"prop\"` might get parsed as either [`prop=\"prop\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L286), [`prop=\"\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L231) or even [` `](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L376)  \r\n    expected: `prop=\"prop\"`\r\n- `prop=\"foo\"` => [`prop=\"\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L245) or [`prop=\"foo\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L286)  \r\n    expected: `prop=\"foo\"`\r\n- `prop={false}` => [` `](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L282) or [`prop=\"false\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L316)  \r\n    expected: ` `\r\n- `prop={['foo', 'bar']}` => [`prop=\"\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L252) or `prop=\"foo,bar\"` (hand-tested, no automatic test available)  \r\n    expected: `prop=\"foo bar\"`\r\n- `prop={{foo: 'bar', baz: 5}}` => [`prop=\"\"`](https://github.com/facebook/react/blob/78761c387f7ab24b0dbbb63e9085b26b808e5330/src/renderers/dom/shared/__tests__/ReactDOMServerIntegration-test.js#L257) or [`prop=\"foo: bar; baz: 5;\"`](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js#L1180) or `prop=\"[object Object]\"` (hand-tested, no automatic test available)  \r\n    expected: `prop=\"foo: bar; baz: 5\"` // as per style object transform\r\n\r\nHacky showcase: https://jsfiddle.net/ox8a7vfe/3/\r\n\r\nAre these features or are these bugs?\r\n\r\nIf they are bugs, and work is going to be done on the props value parsing, then the following might be a nice addition:\r\n\r\n- `prop={{foo: true, bar: true, baz: false}}` => `prop=\"foo bar\"` // render all `true` keys, disregard `false` keys, like classNames.",
  "closed_by": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  }
}
