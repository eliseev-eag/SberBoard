{
  "url": "https://api.github.com/repos/facebook/react/issues/16993",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16993/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16993/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16993/events",
  "html_url": "https://github.com/facebook/react/issues/16993",
  "id": 501749413,
  "node_id": "MDU6SXNzdWU1MDE3NDk0MTM=",
  "number": 16993,
  "title": "Add DevTools visualization for SSR hydration",
  "user": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710573595,
      "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
      "name": "Component: Developer Tools",
      "color": "fbca04",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-10-02T22:01:29Z",
  "updated_at": "2019-10-11T20:13:32Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "body": "This feature relates to several new React APIs: concurrent mode, suspense, and server rendering / hydration\r\n\r\n# Background info\r\nWhen hydrating server-rendered content, React starts working on the outermost Suspense boundary and works its way in. During hydration, the server rendered HTML isn't interactive. React records events to replay them once content becomes interactive- (but that doesn't actually happen until React finishes work on the nearest boundary and commits it). React may also reprioritize the order in which boundaries are processed (so that boundaries with pending events get processed sooner).\r\n\r\nThis general process can be hard to reason about and debug, because much of it is not observable visually (beyond some interactions potentially feeling more laggy than expected).\r\n\r\nDevTools already provides some visual overlays (e.g. which elements were rendered by the currently selected Component, [\"highlight updates\"](https://github.com/facebook/react/pull/16989)). Perhaps DevTools could help here too by visualizing which boundaries in the tree have been hydrated.\r\n\r\n# Visualizing hydration progress\r\n1. When React begins hydrating a new root<sup>1</sup> DevTools will show a visual overlay<sup>2</sup> that covers the entire DOM element container.\r\n1. As React hydrates and commits each new level of Suspense boundaries, DevTools will draw the overlay to only cover the not-yet-hydrated boundaries.\r\n1. Once hydration is completed, all overlays will be cleared<sup>3</sup>.\r\n\r\nThis feature would be opt-in via a new DevTools setting.\r\n\r\n<sup>1</sup> This suggests a new React-to-DevTools hook to inform DevTools when hydration starts.\r\n\r\n<sup>2</sup> This overlay would nee to be designed. Perhaps some combination of semi-transparent with stripes or bars so that it is high contrast enough to be seen.\r\n\r\n<sup>3</sup> Because the data required to draw these overlays is essentially just a timestamp and a set of rects, some form of replay might be a nice addition.\r\n\r\n# Special cases\r\nIt could be helpful to highlight a couple of special cases by temporarily showing a different style overlay:\r\n\r\n* **Client rendered content inside of a server rendered fallback.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2030-L2039)) In some cases, the server rendered content may be a forced fallback that gets filled in with client rendered content.\r\n* **React can't complete hydration fast enough to process a client-side update.** ([This case.](https://github.com/facebook/react/blob/bb680a09052b5af6543daf28bfcc3283bbc35cf9/packages/react-reconciler/src/ReactFiberBeginWork.js#L2064-L2074)) In this case, React ends up deleting the server-rendered content and replacing it with client rendered content. For example, a layout effect may set state on an ancestor that updates context. This update is synchronous (because it comes from within a layout effect) so it immediately expires.\r\n\r\nI don't know if the above cases can be reliably detected by DevTools at present. They may require additional information (or an additional React-to-DevTools hook).\r\n\r\nThe following case does **not** need to be highlighted because it is not a deopt:\r\n* **Server rendered content removed before hydration.** In some cases, server rendered content is thrown away before hydration completes because of a user interaction. For example, if the user navigates to a new page before the initial page has finished hydrating.",
  "closed_by": null
}
