{
  "url": "https://api.github.com/repos/facebook/react/issues/6616",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/6616/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/6616/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/6616/events",
  "html_url": "https://github.com/facebook/react/issues/6616",
  "id": 150978960,
  "node_id": "MDU6SXNzdWUxNTA5Nzg5NjA=",
  "number": 6616,
  "title": "Preserving state through Props-turtleshell",
  "user": {
    "login": "evenstensberg",
    "id": 16735925,
    "node_id": "MDQ6VXNlcjE2NzM1OTI1",
    "avatar_url": "https://avatars0.githubusercontent.com/u/16735925?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/evenstensberg",
    "html_url": "https://github.com/evenstensberg",
    "followers_url": "https://api.github.com/users/evenstensberg/followers",
    "following_url": "https://api.github.com/users/evenstensberg/following{/other_user}",
    "gists_url": "https://api.github.com/users/evenstensberg/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/evenstensberg/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/evenstensberg/subscriptions",
    "organizations_url": "https://api.github.com/users/evenstensberg/orgs",
    "repos_url": "https://api.github.com/users/evenstensberg/repos",
    "events_url": "https://api.github.com/users/evenstensberg/events{/privacy}",
    "received_events_url": "https://api.github.com/users/evenstensberg/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2016-04-25T20:58:04Z",
  "updated_at": "2016-04-26T00:03:18Z",
  "closed_at": "2016-04-25T22:20:15Z",
  "author_association": "NONE",
  "body": "# Preserving state through Props-turtleshell\n\nBeen experimenting a bit with migrating props and state together and watch changes and how they could be used to preserve a state through multiple render passes. As addressed in #4595 , I'd like to see how this approach would turn out to be.\n\nProps are much better to pass values than state, and how people will use this feature would be exciting to hopefully see!  \n\nTo first point out some flaws that needs fix in order for this to fully function (from my perspective)\n1. A very own special method that only keeps track of state that has been called upon and not the entire tree. \n2. Loose state wrappers \n\n**_I'll go in-depth later, after explaining how this would look_**\n## [Fetching state and passing them as props]()\n\n---\n\nFor now, I've just used a deep-expensive method. For stylus-sake, I've used a function as a wrapper to make it more approachable, like you can see in the picture. \n\n---\n\n![skjermbilde 2016-04-25 kl 22 25 54](https://cloud.githubusercontent.com/assets/16735925/14797793/b394ab1c-0b34-11e6-8822-f75204e2c87a.png)\n\n---\n\nNow, there's a lot of sketchy things going on in the `onClick` attribute, but this is highly experimental for now. What is really good about this solution, is that it doesn't nest states as children, as other proposals. It rather passes your state as a `prop`  and then updates the prop based on the previous state. ( I honestly don't have a clue why I added `transferProps` with this code ) \n\n---\n\nAnd that is the intended use case here. To avoid having state as children of the parent state or as children methods. This code is also highly reusable, once perfected. For now, this is not-so-highly performance-friendly to reuse, mainly because I'm using `replaceState` which in itself is a expensive task. Also, it breaks, when used in the long term, like this: \n\n---\n\n![giphy](https://cloud.githubusercontent.com/assets/16735925/14798417/cc628b3e-0b37-11e6-8bae-c91dc9760bc1.gif)\n\n![skjermbilde 2016-04-25 kl 19 07 10](https://cloud.githubusercontent.com/assets/16735925/14798433/db2d78d6-0b37-11e6-93df-58125b92c5ab.png)\n## [State to Props lifecycle functions]()\n\nAs mentioned, I used `replaceState`. Could also have used `setState`, but really, we should not have any of those for this feature. If this feature is a good way to keep track of state, I'd like to see the following: \n- **State-to-props lifecycle** \n  \n  Why? `setState` and `replaceState` should only be set on the existing state. The new prop returned would allow  us to take the previous state, and ignore any other value passed by previous states. This would allow us a much faster transition from `prevState` to `theNewProp`, where we just update state as a new value of prop, rather than re-rendering the entire state tree.\n- **Props-to-state lifecycle**\n  \n  Why? We need some insurance that state is a valid state. Maybe as a callback function that takes the current props and allows you to set a new state value, like `getInitialState` with props as its arguments.\n\nWe've covered the most here. Maybe one thing to add up, is that we don't need to keep track of the entire state tree, as long as we get the previous returned state valid. This brings me up to issue 2. I'm not sure how React is set up with this right now with state wrappers, but I think it will need some fixes if this is implemented/considered. \n\n(I tried making this as an addon without breaking encapsulation. It didn't work because I was trying to make the lifecycle functions/methods from external modules.( Yeah, I'm a terrible programming citizen ðŸ˜­ )) \n\n**To clarify: For this, we need 2 new Lifecycle functions**\n\n_Making sure people gets informed about this issue_, @sebmarkbage @gaearon @zpao @jimfb \n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
