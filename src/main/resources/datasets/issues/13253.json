{
  "url": "https://api.github.com/repos/facebook/react/issues/13253",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13253/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13253/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13253/events",
  "html_url": "https://github.com/facebook/react/pull/13253",
  "id": 343822599,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjAzMzY0Njgz",
  "number": 13253,
  "title": "Profiler integration with interaction-tracking package",
  "user": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    },
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2018-07-23T22:46:55Z",
  "updated_at": "2018-09-01T16:04:59Z",
  "closed_at": "2018-08-29T01:58:12Z",
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/13253",
    "html_url": "https://github.com/facebook/react/pull/13253",
    "diff_url": "https://github.com/facebook/react/pull/13253.diff",
    "patch_url": "https://github.com/facebook/react/pull/13253.patch"
  },
  "body": "## TODO before merge\r\n- [x] Land `interaction-tracking/subscribers` target via PR #13426\r\n- [x] Verify that React supports multi-subscribers via `interaction-tracking/subscribers`\r\n- [x] ~~Fix the build process so that the `interaction-tracking` imports/requires are stripped if the `enableInteractionTracking` feature flag is not enabled. Rollup is not currently removing the unused require.~~ This will be handle via a follow-up task. See [this comment](https://github.com/facebook/react/pull/13253#issuecomment-416741127) for more context.\r\n\r\n# Implementation details\r\n\r\nFor the purposes of this PR, I have created a standalone package (interaction-tracking) that events can be registered with. Usage of this package is _optional_, and it has no dependencies on React. We may not end up using this implementation, but will probably use something that's conceptually similar.\r\n\r\n## Scheduling work for an interaction\r\n\r\nProfiling builds of React track when renders are caused by an interaction(s). React does this by asking the interaction-tracking library if it's currently tracking anything when new work is scheduled. (This is done inside of `scheduleWork` and `scheduleCallbackWithExpirationTime`.) When there are active interactions, React stores them– along with the expiration time they're being scheduled with– on the `FiberRoot` in a `pendingInteractionMap` Map.\r\n\r\n### Associating an interaction with async work\r\n\r\nWhen React begins working on a new batch of work (in `performWorkOnRoot`) it scans the `pendingInteractionMap` Map and filters by the current expiration time in order to determine which interactions scheduled the current work. This filtered list of interactions is stored on the root as `memoizedInteractions`.\r\n\r\nBefore calling any user code (in `commitRoot` and `renderRoot`) React temporarily restores these cached interactions using an advanced part of the interaction-tracking package API. This ensures that new async work (cascading work) that's created will also be associated with the original interaction(s).\r\n\r\nReact also manges notifying any interaction subscribers when new work has been started/stopped.\r\n\r\n### Notifying `Profiler` callbacks\r\n\r\nWhen committing a `Profiler`, React reads the `memoizedInteractions` Set from the current root and passes the interactions along to the `onRender` callback.\r\n\r\n### DevTools integration\r\n\r\nWhen the DevTools `onCommitRoot` is called, it reads the `memoizedInteractions` Set from the committed root in order to determine if any interactions were processed.\r\n\r\n# Open questions\r\n\r\n- [x] With this implementation, we are storing interactions _globally_ (at the root level) for simplicity. This means that we won't have the ability to scope an interaction with a part of the tree that it occurred in, only that it was related to some part of the tree during the current render. This may be sufficient. If it turns out not to be, and we need fine grained interaction tracking– then we would have to add a field to every `Fiber` to store the pending interactions when an update is scheduled. Then in begin/complete work, we'd have to start/stop (push/pop) continuations to properly handle cascading updates and to ensure the right `onRender` params.\r\n- [x] Are we comfortable adding a new dependency (interaction-tracking) to all renderers (e.g. react-dom, react-native, react-test-renderer, etc)?",
  "closed_by": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  }
}
