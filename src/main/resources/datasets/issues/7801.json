{
  "url": "https://api.github.com/repos/facebook/react/issues/7801",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/7801/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/7801/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/7801/events",
  "html_url": "https://github.com/facebook/react/issues/7801",
  "id": 178994262,
  "node_id": "MDU6SXNzdWUxNzg5OTQyNjI=",
  "number": 7801,
  "title": "JSX Spread tag proposal",
  "user": {
    "login": "quassnoi",
    "id": 588458,
    "node_id": "MDQ6VXNlcjU4ODQ1OA==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/588458?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/quassnoi",
    "html_url": "https://github.com/quassnoi",
    "followers_url": "https://api.github.com/users/quassnoi/followers",
    "following_url": "https://api.github.com/users/quassnoi/following{/other_user}",
    "gists_url": "https://api.github.com/users/quassnoi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/quassnoi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/quassnoi/subscriptions",
    "organizations_url": "https://api.github.com/users/quassnoi/orgs",
    "repos_url": "https://api.github.com/users/quassnoi/repos",
    "events_url": "https://api.github.com/users/quassnoi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/quassnoi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2016-09-23T23:30:47Z",
  "updated_at": "2016-09-25T20:36:06Z",
  "closed_at": "2016-09-25T20:36:06Z",
  "author_association": "NONE",
  "body": "This is a feature request.\n\nIt is a common request from developers to allow returning multiple elements from inline expressions in JSX.\n\nhttp://stackoverflow.com/questions/23840997/how-to-return-multiple-lines-jsx-in-another-return-statement-in-react\n\nA use case for this would be this pseudocode:\n\n```\n<Parent>{ flag ? <Child/> : <Sibling1/><Sibling2/><Sibling3/>}</Parent>\n```\n\nwhich would have React generate either `<Parent><Child/></Parent>` or `<Parent><Sibling1/><Sibling2/><Sibling3/></Parent>`, depending on the value of the flag.\n\nAs it stands now, this would not work, as two or more consecutive tags would not transpile to a single expression.\n\nThere are several approaches to that problem:\n1. Wrap the elements into some kind of a parent tag:\n   \n   ```\n   <Parent>{ flag ? <Child/> : <DummyTag><Sibling1/><Sibling2/><Sibling3/></DummyTag>}</Parent>\n   ```\n   \n   This is not always acceptable.\n2. Use arrays:\n   \n   ```\n   <Parent>{ flag ? [<Child/>] : [<Sibling1/><Sibling2/><Sibling3/>]}</Parent>\n   ```\n   \n   This would make React complain on the elements in the second array having no unique `key` property, and adding that property would take some extra effort.\n3. Use keyed fragments (https://github.com/facebook/react/issues/2127)\n   \n   ```\n   <Parent>{ flag ? <Child/> : React.addons.createFragment({ sibling1: <Sibling1/>, sibling2: <Sibling2/>, sibling3: <Sibling3/>})}</Parent>\n   ```\n   \n   This requires using addons, assigning arbitrary keys to the fragments and the syntax is quite cumbersome.\n4. Use `createElement` directly, making benefit of ES6 spread syntax:\n   \n   ```\n   React.createElement('parent', {}, ...(flag ? [<Child/>] : [<Sibling1/><Sibling2/><Sibling3/>]))\n   ```\n   \n   This is the most straightforward way, as it would be equivalent to either `React.createElement('parent', {}, <Child/>)` or `React.createElement('parent', {}, <Sibling1/>, <Sibling2/>, <Sibling3/>)`, but it's not JSX anymore.\n\nMy proposal is to make use of the latter solution in JSX, extending JSX with a Spread tag: `<...>`\n\nThis tag could only be used as a non-top element in a JSX tree and could only contain a single JS expression in curly braces, which must evaluate to an array.\n\nThis way, the original problem could be solved by writing:\n\n```\n<Parent/><...>{ flag ? [<Child/>] : [<Sibling1>, <Sibling2>, <Sibling3>]}</...><Parent/>\n```\n\nwhich would transpile as follows:\n\n```\nReact.createElement('parent', {},\n    ...(flag ?\n        [React.createElement('child', {})] : \n        [React.createElement('sibling1', {}),\n         React.createElement('sibling2', {}),\n         React.createElement('sibling3', {})]\n    )\n);\n```\n\nThis is almost as simple as the naive solution at the very top, and it produces the exact effect most developers are after: variable number of arguments to `createElement` with no need to create keys or wrap elements into dummy tags.\n",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
