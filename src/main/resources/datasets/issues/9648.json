{
  "url": "https://api.github.com/repos/facebook/react/issues/9648",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9648/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9648/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9648/events",
  "html_url": "https://github.com/facebook/react/issues/9648",
  "id": 227641576,
  "node_id": "MDU6SXNzdWUyMjc2NDE1NzY=",
  "number": 9648,
  "title": "[Fiber] Custom ReactFiberReconciler renderer receives old props in commitUpdate after setState in parent component.",
  "user": {
    "login": "HriBB",
    "id": 4412324,
    "node_id": "MDQ6VXNlcjQ0MTIzMjQ=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4412324?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/HriBB",
    "html_url": "https://github.com/HriBB",
    "followers_url": "https://api.github.com/users/HriBB/followers",
    "following_url": "https://api.github.com/users/HriBB/following{/other_user}",
    "gists_url": "https://api.github.com/users/HriBB/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/HriBB/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/HriBB/subscriptions",
    "organizations_url": "https://api.github.com/users/HriBB/orgs",
    "repos_url": "https://api.github.com/users/HriBB/repos",
    "events_url": "https://api.github.com/users/HriBB/events{/privacy}",
    "received_events_url": "https://api.github.com/users/HriBB/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2017-05-10T10:57:05Z",
  "updated_at": "2017-05-10T18:51:13Z",
  "closed_at": "2017-05-10T18:14:54Z",
  "author_association": "NONE",
  "body": "Hi\r\n\r\nI am not sure if this is a bug or not, probably I am doing something wrong, just want to make sure. I am trying to create a [PaperJS](http://paperjs.org/) bridge for React, based on [ReactARTFiber](https://github.com/reactjs/react-art/blob/master/src/ReactARTFiber.js).\r\n\r\nI am running Ubuntu 16.04, Chrome Version 58.0.3029.96 (64-bit) and using a hacked version of React `16.0.0-alpha.12`, where I export `ReactFiberReconciler` through `react-dom`. (I know about #9103, how can we import `ReactFiberReconciler` in the mean time?)\r\n\r\nAnyway, below is the code for my App. App component has a `changePathColor` method, where I do `this.setState({ strokeColor: newColor })`, which triggers a re-render, but the `commitUpdate` function in `PaperRenderer` receives the old value for `strokeColor`.\r\n\r\nBTW I have some other questions, what would be the best place to ask or learn more about fiber, apart from the source code?\r\n\r\n```\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport invariant from 'fbjs/lib/invariant'\r\nimport emptyObject from 'fbjs/lib/emptyObject'\r\nimport { ReactFiberReconciler } from 'react-dom'\r\n\r\nimport paper from 'paper'\r\n\r\nconst COLORS = [\r\n  'red',\r\n  'black',\r\n  'green',\r\n  'orange',\r\n  'brown',\r\n  'violet',\r\n]\r\n\r\nconst TYPES = {\r\n  LAYER: 'Layer',\r\n  PATH: 'Path',\r\n  CIRCLE: 'Circle',\r\n  GROUP: 'Group',\r\n  TOOL: 'Tool',\r\n}\r\n\r\nconst SEGMENTS = [\r\n  // ...\r\n]\r\n\r\nconst SEGMENTS2 = [\r\n  // ...\r\n]\r\n\r\nconst Layer = TYPES.LAYER\r\nconst Path = TYPES.PATH\r\nconst Circle = TYPES.CIRCLE\r\nconst Group = TYPES.GROUP\r\nconst Tool = TYPES.TOOL\r\n\r\nfunction getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      strokeColor: COLORS[0],\r\n      activeTool: 'move',\r\n      width: 800,\r\n      height: 600,\r\n      zoom: 1,\r\n      circles: [\r\n        { id: 1, center: [100,100], radius: 40, strokeColor: 'black', strokeScaling: false },\r\n        { id: 2, center: [150,150], radius: 30, strokeColor: 'red', strokeScaling: false },\r\n        { id: 3, center: [200,200], radius: 35, strokeColor: 'green', strokeScaling: false },\r\n      ],\r\n    }\r\n  }\r\n\r\n  addCircle = () => {\r\n    const { circles, height, width } = this.state\r\n    const newCircles = [...circles, {\r\n      id: circles.length + 1,\r\n      center: [getRandomInt(0,width),getRandomInt(0,height)],\r\n      radius: getRandomInt(10,60),\r\n      strokeColor: COLORS[getRandomInt(0,COLORS.length-1)],\r\n      strokeScaling: false,\r\n    }]\r\n    this.setState({ circles: newCircles })\r\n  }\r\n\r\n  changePathColor = () => {\r\n    const { strokeColor } = this.state\r\n    const index = COLORS.indexOf(strokeColor)\r\n    const nextColor = COLORS[index+1] || COLORS[0]\r\n    this.setState({ strokeColor: nextColor }, () => { // <<<<<<<<< change strokeColor\r\n      console.log('strokeColor should be', nextColor)\r\n    })\r\n  }\r\n\r\n  onWheel = (e) => {\r\n    const { activeTool, zoom } = this.state\r\n    if (activeTool === 'move') {\r\n      const delta = e.wheelDelta || -e.deltaY\r\n      const newZoom = delta > 0 ? zoom * 1.1 : zoom / 1.1\r\n      this.setState({ zoom: newZoom })\r\n    }\r\n  }\r\n\r\n  onMoveMouseDown = (e, scope) => {\r\n    this.point = e.point\r\n  }\r\n\r\n  onMoveMouseDrag = (e) => {\r\n    // TODO this.setState({ center: ... })\r\n    e.tool.view.scrollBy(this.point.subtract(e.point))\r\n  }\r\n\r\n  onMoveMouseUp = (e) => {\r\n    this.point = null\r\n  }\r\n\r\n  onPenMouseDown = (e) => {\r\n    if (this.path) {\r\n      this.path.selected = false\r\n    }\r\n    this.path = new paper.Path({\r\n      segments: [e.point],\r\n      strokeColor: 'black',\r\n      fullySelected: true\r\n    })\r\n  }\r\n\r\n  onPenMouseDrag = (e) => {\r\n    this.path.add(e.point)\r\n  }\r\n\r\n  onPenMouseUp = (e) => {\r\n  \tthis.path.simplify(10)\r\n  \tthis.path.fullySelected = true\r\n  }\r\n\r\n  render() {\r\n    const { activeTool, circles, strokeColor, height, width, zoom } = this.state\r\n    const paperProps = {\r\n      activeTool,\r\n      strokeColor,\r\n      height,\r\n      width,\r\n      zoom,\r\n      onWheel: this.onWheel,\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>App</h1>\r\n        <div>\r\n          <span>Tools: </span>\r\n          <button onClick={() => this.setState({ activeTool: 'move' })}>Move</button>\r\n          <button onClick={() => this.setState({ activeTool: 'pen' })}>Pen</button>\r\n          <span> | Active tool: </span>\r\n          <b>{activeTool}</b>\r\n          <span> | Color: </span>\r\n          <button onClick={this.changePathColor}>{strokeColor}</button>\r\n          <span> | </span>\r\n          <button onClick={this.addCircle}>Add Circle</button>\r\n        </div>\r\n        <Paper {...paperProps}>\r\n          <Layer>\r\n            <Path segments={SEGMENTS} strokeColor={strokeColor} strokeScaling={false} />\r\n            <Group>\r\n              <Circle center={[333,333]} radius={20} strokeColor={'black'} fillColor={'green'} strokeScaling={false} />\r\n            </Group>\r\n          </Layer>\r\n          <Layer>\r\n            <Path dashArray={[6,4]} segments={SEGMENTS2} strokeColor={strokeColor} strokeScaling={false} />\r\n            <Group>\r\n              <Circle center={[464,444]} radius={20} strokeColor={'black'} fillColor={'orange'} strokeScaling={false} />\r\n            </Group>\r\n          </Layer>\r\n          <Layer>\r\n            {circles.map(circle => <Circle key={circle.id} {...circle} />)}\r\n          </Layer>\r\n          <Tool\r\n            name={'move'}\r\n            onMouseDown={this.onMoveMouseDown}\r\n            onMouseDrag={this.onMoveMouseDrag}\r\n            onMouseUp={this.onMoveMouseUp}\r\n          />\r\n          <Tool\r\n            name={'pen'}\r\n            onMouseDown={this.onPenMouseDown}\r\n            onMouseDrag={this.onPenMouseDrag}\r\n            onMouseUp={this.onPenMouseUp}\r\n          />\r\n        </Paper>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nclass Paper extends Component {\r\n\r\n  componentDidMount() {\r\n    const { activeTool, children, height, width, zoom } = this.props\r\n\r\n    this._paper = new paper.PaperScope()\r\n    this._paper.setup(this._canvas)\r\n\r\n    this._paper.view.viewSize = new paper.Size(width, height)\r\n\r\n    this._paper.view.zoom = zoom\r\n\r\n    this._mountNode = PaperRenderer.createContainer(this._paper)\r\n\r\n    PaperRenderer.updateContainer(\r\n      children,\r\n      this._mountNode,\r\n      this,\r\n    )\r\n\r\n    this._paper.view.draw()\r\n\r\n    if (activeTool) {\r\n      this._paper.tools.forEach(tool => {\r\n        if (tool.name === activeTool) {\r\n          tool.activate()\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { activeTool, children, height, width, zoom } = this.props\r\n\r\n    if (width !== prevProps.width || height !== prevProps.height) {\r\n      this._paper.view.viewSize = new paper.Size(width, height)\r\n    }\r\n\r\n    if (zoom !== prevProps.zoom) {\r\n      this._paper.view.zoom = zoom\r\n    }\r\n\r\n    PaperRenderer.updateContainer(\r\n      children,\r\n      this._mountNode,\r\n      this,\r\n    )\r\n\r\n    this._paper.view.draw()\r\n\r\n    if (activeTool !== prevProps.activeTool) {\r\n      this._paper.tools.forEach(tool => {\r\n        if (tool.name === activeTool) {\r\n          tool.activate()\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    PaperRenderer.updateContainer(\r\n      null,\r\n      this._mountNode,\r\n      this,\r\n    )\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.strokeColor);\r\n    const { height, onWheel, width } = this.props\r\n    const canvasProps = {\r\n      ref: ref => this._canvas = ref,\r\n      height,\r\n      onWheel,\r\n      width,\r\n    }\r\n    return (\r\n      <canvas {...canvasProps} />\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\nfunction applyLayerProps(instance, props, prevProps = {}) {\r\n  // TODO\r\n}\r\n\r\nfunction applyToolProps(tool, props, prevProps = {}) {\r\n  // TODO\r\n}\r\n\r\nfunction applyGroupProps(tool, props, prevProps = {}) {\r\n  // TODO\r\n}\r\n\r\nfunction applyCircleProps(instance, props, prevProps = {}) {\r\n  if (props.center !== prevProps.center) {\r\n    instance.center = new paper.Point(props.center)\r\n  }\r\n  if (props.strokeColor !== prevProps.strokeColor) {\r\n    instance.strokeColor = props.strokeColor\r\n  }\r\n  if (props.strokeWidth !== prevProps.strokeWidth) {\r\n    instance.strokeWidth = props.strokeWidth\r\n  }\r\n  if (props.fillColor !== prevProps.fillColor) {\r\n    instance.fillColor = props.fillColor\r\n  }\r\n}\r\n\r\nfunction applyPathProps(instance, props, prevProps = {}) {\r\n  console.log('applyPathProps', props.strokeColor) // <<<<<<<< strokeColor does not change\r\n  if (props.strokeColor !== prevProps.strokeColor) {\r\n    instance.strokeColor = props.strokeColor\r\n  }\r\n  if (props.strokeWidth !== prevProps.strokeWidth) {\r\n    instance.strokeWidth = props.strokeWidth\r\n  }\r\n}\r\n\r\n\r\nconst PaperRenderer = ReactFiberReconciler({\r\n\r\n  appendChild(parentInstance, child) {\r\n    if (child.parentNode === parentInstance) {\r\n      child.remove()\r\n    }\r\n\r\n    if (\r\n      child instanceof paper.Path &&\r\n      (\r\n        parentInstance instanceof paper.Layer ||\r\n        parentInstance instanceof paper.Group\r\n      )\r\n    ) {\r\n      child.addTo(parentInstance)\r\n    }\r\n  },\r\n\r\n  appendInitialChild(parentInstance, child) {\r\n    if (typeof child === 'string') {\r\n      // Noop for string children of Text (eg <Text>{'foo'}{'bar'}</Text>)\r\n      invariant(false, 'Text children should already be flattened.')\r\n      return\r\n    }\r\n\r\n    if (\r\n      child instanceof paper.Path &&\r\n      (\r\n        parentInstance instanceof paper.Layer ||\r\n        parentInstance instanceof paper.Group\r\n      )\r\n    ) {\r\n      child.addTo(parentInstance)\r\n    }\r\n  },\r\n\r\n  commitTextUpdate(textInstance, oldText, newText) {\r\n    // Noop\r\n  },\r\n\r\n  commitMount(instance, type, newProps) {\r\n    // Noop\r\n  },\r\n\r\n  commitUpdate(instance, type, oldProps, newProps) {\r\n    console.log('commitUpdate', instance, type, newProps)\r\n    instance._applyProps(instance, newProps, oldProps)\r\n  },\r\n\r\n  createInstance(type, props, internalInstanceHandle) {\r\n    //console.log('createInstance', type, props)\r\n    const { children, ...paperProps } = props\r\n    let instance\r\n\r\n    switch (type) {\r\n      case TYPES.TOOL:\r\n        instance = new paper.Tool(paperProps)\r\n        instance._applyProps = applyToolProps\r\n        break\r\n      case TYPES.LAYER:\r\n        instance = new paper.Layer(paperProps)\r\n        instance._applyProps = applyLayerProps\r\n        break\r\n      case TYPES.GROUP:\r\n        instance = new paper.Group(paperProps)\r\n        instance._applyProps = applyGroupProps\r\n        break\r\n      case TYPES.PATH:\r\n        instance = new paper.Path(paperProps)\r\n        instance._applyProps = applyPathProps\r\n        break\r\n      case TYPES.CIRCLE:\r\n        instance = new paper.Path.Circle(paperProps)\r\n        instance._applyProps = applyCircleProps\r\n        break\r\n    }\r\n\r\n    invariant(instance, 'PaperReact does not support the type \"%s\"', type)\r\n\r\n    instance._applyProps(instance, props)\r\n\r\n    return instance\r\n  },\r\n\r\n  createTextInstance(text, rootContainerInstance, internalInstanceHandle) {\r\n    return text\r\n  },\r\n\r\n  finalizeInitialChildren(domElement, type, props) {\r\n    return false\r\n  },\r\n\r\n  insertBefore(parentInstance, child, beforeChild) {\r\n    invariant(\r\n      child !== beforeChild,\r\n      'PaperReact: Can not insert node before itself'\r\n    )\r\n\r\n    child.insertAbove(beforeChild)\r\n  },\r\n\r\n  prepareForCommit() {\r\n    // Noop\r\n  },\r\n\r\n  prepareUpdate(domElement, type, oldProps, newProps) {\r\n    return true\r\n  },\r\n\r\n  removeChild(parentInstance, child) {\r\n    //destroyEventListeners(child)\r\n\r\n    child.remove()\r\n  },\r\n\r\n  resetAfterCommit() {\r\n    // Noop\r\n  },\r\n\r\n  resetTextContent(domElement) {\r\n    // Noop\r\n  },\r\n\r\n  getRootHostContext() {\r\n    return emptyObject\r\n  },\r\n\r\n  getChildHostContext() {\r\n    return emptyObject\r\n  },\r\n\r\n  scheduleAnimationCallback: window.requestAnimationFrame,\r\n\r\n  scheduleDeferredCallback: window.requestIdleCallback,\r\n\r\n  shouldSetTextContent(props) {\r\n    return (\r\n      typeof props.children === 'string' ||\r\n      typeof props.children === 'number'\r\n    )\r\n  },\r\n\r\n  useSyncScheduling: true,\r\n})\r\n\r\nexport default App\r\n```\r\n",
  "closed_by": {
    "login": "HriBB",
    "id": 4412324,
    "node_id": "MDQ6VXNlcjQ0MTIzMjQ=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/4412324?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/HriBB",
    "html_url": "https://github.com/HriBB",
    "followers_url": "https://api.github.com/users/HriBB/followers",
    "following_url": "https://api.github.com/users/HriBB/following{/other_user}",
    "gists_url": "https://api.github.com/users/HriBB/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/HriBB/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/HriBB/subscriptions",
    "organizations_url": "https://api.github.com/users/HriBB/orgs",
    "repos_url": "https://api.github.com/users/HriBB/repos",
    "events_url": "https://api.github.com/users/HriBB/events{/privacy}",
    "received_events_url": "https://api.github.com/users/HriBB/received_events",
    "type": "User",
    "site_admin": false
  }
}
