{
  "url": "https://api.github.com/repos/facebook/react/issues/16753",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16753/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16753/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16753/events",
  "html_url": "https://github.com/facebook/react/issues/16753",
  "id": 492310313,
  "node_id": "MDU6SXNzdWU0OTIzMTAzMTM=",
  "number": 16753,
  "title": "RFC: Warning System Revamp",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": {
    "login": "Jessidhia",
    "id": 73085,
    "node_id": "MDQ6VXNlcjczMDg1",
    "avatar_url": "https://avatars1.githubusercontent.com/u/73085?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Jessidhia",
    "html_url": "https://github.com/Jessidhia",
    "followers_url": "https://api.github.com/users/Jessidhia/followers",
    "following_url": "https://api.github.com/users/Jessidhia/following{/other_user}",
    "gists_url": "https://api.github.com/users/Jessidhia/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Jessidhia/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Jessidhia/subscriptions",
    "organizations_url": "https://api.github.com/users/Jessidhia/orgs",
    "repos_url": "https://api.github.com/users/Jessidhia/repos",
    "events_url": "https://api.github.com/users/Jessidhia/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Jessidhia/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "Jessidhia",
      "id": 73085,
      "node_id": "MDQ6VXNlcjczMDg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/73085?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jessidhia",
      "html_url": "https://github.com/Jessidhia",
      "followers_url": "https://api.github.com/users/Jessidhia/followers",
      "following_url": "https://api.github.com/users/Jessidhia/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jessidhia/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jessidhia/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jessidhia/subscriptions",
      "organizations_url": "https://api.github.com/users/Jessidhia/orgs",
      "repos_url": "https://api.github.com/users/Jessidhia/repos",
      "events_url": "https://api.github.com/users/Jessidhia/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jessidhia/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-09-11T15:27:54Z",
  "updated_at": "2019-09-17T22:09:18Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "body": "This is a proposal to change how the internal warning system works.\r\n\r\n**Note: @Jessidhia is already working on this, please don't send PRs.**\r\n\r\n## Current System\r\n\r\nReact has a concept of \"warnings\". Conceptually, most of them should be treated as errors. They indicate bugs. For example, not fixing a \"key\" warning can result in very bad issues in production. For these \"warnings\", the only difference from a real error is that they don't throw and the checks are removed in production. Because they're expensive to do.\r\n\r\nReact warnings ultimately become `console.error` calls. In the source, they are expressed as `warning(cond, message, ...args)`. If the `cond` is false, the warning gets printed.\r\n\r\nBy default, calling `warning` will print a `console.error` with the current component stack appended at the end. Sometimes, we may not want the component stack. Maybe the warning is aggregated from many components (e.g. a StrictMode violation), and the stack is not relevant. In that case we have `warningWithoutStack`. It has the same API as `warning`, but doesn't append the stack. In fact, `warning(format, ...args)` is internally implemented as `warningWithoutStack(format + '%s', ...args, stack)`.\r\n\r\nWe also have a lesser-known `lowPriorityWarning` module. Unlike `warning` which uses `console.error`, `lowPriorityWarning` uses `console.warn`. It is \"lower severity\" (appears yellow in console), and we currently use it only for deprecation messages.\r\n\r\n## Problems\r\n\r\n* The naming is confusing. `warning`s are conceptually errors, and use `console.error`, but their name doesn't reflect that.\r\n* The `warning(cond, ...)` API is confusing. It is easy to forget whether `cond` is supposed to be `true` or `false` for the warning to fire. (Answer: it fires on `false`.) Due to this confusion, a bunch of callsites just do `if (!cond) warning(false, ...)` to avoid thinking about this.\r\n* `warning` and `lowPriorityWarning` have different default behavior. `warning` appends component stack by default, but `lowPriorityWarning` doesn't. This makes it difficult to \"downgrade\" a `warning` to `lowPriorityWarning` because we'd lose the stack and have to manually append it.\r\n* Some `warning`s don't actually represent \"errors\" in practice. They have too high severity. It's not a huge deal in the console. But if you start hooking up the console to richer mechanisms (e.g. an error dialog), the difference becomes more annoying. You want to clearly separate *what's broken today* from *what may break tomorrow*.\r\n\r\n## Ideal End State\r\n\r\n* All React warnings are audited and split into two severities: `error` (stuff that is likely broken today) and `warn` (stuff that may break in the future).\r\n  - This means we'll likely \"downgrade\" some mostly advisory warnings.\r\n* React codebase just calls `console.error` for severe warnings (potential bugs), and `console.warn` for mild warnings (e.g. deprecations).\r\n  - A build step may wrap them in `__DEV__ ` blocks, append the component stack, and otherwise tweak the implementation.\r\n\r\n## How Do We Get There?\r\n\r\n### Step 1. lowPriorityWarning() Parity\r\n\r\n* Rename `lowPriorityWarning` to `lowPriorityWarningWithoutStack`.\r\n* Add `lowPriorityWarning` which appends the stack (but don't add usages of it).\r\n\r\nThe goal here is just to make it easy to switch between `warning` <-> `lowPriorityWarning` or `warningWithoutStack` <-> `lowPriorityWarningWithoutStack` whenever we want.\r\n\r\nEnsure `toWarnDev` and `toLowPriorityWarnDev` matchers are equivalent too and both support `withoutStack` named argument.\r\n\r\nNotice there's `lowPriorityWarning.www.js` fork. It should be renamed to `lowPriorityWarningWithoutStack.www.js`, but it should keep reqiure-ing `lowPriorityWarning` inside (because it refers to an external module).\r\n\r\n### Step 2. Remove the condition argument\r\n\r\nWrite a codemod to convert all `warning(cond, format, ...args)` (and its `lowPriority*` or `*WithoutStack` variations) to `if (!cond) { warning(format, ...args) }`. If `cond` is already `false`, just omit the condition. You could do this manually but it seems error-prone. So I recommend a codemod.\r\n\r\nYou'll notice there are some \"forks\" of `warning`, like `warningWithoutStack.www.js` or `lowPriorityWarning.www.js`. You'll want to modify them to reflect the new API â€” but keep in mind that external files they reference still have the old API. So they need to \"translate\" it.\r\n\r\nDon't forget there are Babel plugins and build scripts that deal with `warning`. They probably make assumptions about its argument order that you will need to consider. Make sure we don't emit invalid code or accidentally stop transforming them.\r\n\r\n### Step 3. Renames\r\n\r\nMy proposal:\r\n\r\n* `warning` => `consoleError`\r\n* `warningWithoutStack` => `consoleErrorNoStack`\r\n* `lowPriorityWarning` => `consoleWarn`\r\n* `lowPriorityWarningWithoutStack` => `consoleWarnNoStack`\r\n* `toWarnDev` => `toConsoleErrorDev`\r\n* `toLowPriorityWarnDev` => `toConsoleWarnDev`\r\n* `{withoutStack}` => `{noStack}`\r\n\r\nMake sure all build transforms, the warning extraction script, and the forks continue working.\r\n\r\n### Step 4. Warning Audit\r\n\r\nSplit `consoleError` calls into two groups:\r\n\r\n* Actual likely bugs today (e.g. missing key, or an UNSAFE method in concurrent mode)\r\n* Possible future issues that don't cause bugs today (e.g. UNSAFE method in strict mode, or setState in unmounted component)\r\n\r\nDowngrade the second group to `consoleWarn` calls.\r\n\r\n### Follow-ups\r\n\r\nAt this point we'll be pretty close to direct `console.error` calls. I don't know if we want to actually start doing that in the source, and have transform catch that. If we do, we'd need to find a way to express \"no stack\" in some other way (or even always append them).\r\n\r\nIf we stick with `consoleError` imports, we might want to add a lint rule that prevents adding direct `console.error` calls except a few places where it's intentional. So that we don't mix them up.\r\n\r\n### How to Split Work\r\n\r\nThis is gonna touch a lot of files. Expect merge conflicts etc.\r\n\r\nI suggest splitting it like this:\r\n\r\n* Step 1 as a PR. We can land this fast.\r\n* Step 2 + Step 3 can be done as changes to build scripts + a codemod. It should be easy to re-run just the codemod. This is one PR.\r\n* Then Step 4 after previous PR lands.\r\n\r\n**I need to emphasize again that @Jessidhia is taking this so please don't send PRs.**",
  "closed_by": null
}
