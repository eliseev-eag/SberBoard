{
  "url": "https://api.github.com/repos/facebook/react/issues/4920",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/4920/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/4920/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/4920/events",
  "html_url": "https://github.com/facebook/react/issues/4920",
  "id": 107395173,
  "node_id": "MDU6SXNzdWUxMDczOTUxNzM=",
  "number": 4920,
  "title": "[Proposal] Alternative 'React.createElement' api and JSX output",
  "user": {
    "login": "osi-oswald",
    "id": 5512839,
    "node_id": "MDQ6VXNlcjU1MTI4Mzk=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/5512839?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/osi-oswald",
    "html_url": "https://github.com/osi-oswald",
    "followers_url": "https://api.github.com/users/osi-oswald/followers",
    "following_url": "https://api.github.com/users/osi-oswald/following{/other_user}",
    "gists_url": "https://api.github.com/users/osi-oswald/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/osi-oswald/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/osi-oswald/subscriptions",
    "organizations_url": "https://api.github.com/users/osi-oswald/orgs",
    "repos_url": "https://api.github.com/users/osi-oswald/repos",
    "events_url": "https://api.github.com/users/osi-oswald/events{/privacy}",
    "received_events_url": "https://api.github.com/users/osi-oswald/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2015-09-20T14:22:58Z",
  "updated_at": "2015-09-21T14:59:27Z",
  "closed_at": "2015-09-21T14:59:27Z",
  "author_association": "NONE",
  "body": "### Problem\n\nThe current **React.createElement** api is quite limiting in regards of **control flow statements**.\n\nConsider the following example\n\n``` javascript\nif (condition) {\n  <div>hello world</div>\n}\n```\n\nwill happily be transformed into\n\n``` javascript\nif (condition) {\n  React.createElement(\"div\", null, \"hello world\")\n}\n```\n\nbut as soon as I try to wrap the very same JSX statement in a component (ex. a 'div') it blows up\n\n``` javascript\n<div>\n  {if (condition) {\n    <div>hello world</div>\n  }}\n</div>\n```\n\nIt would be transformed into **invalid JS** because of how React.createElement is set up\n\n``` javascript\nReact.createElement(\"div\", null, \n  if (condition) {\n    React.createElement(\"div\", null, \"hello world\")\n  }\n)\n```\n### Workarounds\n\nOf course you can workaround this issue by using the ternary expression (only usable for trivial 'if bodies')\n\n``` javascript\n<div>\n  {condition ? <div>hello</div> : null}\n</div>\n```\n\nor a temporary variable (if the 'if body' is more complicated)\n\n``` javascript\nvar conditionResult;\nif (condition) {\n  conditionResult = <div>hello</div>\n}\n<div>\n  {conditionResult}\n</div>\n```\n\nThis 'splitting' of html hurts the readability quite a lot in my eyes. And worse, I am forced to do this 'splitting', there is no other choice :-( \n\n...at least until now :-)\n### Proposed Solution\n\nChange (or overload) the React.createElement signature from a **list of childrens** to a **single append function**\n\n``` javascript\nReact.createElement(type, props, ...children) // current signature\nReact.createElement(type, props, appendFn) // proposed signature\n```\n\nHow does this 'appendFn' approach work? Let's explain it through examples:\n\n``` javascript\n// simple JSX\n<div id=\"msg\">\n  Hello\n  <b>World!</b>\n</div>\n\n// current JS output\nReact.createElement(\"div\", {id: \"msg\"}, \n  \"Hello\", \n  React.createElement(\"b\", null, \"World!\")\n)\n\n// proposed JS output (using the new signature)\nReact.createElement(\"div\", {id: \"msg\"}, append => {\n  append(\"Hello\");\n  append(React.createElement(\"b\", null, \"World!\"));\n})\n```\n\nSo 'append' does nothing more than what happens with the '...children' in the old signature anyway. It appends them to the component. The big difference is, we are now in a **function body** instead of the limiting **parameter list** => big win!\n\nSome more examples with control flow statements\n\n``` javascript\n// 'if' example\n<div id=\"msg\">\n  Hello\n  {if (condition) {\n    <b>World!</b>\n  }}\n</div>\n\n// current JS output is not valid :-(\nReact.createElement(\"div\", {id: \"msg\"}, \n  \"Hello\", \n  if (condition) {\n    React.createElement(\"b\", null, \"World!\")\n  }\n)\n\n// proposed JS output is valid :-)\nReact.createElement(\"div\", {id: \"msg\"}, append => {\n  append(\"Hello\");\n  if (condition) {\n    append(React.createElement(\"b\", null, \"World!\"));\n  }\n})\n```\n\n``` javascript\n// 'switch' example\n<div id=\"msg\">\n  Hello\n  {switch (value) {\n    case 'foo': <b>Foooo!</b>; break;\n    case 'bar': <b>Baaar!</b>; break;\n    default: <b>World!</b>\n  }}\n</div>\n\n// current JS output is not valid :-(\n\n// proposed JS output\nReact.createElement(\"div\", {id: \"msg\"}, append => {\n  append(\"Hello\");\n  switch (value) {\n    case 'foo': append(React.createElement(\"b\", null, \"Foooo!\")); break;\n    case 'bar': append(React.createElement(\"b\", null, \"Baaar!\")); break;\n    default: append(React.createElement(\"b\", null, \"World!\"))\n  }\n})\n```\n\n``` javascript\n// 'for .. of' example\n<div id=\"msg\">\n  Hello\n  {for (var person of persons) {\n    <b>{person.name}, </b>\n  }}\n</div>\n\n// current JS output is not valid :-(\n\n// proposed JS output\n// (now you can use native JS loops instead of depending on Array.map)\nReact.createElement(\"div\", {id: \"msg\"}, append => {\n  append(\"Hello\");\n  for (var person of persons) {\n    append(React.createElement(\"b\", null, person.name, \", \"))\n  }\n})\n```\n### Background\n\nMy roots as web developer lie in the **Razor Template Syntax** which allows to mix C# with HTML much like JSX does with JS and HTML. That's why I felt a strong connection towards React right from the first day, because mixing a programming language with HTML already felt so natural. Now the only gap left to feel as flexible as back in the old days (with Razor) is this very issue I try to address here in this post. I hope you consider my approach and make React even more awesome than it already is! :D\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
