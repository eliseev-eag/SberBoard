{
  "url": "https://api.github.com/repos/facebook/react/issues/15176",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15176/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15176/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15176/events",
  "html_url": "https://github.com/facebook/react/issues/15176",
  "id": 423641735,
  "node_id": "MDU6SXNzdWU0MjM2NDE3MzU=",
  "number": 15176,
  "title": "React callback ref cleanup function",
  "user": {
    "login": "k15a",
    "id": 20357450,
    "node_id": "MDQ6VXNlcjIwMzU3NDUw",
    "avatar_url": "https://avatars2.githubusercontent.com/u/20357450?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/k15a",
    "html_url": "https://github.com/k15a",
    "followers_url": "https://api.github.com/users/k15a/followers",
    "following_url": "https://api.github.com/users/k15a/following{/other_user}",
    "gists_url": "https://api.github.com/users/k15a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/k15a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/k15a/subscriptions",
    "organizations_url": "https://api.github.com/users/k15a/orgs",
    "repos_url": "https://api.github.com/users/k15a/repos",
    "events_url": "https://api.github.com/users/k15a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/k15a/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2019-03-21T09:44:36Z",
  "updated_at": "2019-07-18T09:32:01Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "At the time React added callback refs the main use case for them was to replace string refs. A lot of the callback refs looked like this:\r\n\r\n```jsx\r\n<div ref={node => this.node = node} />\r\n```\r\n\r\nWith the introduction of `createRef` and `useRef` this use case is pretty much replaced by these alternatives so the use case of callback refs will shift to advanced use cases like [measuring DOM nodes](https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node).\r\n\r\nIt would be nice if you could return a cleanup function from the callback ref which is called instead of the callback with null. This way it will behave more like the `useEffect` API.\r\n\r\n```jsx\r\n<div ref={node => {\r\n  // Normal ref callback\r\n\r\n  return () => {\r\n    // Cleanup function which is called when the ref is removed\r\n  }\r\n}} />\r\n```\r\n\r\nThis will be super helpful when you need to set up a Resize-, Intersection- or  MutationObserver.\r\n\r\n```jsx\r\nfunction useDimensions() {\r\n  const [entry, setEntry] = useState()\r\n  \r\n  const targetRef = useCallback((node) => {\r\n    const observer = new ResizeObserver(([entry]) => {\r\n      setEntry(entry)\r\n    })\r\n\r\n    observer.observe(node)\r\n\r\n    return () => {\r\n      observer.disconnect()\r\n    }\r\n  }, [])\r\n\r\n  return [entry, targetRef]\r\n}\r\n\r\nfunction Comp() {\r\n  const [dimensions, targetRef] = useDimensions()\r\n\r\n  return (\r\n    <pre ref={targetRef}>\r\n      {JSON.stringify(dimensions, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n```\r\n\r\nCurrently, if you want to implement something like this you need to save the observer into a ref and then if the callback ref is called with null you have to clean up the observer from the ref.\r\n\r\nTo be 99% backward compatible we could call both the callback ref with null and the cleanup function. The only case where it isn't backward compatible is if currently someone is returning a function and doesn't expect the function to be called.\r\n\r\n```jsx\r\nfunction ref(node) {\r\n  if (node === null) {\r\n    return\r\n  }\r\n\r\n  // Do something\r\n\r\n  return () => {\r\n    // Cleanup something\r\n  }\r\n}\r\n```",
  "closed_by": null
}
