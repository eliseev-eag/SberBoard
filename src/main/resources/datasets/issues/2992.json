{
  "url": "https://api.github.com/repos/facebook/react/issues/2992",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/2992/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/2992/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/2992/events",
  "html_url": "https://github.com/facebook/react/issues/2992",
  "id": 56107832,
  "node_id": "MDU6SXNzdWU1NjEwNzgzMg==",
  "number": 2992,
  "title": "Feedback on 0.13.0 beta",
  "user": {
    "login": "srcspider",
    "id": 338910,
    "node_id": "MDQ6VXNlcjMzODkxMA==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/338910?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/srcspider",
    "html_url": "https://github.com/srcspider",
    "followers_url": "https://api.github.com/users/srcspider/followers",
    "following_url": "https://api.github.com/users/srcspider/following{/other_user}",
    "gists_url": "https://api.github.com/users/srcspider/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/srcspider/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/srcspider/subscriptions",
    "organizations_url": "https://api.github.com/users/srcspider/orgs",
    "repos_url": "https://api.github.com/users/srcspider/repos",
    "events_url": "https://api.github.com/users/srcspider/events{/privacy}",
    "received_events_url": "https://api.github.com/users/srcspider/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2015-01-31T02:02:56Z",
  "updated_at": "2015-02-02T21:48:09Z",
  "closed_at": "2015-02-02T21:41:49Z",
  "author_association": "NONE",
  "body": "One of the biggest pro's of React is that it's simple. \n\nIt doesn't do 100 things, it doesn't try to be overly complicated with how it does things. The docs aren't the greatest at explaining what it does under the api but fortunately it doesn't try to sprinkle too much magical fairy dust in your eyes with what it explains.\n\nThis however...\n\n``` js\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: props.initialCount};\n  }\n  tick() {\n    this.setState({count: this.state.count + 1});\n  }\n  render() {\n    return (\n      <div onClick={this.tick.bind(this)}>\n        Clicks: {this.state.count}\n      </div>\n    );\n  }\n}\n```\n\nThis is for the most part just syntactic _acid_\n\nThat's not code, that's a fashion statement. \n\nIt's less clear since you've butchered initial state and default props into this generic meaningless concept of \"constructor\". There's no point in doing both things at the same time there, it's much clearer to do them separate. Functions doing one thing makes for clearer code and easier to follow logic. Even when you see it a lot. You want easily scannable code, not \"less code\" since you'll fall in the trap of \"less [readable] code\" when you do that.\n\n**There's then the whole concept of this being a class.** What's the gain in this? I never ever had to do instanceof with components. The case is ridiculously rare, if there is even a case.\n\nOn the other hand what I do a lot is mixins, besides the constructor there making everything unnecessarily awkward for mixins to \"help\"  with properties and state, the whole class construct just says \"no mixins, please create giant monolithic unmanageable class hierarchies\"\n\nI'll be blunt, classes have _some_ uses but they're few, and most of their solutions (such as inheritance) are just extremely naive solutions asking you to create problems for yourself to give them meaning. In code they scale horribly into unmaintanable giant scrabble tree, are hard to mix together (usually involving over-complicated solutions that would not be necessary with out their inherent limitations), and are practically taboo in performance code/languages given their anti-hardware nature. \n\nIn practice, from a React component all I need in terms of composition is to be able to mix in functionality into it, so that I don't repeat code (when I don't want to repeat it for clarity reasons) and I can centralize code when I feel that is a worthwhile benefit. The whole concept of class was originally conceived for this purpose (along with multiple inheritance because being able to mix in just 1 thing is not that great). The concept has failed to achieve, largely due to being over engineered. No amount of languages copy/pasting said failure in the interest of pandering to simple minded programmers who've been spoonfed oo-gospel will change that. The current React way of doing it actually managed to achieved the goal of easy mixing/reuse of code quite well within the context of React. I don't see where the need to move to a system that's less cabable and even has more issues from just the fact it's being use come from... _we might as well replace the keyword \"class\" there with \"snakeoil\" because that's just how useless it seems to be._\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
