{
  "url": "https://api.github.com/repos/facebook/react/issues/8471",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/8471/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/8471/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/8471/events",
  "html_url": "https://github.com/facebook/react/issues/8471",
  "id": 192778706,
  "node_id": "MDU6SXNzdWUxOTI3Nzg3MDY=",
  "number": 8471,
  "title": "react performance issues?",
  "user": {
    "login": "zenjava",
    "id": 12181571,
    "node_id": "MDQ6VXNlcjEyMTgxNTcx",
    "avatar_url": "https://avatars1.githubusercontent.com/u/12181571?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zenjava",
    "html_url": "https://github.com/zenjava",
    "followers_url": "https://api.github.com/users/zenjava/followers",
    "following_url": "https://api.github.com/users/zenjava/following{/other_user}",
    "gists_url": "https://api.github.com/users/zenjava/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zenjava/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zenjava/subscriptions",
    "organizations_url": "https://api.github.com/users/zenjava/orgs",
    "repos_url": "https://api.github.com/users/zenjava/repos",
    "events_url": "https://api.github.com/users/zenjava/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zenjava/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2016-12-01T08:07:00Z",
  "updated_at": "2017-10-04T15:19:45Z",
  "closed_at": "2017-10-04T15:19:45Z",
  "author_association": "NONE",
  "body": "I found shouldDidUpdate's performance worse than refs  control update。\r\nCODE：\r\nA： shoudDidUpdate control udpate\r\n```\r\n\r\nimport React, {Component, PropTypes, cloneElement} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nclass Level1 extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n    }\r\n\r\n    render() {\r\n        let {rows, columns}=this.props;\r\n\r\n        return <div>\r\n            {rows.map((row, idx) => {\r\n                return <Level2 key={idx} row={row} columns={columns} ref={`row_${idx}`}/>\r\n            })}\r\n        </div>\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return nextProps.rows !== this.props.rows\r\n            || this.props.columns !== nextProps.columns;\r\n    }\r\n}\r\n\r\nclass Level2 extends Component {\r\n    render() {\r\n        let {row, columns}  = this.props;\r\n        return <div>\r\n            <Level3 row={row} key=\"level2\" ref=\"row\" columns={columns}/>\r\n        </div>\r\n    }\r\n\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return nextProps.row !== this.props.row\r\n            || this.props.columns !== nextProps.columns;\r\n    }\r\n}\r\nclass Level3 extends Component {\r\n    render() {\r\n        let {row, columns} = this.props;\r\n        return <div columns={columns} row={row}>\r\n            {columns.map((column, i) => {\r\n                return <Level4 ref={column} value={row[column]} key={i}/>\r\n            })}\r\n        </div>\r\n    }\r\n\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return (nextProps.row !== this.props.row\r\n        || this.props.columns !== nextProps.columns);\r\n    }\r\n}\r\n\r\nclass Level4 extends Component {\r\n    render() {\r\n        let {value} = this.props;\r\n        this.value = value;\r\n        return <span className=\"cell\" ref=\"columnValue\">\r\n            {value}\r\n        </span>\r\n    }\r\n\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return nextProps.value !== this.props.value;\r\n    }\r\n}\r\n\r\nfunction getData(cIndex = \"C\",\r\n                 vIndex = \"V\") {\r\n    let rows = [],\r\n        columns = [];\r\n\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        columns.push(`${cIndex}${i}`);\r\n    }\r\n\r\n    for (let row = 0; row < 20; row++) {\r\n        let rowData = {};\r\n        columns.forEach((column) => {\r\n            rowData[column] = `${vIndex}${row}_${column}`;\r\n        })\r\n        rows.push(rowData)\r\n    }\r\n    return {rows: rows, columns: columns};\r\n}\r\n\r\nvar __ret = getData();\r\nvar rows = __ret.rows;\r\nvar columns = __ret.columns;\r\n\r\nReactDOM.render(<Level1 rows={rows} columns={columns}/>, document.getElementById('root'));\r\nconsole.time(\"a\")\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n\r\n    var __ret = getData(\"C\", \"b\" + i);\r\n    var rows = __ret.rows;\r\n\r\n    ReactDOM.render(<Level1 rows={rows} columns={columns}/>, document.getElementById('root'));\r\n}\r\nconsole.timeEnd(\"a\")\r\n\r\n\r\n```\r\nB:  this.refs.update control update\r\n```\r\n\r\nimport React, {Component, PropTypes, cloneElement} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nclass Level1 extends Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n    }\r\n\r\n    render() {\r\n        let {rows, columns}=this.props;\r\n\r\n        return <div>\r\n            {rows.map((row, idx) => {\r\n                return <Level2 key={idx} row={row} columns={columns} ref={`row_${idx}`}/>\r\n            })}\r\n        </div>\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        this.preRows = this.props.rows;\r\n        // console.info(\"l1\",nextProps.rows !== this.props.rows\r\n        //     || this.props.columns !== nextProps.columns);\r\n        return nextProps.rows !== this.props.rows\r\n            || this.props.columns !== nextProps.columns;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        let {rows, columns}=this.props;\r\n        rows.forEach((row, idx) => {\r\n            this.refs[`row_${idx}`].update(row, columns);\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Level2 extends Component {\r\n    render() {\r\n        let {row, columns}  = this.props;\r\n        this.row = row;\r\n        this.columns = columns;\r\n        return <div>\r\n            <Level3 row={row} key=\"level2\" ref=\"row\" columns={columns}/>\r\n        </div>\r\n    }\r\n\r\n    update(row, columns) {\r\n        if (row !== this.row || columns !== this.columns) {\r\n            this.refs.row.update(row, columns);\r\n            this.row = row;\r\n            this.columns = columns;\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        // console.info(\"l2\",nextProps.rows !== this.props.rows\r\n        //     || this.props.columns !== nextProps.columns);\r\n\r\n        return this.props.columns !== nextProps.columns;\r\n    }\r\n}\r\nclass Level3 extends Component {\r\n    render() {\r\n        let {row, columns} = this.props;\r\n        this.row = row;\r\n        this.columns = columns;\r\n        return <div>\r\n            {columns.map((column, i) => {\r\n                return <Level4 ref={column} value={row[column]} key={i}/>\r\n            })}\r\n        </div>\r\n    }\r\n\r\n\r\n    update(row, columns) {\r\n        if (row !== this.row || columns !== this.columns) {\r\n\r\n            columns.forEach((column) => {\r\n                this.refs[column].update(row[column]);\r\n            });\r\n            this.row = row;\r\n            this.columns = columns;\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        // console.info(\"l3\",nextProps.row !== this.props.row\r\n        //     || this.props.columns !== nextProps.columns);\r\n        return this.props.columns !== nextProps.columns;\r\n    }\r\n}\r\nclass Level4 extends Component {\r\n    render() {\r\n        let {value} = this.props;\r\n        this.value = value;\r\n        return <span className=\"cell\" ref=\"columnValue\">\r\n            {value}\r\n        </span>\r\n    }\r\n\r\n    update(value) {\r\n        if (value !== this.value) {\r\n            this.refs.columnValue.innerHTML = value;\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        // console.info(\"l4\",nextProps.value !== this.props.value);\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction getData(cIndex = \"C\",\r\n                 vIndex = \"V\") {\r\n    let rows = [],\r\n        columns = [];\r\n\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        columns.push(`${cIndex}${i}`);\r\n    }\r\n\r\n    for (let row = 0; row < 20; row++) {\r\n        let rowData = {};\r\n        columns.forEach((column) => {\r\n            rowData[column] = `${vIndex}${row}_${column}`;\r\n        })\r\n        rows.push(rowData)\r\n    }\r\n    return {rows: rows, columns: columns};\r\n}\r\n\r\nvar __ret = getData();\r\nvar rows = __ret.rows;\r\nvar columns = __ret.columns;\r\n\r\nReactDOM.render(<Level1 rows={rows} columns={columns}/>, document.getElementById('root'));\r\nconsole.time(\"a\")\r\n\r\nfor (let i = 0; i < 10; i++) {\r\n\r\n    var __ret = getData(\"C\", \"b\" + i);\r\n    var rows = __ret.rows;\r\n\r\n    ReactDOM.render(<Level1 rows={rows} columns={columns}/>, document.getElementById('root'));\r\n}\r\nconsole.timeEnd(\"a\")\r\n\r\n```\r\n\r\nMy Computer :  macbook pro 2.8Ghz i7 memory 16GB \r\nBrowser : chrom 56\r\nA： 260 - 300 ms\r\nB:   30 ms\r\n\r\nBrowser: IE 11\r\nA: 1000-1100ms\r\nB: 500-630ms\r\nIs there a better way to deal with such a scenario?",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
