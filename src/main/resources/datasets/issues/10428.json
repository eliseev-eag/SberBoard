{
  "url": "https://api.github.com/repos/facebook/react/issues/10428",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10428/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10428/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10428/events",
  "html_url": "https://github.com/facebook/react/pull/10428",
  "id": 249212276,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTM1MDI3NDIx",
  "number": 10428,
  "title": "Wrap warning() calls in a DEV check for RN_* builds too",
  "user": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2017-08-10T02:08:15Z",
  "updated_at": "2017-08-10T15:41:54Z",
  "closed_at": "2017-08-10T15:41:52Z",
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/10428",
    "html_url": "https://github.com/facebook/react/pull/10428",
    "diff_url": "https://github.com/facebook/react/pull/10428.diff",
    "patch_url": "https://github.com/facebook/react/pull/10428.patch"
  },
  "body": "Building on the work done in #10361-\r\n* This PR fixes an errant `warning` left in the React Native build by auto-wrapping all calls to `warning` in an if-DEV check.\r\n* I also wrapped several `warning` imports and a call or two in `__DEV__` checks in the source just by looking at which ones were removed from the prod bundle after adding this check.\r\n* I also removed a useless variable (`allTypesByEventName`) and loop from `src/renderers/native/ReactNativeBridgeEventPlugin`.\r\n\r\nBefore and after diffs below.\r\n\r\n### build/react-native/ReactNativeStack-prod.js\r\n```diff\r\n14c14\r\n< var invariant = require(\"fbjs/lib/invariant\"), React = require(\"react\"), emptyObject = require(\"fbjs/lib/emptyObject\"), warning = require(\"fbjs/lib/warning\"), UIManager = require(\"UIManager\");\r\n---\r\n> var invariant = require(\"fbjs/lib/invariant\"), React = require(\"react\"), emptyObject = require(\"fbjs/lib/emptyObject\"), UIManager = require(\"UIManager\");\r\n192,193c192\r\n<         if (internalInstance._updateBatchNumber !== updateBatchNumber) return void warning(null == internalInstance._updateBatchNumber || internalInstance._updateBatchNumber === updateBatchNumber + 1, \"performUpdateIfNecessary: Unexpected batch number (current %s, \" + \"pending %s)\", updateBatchNumber, internalInstance._updateBatchNumber);\r\n<         internalInstance.performUpdateIfNecessary(transaction);\r\n---\r\n>         internalInstance._updateBatchNumber === updateBatchNumber && internalInstance.performUpdateIfNecessary(transaction);\r\n1309,1316c1308\r\n< var customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes, allTypesByEventName = {};\r\n< \r\n< for (var bubblingTypeName in customBubblingEventTypes) allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];\r\n< \r\n< for (var directTypeName in customDirectEventTypes) warning(!customBubblingEventTypes[directTypeName], \"Event cannot be both direct and bubbling: %s\", directTypeName), \r\n< allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];\r\n< \r\n< var ReactNativeBridgeEventPlugin = {\r\n---\r\n> var customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes, ReactNativeBridgeEventPlugin = {\r\n1456c1448\r\n< var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, warning$7, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n---\r\n> var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n1492,1493c1484\r\n<     return invariant(null != identifier, \"Touch object is missing identifier.\"), warning$7(identifier <= MAX_TOUCH_BANK, \"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK), \r\n<     identifier;\r\n---\r\n>     return invariant(null != identifier, \"Touch object is missing identifier.\"), identifier;\r\n```\r\n\r\n### build/react-native/ReactNativeFiber-prod.js\r\n```diff\r\n16,20c16\r\n< require(\"deepFreezeAndThrowOnMutationInDev\");\r\n< \r\n< var warning = require(\"fbjs/lib/warning\");\r\n< \r\n< require(\"InitializeCore\");\r\n---\r\n> require(\"deepFreezeAndThrowOnMutationInDev\"), require(\"InitializeCore\");\r\n1748c1744\r\n< }, warning$11, onCommitFiberRoot = null, onCommitFiberUnmount = null, hasLoggedError = !1;\r\n---\r\n> }, onCommitFiberRoot = null, onCommitFiberUnmount = null, hasLoggedError = !1;\r\n1755c1751\r\n<             1 || hasLoggedError || (hasLoggedError = !0, warning$11(!1, \"React DevTools encountered an error: %s\", err));\r\n---\r\n>             1 || hasLoggedError || (hasLoggedError = !0);\r\n3259,3266c3255\r\n< var customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes, allTypesByEventName = {};\r\n< \r\n< for (var bubblingTypeName in customBubblingEventTypes) allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];\r\n< \r\n< for (var directTypeName in customDirectEventTypes) warning(!customBubblingEventTypes[directTypeName], \"Event cannot be both direct and bubbling: %s\", directTypeName), \r\n< allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];\r\n< \r\n< var ReactNativeBridgeEventPlugin = {\r\n---\r\n> var customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes, ReactNativeBridgeEventPlugin = {\r\n3340c3329\r\n< var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, warning$15, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n---\r\n> var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n3376,3377c3365\r\n<     return invariant(null != identifier, \"Touch object is missing identifier.\"), warning$15(identifier <= MAX_TOUCH_BANK, \"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK), \r\n<     identifier;\r\n---\r\n>     return invariant(null != identifier, \"Touch object is missing identifier.\"), identifier;\r\n```\r\n\r\n### build/react-native/ReactNativeStack-dev.js\r\n``` diff\r\n15c15\r\n<     var invariant = require(\"fbjs/lib/invariant\"), React = require(\"react\"), warning = require(\"fbjs/lib/warning\"), ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\"), performanceNow = require(\"fbjs/lib/performanceNow\"), emptyObject = require(\"fbjs/lib/emptyObject\"), UIManager = require(\"UIManager\"), checkPropTypes = require(\"prop-types/checkPropTypes\"), shallowEqual = require(\"fbjs/lib/shallowEqual\");\r\n---\r\n>     var invariant = require(\"fbjs/lib/invariant\"), React = require(\"react\"), require$$0 = require(\"fbjs/lib/warning\"), ExecutionEnvironment = require(\"fbjs/lib/ExecutionEnvironment\"), performanceNow = require(\"fbjs/lib/performanceNow\"), emptyObject = require(\"fbjs/lib/emptyObject\"), UIManager = require(\"UIManager\"), checkPropTypes = require(\"prop-types/checkPropTypes\"), shallowEqual = require(\"fbjs/lib/shallowEqual\");\r\n59,60c59,60\r\n<     }, ReactNativeComponentTree_1 = ReactNativeComponentTree, ReactInvalidSetStateWarningHook = {}, warning$2 = warning, processingChildContext = !1, warnInvalidSetState = function() {\r\n<         warning$2(!processingChildContext, \"setState(...): Cannot call setState() inside getChildContext()\");\r\n---\r\n>     }, ReactNativeComponentTree_1 = ReactNativeComponentTree, ReactInvalidSetStateWarningHook = {}, warning$1 = require$$0, processingChildContext = !1, warnInvalidSetState = function() {\r\n>         warning$1(!processingChildContext, \"setState(...): Cannot call setState() inside getChildContext()\");\r\n92c92\r\n<     var ReactGlobalSharedState_1 = ReactGlobalSharedState, ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook, warning$1 = warning, ReactDebugTool$1 = null, hooks = [], didHookThrowForEvent = {}, callHook = function(event, fn, context, arg1, arg2, arg3, arg4, arg5) {\r\n---\r\n>     var ReactGlobalSharedState_1 = ReactGlobalSharedState, ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook, warning = require$$0, ReactDebugTool$1 = null, hooks = [], didHookThrowForEvent = {}, callHook = function(event, fn, context, arg1, arg2, arg3, arg4, arg5) {\r\n96c96\r\n<             warning$1(didHookThrowForEvent[event], \"Exception thrown by hook while handling %s: %s\", event, e + \"\\n\" + e.stack), \r\n---\r\n>             warning(didHookThrowForEvent[event], \"Exception thrown by hook while handling %s: %s\", event, e + \"\\n\" + e.stack), \r\n133c133\r\n<         arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning$1(!1, \"ReactDebugTool: debugID may not be empty.\");\r\n---\r\n>         arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning(!1, \"ReactDebugTool: debugID may not be empty.\");\r\n135c135\r\n<         0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning$1(!1, \"There is an internal error in the React performance measurement code.\" + \"\\n\\nDid not expect %s timer to start while %s timer is still in \" + \"progress for %s instance.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n---\r\n>         0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning(!1, \"There is an internal error in the React performance measurement code.\" + \"\\n\\nDid not expect %s timer to start while %s timer is still in \" + \"progress for %s instance.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n139c139\r\n<         0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning$1(!1, \"There is an internal error in the React performance measurement code. \" + \"We did not expect %s timer to stop while %s timer is still in \" + \"progress for %s instance. Please report this as a bug in React.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n---\r\n>         0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning(!1, \"There is an internal error in the React performance measurement code. \" + \"We did not expect %s timer to stop while %s timer is still in \" + \"progress for %s instance. Please report this as a bug in React.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n314c314\r\n<     }, ReactRef = {}, ReactCompositeComponentTypes = ReactCompositeComponentTypes$1, _require = ReactGlobalSharedState_1, ReactComponentTreeHook$1 = _require.ReactComponentTreeHook, warning$4 = warning, warnedAboutStatelessRefs = {};\r\n---\r\n>     }, ReactRef = {}, ReactCompositeComponentTypes = ReactCompositeComponentTypes$1, _require = ReactGlobalSharedState_1, ReactComponentTreeHook$1 = _require.ReactComponentTreeHook, warning$3 = require$$0, warnedAboutStatelessRefs = {};\r\n322c322\r\n<             warning$4(!1, \"Stateless function components cannot be given refs. \" + \"Attempts to access this ref will fail.%s%s\", info, ReactComponentTreeHook$1.getStackAddendumByID(component._debugID)));\r\n---\r\n>             warning$3(!1, \"Stateless function components cannot be given refs. \" + \"Attempts to access this ref will fail.%s%s\", info, ReactComponentTreeHook$1.getStackAddendumByID(component._debugID)));\r\n347c347\r\n<     var ReactRef_1 = ReactRef;\r\n---\r\n>     var ReactRef_1 = ReactRef, warning$2 = require$$0;\r\n378c378\r\n<             if (internalInstance._updateBatchNumber !== updateBatchNumber) return void warning(null == internalInstance._updateBatchNumber || internalInstance._updateBatchNumber === updateBatchNumber + 1, \"performUpdateIfNecessary: Unexpected batch number (current %s, \" + \"pending %s)\", updateBatchNumber, internalInstance._updateBatchNumber);\r\n---\r\n>             if (internalInstance._updateBatchNumber !== updateBatchNumber) return void warning$2(null == internalInstance._updateBatchNumber || internalInstance._updateBatchNumber === updateBatchNumber + 1, \"performUpdateIfNecessary: Unexpected batch number (current %s, \" + \"pending %s)\", updateBatchNumber, internalInstance._updateBatchNumber);\r\n565,566c565,566\r\n<     }, ReactUpdates_1 = ReactUpdates, ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner, warning$5 = warning, warnOnInvalidCallback = function(callback, callerName) {\r\n<         warning$5(null === callback || \"function\" == typeof callback, \"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, \"\" + callback);\r\n---\r\n>     }, ReactUpdates_1 = ReactUpdates, ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner, warning$4 = require$$0, warnOnInvalidCallback = function(callback, callerName) {\r\n>         warning$4(null === callback || \"function\" == typeof callback, \"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, \"\" + callback);\r\n575c575\r\n<             return warning$5(!1, \"Can only update a mounted or mounting component. This usually means \" + \"you called setState, replaceState, or forceUpdate on an unmounted \" + \"component. This is a no-op.\\n\\nPlease check the code for the \" + \"%s component.\", ctor && (ctor.displayName || ctor.name) || \"ReactClass\"), \r\n---\r\n>             return warning$4(!1, \"Can only update a mounted or mounting component. This usually means \" + \"you called setState, replaceState, or forceUpdate on an unmounted \" + \"component. This is a no-op.\\n\\nPlease check the code for the \" + \"%s component.\", ctor && (ctor.displayName || ctor.name) || \"ReactClass\"), \r\n578c578\r\n<         return warning$5(null == ReactCurrentOwner.current, \"Cannot update during an existing state transition (such as within \" + \"`render` or another component's constructor). Render methods should \" + \"be a pure function of props and state; constructor side-effects are \" + \"an anti-pattern, but can be moved to `componentWillMount`.\"), \r\n---\r\n>         return warning$4(null == ReactCurrentOwner.current, \"Cannot update during an existing state transition (such as within \" + \"`render` or another component's constructor). Render methods should \" + \"be a pure function of props and state; constructor side-effects are \" + \"an anti-pattern, but can be moved to `componentWillMount`.\"), \r\n584c584\r\n<             null !== owner && (warning$5(owner._warnedAboutRefsInRender, \"%s is accessing isMounted inside its render() function. \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", owner.getName() || \"A component\"), \r\n---\r\n>             null !== owner && (warning$4(owner._warnedAboutRefsInRender, \"%s is accessing isMounted inside its render() function. \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", owner.getName() || \"A component\"), \r\n607c607\r\n<             ReactInstrumentation.debugTool.onSetState(), warning$5(null != partialState, \"setState(...): You passed an undefined or null state object; \" + \"instead, use forceUpdate().\");\r\n---\r\n>             ReactInstrumentation.debugTool.onSetState(), warning$4(null != partialState, \"setState(...): You passed an undefined or null state object; \" + \"instead, use forceUpdate().\");\r\n719c719\r\n<     var shouldUpdateReactComponent_1 = shouldUpdateReactComponent, ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner, _require2 = ReactGlobalSharedState_1, ReactDebugCurrentFrame = _require2.ReactDebugCurrentFrame, ReactDebugCurrentStack = ReactDebugCurrentStack_1, warningAboutMissingGetChildContext = {};\r\n---\r\n>     var shouldUpdateReactComponent_1 = shouldUpdateReactComponent, ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner, _require2 = ReactGlobalSharedState_1, ReactDebugCurrentFrame = _require2.ReactDebugCurrentFrame, ReactDebugCurrentStack = ReactDebugCurrentStack_1, warning$6 = require$$0, warningAboutMissingGetChildContext = {};\r\n754c754\r\n<             warning(!Component.childContextTypes, \"%s(...): childContextTypes cannot be defined on a functional component.\", Component.displayName || Component.name || \"Component\"), \r\n---\r\n>             warning$6(!Component.childContextTypes, \"%s(...): childContextTypes cannot be defined on a functional component.\", Component.displayName || Component.name || \"Component\"), \r\n757c757\r\n<             null == inst.render && warning(!1, \"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", Component.displayName || Component.name || \"Component\");\r\n---\r\n>             null == inst.render && warning$6(!1, \"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", Component.displayName || Component.name || \"Component\");\r\n759c759\r\n<             warning(void 0 === inst.props || !propsMutated, \"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", componentName, componentName), \r\n---\r\n>             warning$6(void 0 === inst.props || !propsMutated, \"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", componentName, componentName), \r\n762,770c762,770\r\n<             warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, \"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", this.getName() || \"a component\"), \r\n<             warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, \"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", this.getName() || \"a component\"), \r\n<             warning(!inst.propTypes, \"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", this.getName() || \"a component\"), \r\n<             warning(!inst.contextTypes, \"contextTypes was defined as an instance property on %s. Use a \" + \"static property to define contextTypes instead.\", this.getName() || \"a component\"), \r\n<             warning(\"function\" != typeof inst.componentShouldUpdate, \"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", this.getName() || \"A component\"), \r\n<             warning(\"function\" != typeof inst.componentDidUnmount, \"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", this.getName() || \"A component\"), \r\n<             warning(\"function\" != typeof inst.componentWillRecieveProps, \"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", this.getName() || \"A component\"), \r\n<             isPureComponent(Component) && void 0 !== inst.shouldComponentUpdate && warning(!1, \"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", this.getName() || \"A pure component\"), \r\n<             warning(!inst.defaultProps, \"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", this.getName() || \"a component\", this.getName() || \"a component\");\r\n---\r\n>             warning$6(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, \"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", this.getName() || \"a component\"), \r\n>             warning$6(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, \"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", this.getName() || \"a component\"), \r\n>             warning$6(!inst.propTypes, \"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", this.getName() || \"a component\"), \r\n>             warning$6(!inst.contextTypes, \"contextTypes was defined as an instance property on %s. Use a \" + \"static property to define contextTypes instead.\", this.getName() || \"a component\"), \r\n>             warning$6(\"function\" != typeof inst.componentShouldUpdate, \"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", this.getName() || \"A component\"), \r\n>             warning$6(\"function\" != typeof inst.componentDidUnmount, \"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", this.getName() || \"A component\"), \r\n>             warning$6(\"function\" != typeof inst.componentWillRecieveProps, \"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", this.getName() || \"A component\"), \r\n>             isPureComponent(Component) && void 0 !== inst.shouldComponentUpdate && warning$6(!1, \"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", this.getName() || \"A pure component\"), \r\n>             warning$6(!inst.defaultProps, \"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", this.getName() || \"a component\", this.getName() || \"a component\");\r\n883c883\r\n<             warning(!Component.childContextTypes, \"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName)), \r\n---\r\n>             warning$6(!Component.childContextTypes, \"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName)), \r\n915c915\r\n<                 warning(!1, \"%s.componentWillReceiveProps(): Assigning directly to \" + \"this.state is deprecated (except inside a component's \" + \"constructor). Use setState instead.\", this.getName() || \"ReactCompositeComponent\"));\r\n---\r\n>                 warning$6(!1, \"%s.componentWillReceiveProps(): Assigning directly to \" + \"this.state is deprecated (except inside a component's \" + \"constructor). Use setState instead.\", this.getName() || \"ReactCompositeComponent\"));\r\n926c926\r\n<             if (warning(void 0 !== shouldUpdate, \"%s.shouldComponentUpdate(): Returned undefined instead of a \" + \"boolean value. Make sure to return true or false.\", this.getName() || \"ReactCompositeComponent\"), \r\n---\r\n>             if (warning$6(void 0 !== shouldUpdate, \"%s.shouldComponentUpdate(): Returned undefined instead of a \" + \"boolean value. Make sure to return true or false.\", this.getName() || \"ReactCompositeComponent\"), \r\n1054c1054\r\n<     }, ReactHostComponent_1 = ReactHostComponent, nextDebugID = 1, ReactCompositeComponentWrapper = function(element) {\r\n---\r\n>     }, ReactHostComponent_1 = ReactHostComponent, warning$5 = require$$0, nextDebugID = 1, ReactCompositeComponentWrapper = function(element) {\r\n1079c1079\r\n<         return warning(\"function\" == typeof instance.mountComponent && \"function\" == typeof instance.receiveComponent && \"function\" == typeof instance.getHostNode && \"function\" == typeof instance.unmountComponent, \"Only React Components can be mounted.\"), \r\n---\r\n>         return warning$5(\"function\" == typeof instance.mountComponent && \"function\" == typeof instance.receiveComponent && \"function\" == typeof instance.getHostNode && \"function\" == typeof instance.unmountComponent, \"Only React Components can be mounted.\"), \r\n1086c1086\r\n<     var instantiateReactComponent_1 = instantiateReactComponent, DevOnlyStubShim = null, ReactNativeFeatureFlags = require(\"ReactNativeFeatureFlags\"), ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner, injectedFindNode = ReactNativeFeatureFlags.useFiber ? function(fiber) {\r\n---\r\n>     var instantiateReactComponent_1 = instantiateReactComponent, DevOnlyStubShim = null, ReactNativeFeatureFlags = require(\"ReactNativeFeatureFlags\"), ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner, warning$7 = require$$0, injectedFindNode = ReactNativeFeatureFlags.useFiber ? function(fiber) {\r\n1093c1093\r\n<         if (null !== owner && (warning(owner._warnedAboutRefsInRender, \"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", owner.getName() || \"A component\"), \r\n---\r\n>         if (null !== owner && (warning$7(owner._warnedAboutRefsInRender, \"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", owner.getName() || \"A component\"), \r\n1275c1275\r\n<     }, EventPluginRegistry_1 = EventPluginRegistry, warning$6 = warning, injection = {\r\n---\r\n>     }, EventPluginRegistry_1 = EventPluginRegistry, warning$8 = require$$0, injection = {\r\n1277c1277\r\n<             ComponentTree = Injected, warning$6(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, \"EventPluginUtils.injection.injectComponentTree(...): Injected \" + \"module is missing getNodeFromInstance or getInstanceFromNode.\");\r\n---\r\n>             ComponentTree = Injected, warning$8(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, \"EventPluginUtils.injection.injectComponentTree(...): Injected \" + \"module is missing getNodeFromInstance or getInstanceFromNode.\");\r\n1292c1292\r\n<         warning$6(instancesIsArr === listenersIsArr && instancesLen === listenersLen, \"EventPluginUtils: Invalid `event`.\");\r\n---\r\n>         warning$8(instancesIsArr === listenersIsArr && instancesLen === listenersLen, \"EventPluginUtils: Invalid `event`.\");\r\n1477c1477\r\n<     }, getListener = EventPluginHub_1.getListener, warning$7 = warning;\r\n---\r\n>     }, getListener = EventPluginHub_1.getListener, warning$10 = require$$0;\r\n1483c1483\r\n<         warning$7(inst, \"Dispatching inst must not be null\");\r\n---\r\n>         warning$10(inst, \"Dispatching inst must not be null\");\r\n1524c1524\r\n<     }, EventPropagators_1 = EventPropagators, didWarnForAddedNewProperty = !1, isProxySupported = \"function\" == typeof Proxy, EVENT_POOL_SIZE = 10, warning$8 = warning, shouldBeReleasedProperties = [ \"dispatchConfig\", \"_targetInst\", \"nativeEvent\", \"isDefaultPrevented\", \"isPropagationStopped\", \"_dispatchListeners\", \"_dispatchInstances\" ], EventInterface = {\r\n---\r\n>     }, EventPropagators_1 = EventPropagators, didWarnForAddedNewProperty = !1, isProxySupported = \"function\" == typeof Proxy, EVENT_POOL_SIZE = 10, warning$11 = require$$0, shouldBeReleasedProperties = [ \"dispatchConfig\", \"_targetInst\", \"nativeEvent\", \"isDefaultPrevented\", \"isPropagationStopped\", \"_dispatchListeners\", \"_dispatchInstances\" ], EventInterface = {\r\n1588c1588\r\n<                     return \"isPersistent\" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning$8(didWarnForAddedNewProperty || target.isPersistent(), \"This synthetic event is reused for performance reasons. If you're \" + \"seeing this, you're adding a new property in the synthetic event object. \" + \"The property is never released. See \" + \"https://fb.me/react-event-pooling for more information.\"), \r\n---\r\n>                     return \"isPersistent\" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning$11(didWarnForAddedNewProperty || target.isPersistent(), \"This synthetic event is reused for performance reasons. If you're \" + \"seeing this, you're adding a new property in the synthetic event object. \" + \"The property is never released. See \" + \"https://fb.me/react-event-pooling for more information.\"), \r\n1611c1611\r\n<             warning$8(!1, \"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + \"If you must keep the original synthetic event around, use event.persist(). \" + \"See https://fb.me/react-event-pooling for more information.\", action, propName, result);\r\n---\r\n>             warning$11(!1, \"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + \"If you must keep the original synthetic event around, use event.persist(). \" + \"See https://fb.me/react-event-pooling for more information.\", action, propName, result);\r\n1631,1634c1631,1632\r\n<     var customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes, allTypesByEventName = {};\r\n<     for (var bubblingTypeName in customBubblingEventTypes) allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];\r\n<     for (var directTypeName in customDirectEventTypes) warning(!customBubblingEventTypes[directTypeName], \"Event cannot be both direct and bubbling: %s\", directTypeName), \r\n<     allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];\r\n---\r\n>     var warning$9 = require$$0, customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes;\r\n>     for (var directTypeName in customDirectEventTypes) warning$9(!customBubblingEventTypes[directTypeName], \"Event cannot be both direct and bubbling: %s\", directTypeName);\r\n1712c1710\r\n<     }, ReactGenericBatching_1 = ReactGenericBatching, EMPTY_NATIVE_EVENT = {}, touchSubsequence = function(touches, indices) {\r\n---\r\n>     }, ReactGenericBatching_1 = ReactGenericBatching, warning$12 = require$$0, EMPTY_NATIVE_EVENT = {}, touchSubsequence = function(touches, indices) {\r\n1743c1741\r\n<                 null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? warning(!1, \"A view is reporting that a touch occurred on tag zero.\") : rootNodeID = target), \r\n---\r\n>                 null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? warning$12(!1, \"A view is reporting that a touch occurred on tag zero.\") : rootNodeID = target), \r\n1763c1761\r\n<     var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, warning$9 = warning, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n---\r\n>     var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, warning$13 = require$$0, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n1795c1793\r\n<         return invariant(null != identifier, \"Touch object is missing identifier.\"), warning$9(identifier <= MAX_TOUCH_BANK, \"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK), \r\n---\r\n>         return invariant(null != identifier, \"Touch object is missing identifier.\"), warning$13(identifier <= MAX_TOUCH_BANK, \"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK), \r\n1843c1841\r\n<                 warning$9(null != activeRecord && activeRecord.touchActive, \"Cannot find single active touch.\");\r\n---\r\n>                 warning$13(null != activeRecord && activeRecord.touchActive, \"Cannot find single active touch.\");\r\n2473c2471\r\n<     }, KeyEscapeUtils_1 = KeyEscapeUtils, ITERATOR_SYMBOL = \"function\" == typeof Symbol && Symbol.iterator, FAUX_ITERATOR_SYMBOL = \"@@iterator\", REACT_ELEMENT_TYPE = \"function\" == typeof Symbol && Symbol.for && Symbol.for(\"react.element\") || 60103, getCurrentStackAddendum$1 = ReactGlobalSharedState_1.ReactComponentTreeHook.getCurrentStackAddendum, SEPARATOR = \".\", SUBSEPARATOR = \":\", didWarnAboutMaps = !1;\r\n---\r\n>     }, KeyEscapeUtils_1 = KeyEscapeUtils, ITERATOR_SYMBOL = \"function\" == typeof Symbol && Symbol.iterator, FAUX_ITERATOR_SYMBOL = \"@@iterator\", REACT_ELEMENT_TYPE = \"function\" == typeof Symbol && Symbol.for && Symbol.for(\"react.element\") || 60103, warning$15 = require$$0, getCurrentStackAddendum$1 = ReactGlobalSharedState_1.ReactComponentTreeHook.getCurrentStackAddendum, SEPARATOR = \".\", SUBSEPARATOR = \":\", didWarnAboutMaps = !1;\r\n2486c2484\r\n<                 iteratorFn === children.entries && (warning(didWarnAboutMaps, \"Using Maps as children is unsupported and will likely yield \" + \"unexpected results. Convert it to a sequence/iterable of keyed \" + \"ReactElements instead.%s\", getCurrentStackAddendum$1()), \r\n---\r\n>                 iteratorFn === children.entries && (warning$15(didWarnAboutMaps, \"Using Maps as children is unsupported and will likely yield \" + \"unexpected results. Convert it to a sequence/iterable of keyed \" + \"ReactElements instead.%s\", getCurrentStackAddendum$1()), \r\n2502c2500\r\n<     var ReactComponentTreeHook$3, traverseStackChildren_1 = traverseStackChildren;\r\n---\r\n>     var ReactComponentTreeHook$3, traverseStackChildren_1 = traverseStackChildren, warning$14 = require$$0;\r\n2507c2505\r\n<         keyUnique || warning(!1, \"flattenChildren(...): \" + \"Encountered two children with the same key, `%s`. \" + \"Keys should be unique so that components maintain their identity \" + \"across updates. Non-unique keys may cause children to be \" + \"duplicated and/or omitted — the behavior is unsupported and \" + \"could change in a future version.%s\", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$3.getStackAddendumByID(selfDebugID)), \r\n---\r\n>         keyUnique || warning$14(!1, \"flattenChildren(...): \" + \"Encountered two children with the same key, `%s`. \" + \"Keys should be unique so that components maintain their identity \" + \"across updates. Non-unique keys may cause children to be \" + \"duplicated and/or omitted — the behavior is unsupported and \" + \"could change in a future version.%s\", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$3.getStackAddendumByID(selfDebugID)), \r\n2543c2541\r\n<     }, ReactChildReconciler_1 = ReactChildReconciler;\r\n---\r\n>     }, ReactChildReconciler_1 = ReactChildReconciler, warning$16 = require$$0;\r\n2549c2547\r\n<             keyUnique || warning(!1, \"flattenChildren(...): Encountered two children with the same key, \" + \"`%s`. \" + \"Keys should be unique so that components maintain their identity \" + \"across updates. Non-unique keys may cause children to be \" + \"duplicated and/or omitted — the behavior is unsupported and \" + \"could change in a future version.%s\", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$4.getStackAddendumByID(selfDebugID)), \r\n---\r\n>             keyUnique || warning$16(!1, \"flattenChildren(...): Encountered two children with the same key, \" + \"`%s`. \" + \"Keys should be unique so that components maintain their identity \" + \"across updates. Non-unique keys may cause children to be \" + \"duplicated and/or omitted — the behavior is unsupported and \" + \"could change in a future version.%s\", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$4.getStackAddendumByID(selfDebugID)), \r\n```\r\n\r\n### build/react-native/ReactNativeFiber-dev.js\r\n``` diff\r\n3221c3221\r\n<     }, ReactVersion = \"16.0.0-beta.5\", ReactNativeFeatureFlags = require(\"ReactNativeFeatureFlags\"), ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner, injectedFindNode = ReactNativeFeatureFlags.useFiber ? function(fiber) {\r\n---\r\n>     }, ReactVersion = \"16.0.0-beta.5\", ReactNativeFeatureFlags = require(\"ReactNativeFeatureFlags\"), ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner, warning$11 = require$$0, injectedFindNode = ReactNativeFeatureFlags.useFiber ? function(fiber) {\r\n3228c3228\r\n<         if (null !== owner && (require$$0(owner._warnedAboutRefsInRender, \"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", owner.getName() || \"A component\"), \r\n---\r\n>         if (null !== owner && (warning$11(owner._warnedAboutRefsInRender, \"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", owner.getName() || \"A component\"), \r\n3423c3423\r\n<     }, getListener = EventPluginHub_1.getListener, warning$11 = require$$0;\r\n---\r\n>     }, getListener = EventPluginHub_1.getListener, warning$13 = require$$0;\r\n3429c3429\r\n<         warning$11(inst, \"Dispatching inst must not be null\");\r\n---\r\n>         warning$13(inst, \"Dispatching inst must not be null\");\r\n3470c3470\r\n<     }, EventPropagators_1 = EventPropagators, didWarnForAddedNewProperty = !1, isProxySupported = \"function\" == typeof Proxy, EVENT_POOL_SIZE = 10, warning$12 = require$$0, shouldBeReleasedProperties = [ \"dispatchConfig\", \"_targetInst\", \"nativeEvent\", \"isDefaultPrevented\", \"isPropagationStopped\", \"_dispatchListeners\", \"_dispatchInstances\" ], EventInterface = {\r\n---\r\n>     }, EventPropagators_1 = EventPropagators, didWarnForAddedNewProperty = !1, isProxySupported = \"function\" == typeof Proxy, EVENT_POOL_SIZE = 10, warning$14 = require$$0, shouldBeReleasedProperties = [ \"dispatchConfig\", \"_targetInst\", \"nativeEvent\", \"isDefaultPrevented\", \"isPropagationStopped\", \"_dispatchListeners\", \"_dispatchInstances\" ], EventInterface = {\r\n3534c3534\r\n<                     return \"isPersistent\" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning$12(didWarnForAddedNewProperty || target.isPersistent(), \"This synthetic event is reused for performance reasons. If you're \" + \"seeing this, you're adding a new property in the synthetic event object. \" + \"The property is never released. See \" + \"https://fb.me/react-event-pooling for more information.\"), \r\n---\r\n>                     return \"isPersistent\" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning$14(didWarnForAddedNewProperty || target.isPersistent(), \"This synthetic event is reused for performance reasons. If you're \" + \"seeing this, you're adding a new property in the synthetic event object. \" + \"The property is never released. See \" + \"https://fb.me/react-event-pooling for more information.\"), \r\n3557c3557\r\n<             warning$12(!1, \"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + \"If you must keep the original synthetic event around, use event.persist(). \" + \"See https://fb.me/react-event-pooling for more information.\", action, propName, result);\r\n---\r\n>             warning$14(!1, \"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + \"If you must keep the original synthetic event around, use event.persist(). \" + \"See https://fb.me/react-event-pooling for more information.\", action, propName, result);\r\n3577,3580c3577,3578\r\n<     var customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes, allTypesByEventName = {};\r\n<     for (var bubblingTypeName in customBubblingEventTypes) allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];\r\n<     for (var directTypeName in customDirectEventTypes) require$$0(!customBubblingEventTypes[directTypeName], \"Event cannot be both direct and bubbling: %s\", directTypeName), \r\n<     allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];\r\n---\r\n>     var warning$12 = require$$0, customBubblingEventTypes = UIManager.customBubblingEventTypes, customDirectEventTypes = UIManager.customDirectEventTypes;\r\n>     for (var directTypeName in customDirectEventTypes) warning$12(!customBubblingEventTypes[directTypeName], \"Event cannot be both direct and bubbling: %s\", directTypeName);\r\n3599c3597\r\n<     }, ReactEventEmitterMixin_1 = ReactEventEmitterMixin, EMPTY_NATIVE_EVENT = {}, touchSubsequence = function(touches, indices) {\r\n---\r\n>     }, ReactEventEmitterMixin_1 = ReactEventEmitterMixin, warning$15 = require$$0, EMPTY_NATIVE_EVENT = {}, touchSubsequence = function(touches, indices) {\r\n3630c3628\r\n<                 null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? require$$0(!1, \"A view is reporting that a touch occurred on tag zero.\") : rootNodeID = target), \r\n---\r\n>                 null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? warning$15(!1, \"A view is reporting that a touch occurred on tag zero.\") : rootNodeID = target), \r\n3650c3648\r\n<     var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, warning$13 = require$$0, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n---\r\n>     var ResponderSyntheticEvent_1 = ResponderSyntheticEvent, isEndish$2 = EventPluginUtils_1.isEndish, isMoveish$2 = EventPluginUtils_1.isMoveish, isStartish$2 = EventPluginUtils_1.isStartish, warning$16 = require$$0, MAX_TOUCH_BANK = 20, touchBank = [], touchHistory = {\r\n3682c3680\r\n<         return invariant(null != identifier, \"Touch object is missing identifier.\"), warning$13(identifier <= MAX_TOUCH_BANK, \"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK), \r\n---\r\n>         return invariant(null != identifier, \"Touch object is missing identifier.\"), warning$16(identifier <= MAX_TOUCH_BANK, \"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK), \r\n3730c3728\r\n<                 warning$13(null != activeRecord && activeRecord.touchActive, \"Cannot find single active touch.\");\r\n---\r\n>                 warning$16(null != activeRecord && activeRecord.touchActive, \"Cannot find single active touch.\");\r\n4036,4037c4034,4035\r\n<     var takeSnapshot_1 = takeSnapshot, ReactInvalidSetStateWarningHook = {}, warning$15 = require$$0, processingChildContext = !1, warnInvalidSetState = function() {\r\n<         warning$15(!processingChildContext, \"setState(...): Cannot call setState() inside getChildContext()\");\r\n---\r\n>     var takeSnapshot_1 = takeSnapshot, ReactInvalidSetStateWarningHook = {}, warning$18 = require$$0, processingChildContext = !1, warnInvalidSetState = function() {\r\n>         warning$18(!processingChildContext, \"setState(...): Cannot call setState() inside getChildContext()\");\r\n4062c4060\r\n<     var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook, ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook, warning$14 = require$$0, ReactDebugTool = null, hooks = [], didHookThrowForEvent = {}, callHook = function(event, fn, context, arg1, arg2, arg3, arg4, arg5) {\r\n---\r\n>     var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook, ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook, warning$17 = require$$0, ReactDebugTool = null, hooks = [], didHookThrowForEvent = {}, callHook = function(event, fn, context, arg1, arg2, arg3, arg4, arg5) {\r\n4066c4064\r\n<             warning$14(didHookThrowForEvent[event], \"Exception thrown by hook while handling %s: %s\", event, e + \"\\n\" + e.stack), \r\n---\r\n>             warning$17(didHookThrowForEvent[event], \"Exception thrown by hook while handling %s: %s\", event, e + \"\\n\" + e.stack), \r\n4103c4101\r\n<         arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning$14(!1, \"ReactDebugTool: debugID may not be empty.\");\r\n---\r\n>         arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning$17(!1, \"ReactDebugTool: debugID may not be empty.\");\r\n4105c4103\r\n<         0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning$14(!1, \"There is an internal error in the React performance measurement code.\" + \"\\n\\nDid not expect %s timer to start while %s timer is still in \" + \"progress for %s instance.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n---\r\n>         0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning$17(!1, \"There is an internal error in the React performance measurement code.\" + \"\\n\\nDid not expect %s timer to start while %s timer is still in \" + \"progress for %s instance.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n4109c4107\r\n<         0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning$14(!1, \"There is an internal error in the React performance measurement code. \" + \"We did not expect %s timer to stop while %s timer is still in \" + \"progress for %s instance. Please report this as a bug in React.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n---\r\n>         0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning$17(!1, \"There is an internal error in the React performance measurement code. \" + \"We did not expect %s timer to stop while %s timer is still in \" + \"progress for %s instance. Please report this as a bug in React.\", timerType, currentTimerType || \"no\", debugID === currentTimerDebugID ? \"the same\" : \"another\"), \r\n```",
  "closed_by": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  }
}
