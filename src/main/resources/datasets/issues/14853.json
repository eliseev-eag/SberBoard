{
  "url": "https://api.github.com/repos/facebook/react/issues/14853",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14853/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14853/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14853/events",
  "html_url": "https://github.com/facebook/react/pull/14853",
  "id": 410353976,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjUzMTE0MzUz",
  "number": 14853,
  "title": "await act(async () => ...)",
  "user": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 34,
  "created_at": "2019-02-14T15:27:09Z",
  "updated_at": "2019-05-11T13:57:25Z",
  "closed_at": "2019-04-02T21:33:32Z",
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/14853",
    "html_url": "https://github.com/facebook/react/pull/14853",
    "diff_url": "https://github.com/facebook/react/pull/14853.diff",
    "patch_url": "https://github.com/facebook/react/pull/14853.patch"
  },
  "body": "TODO - \r\n- [x] ReactDOM, TestRenderer, NoopRenderer\r\n- [x] tests for other renderers, I missed them last time around \r\n- [x] the warnings are placeholders, still thinking about what would be better, open to suggestions\r\n- [x] implications on concurrent mode\r\n\r\n![acting](http://www.reactiongifs.com/wp-content/uploads/2013/01/acting.gif)\r\n\r\n(repasting from the group)\r\n\r\nI hacked together an asynchronous version of `act(...)`, and it's kinda nice. \r\n\r\nYou've seen the synchronous version -\r\n\r\n```js\r\nact(() => {\r\n  // updates and stuff\r\n})\r\n// make assertions \r\n```\r\n\r\nThis still works, and gives the same warnings. But if you pass an `async` function - \r\n```js\r\nawait act(async() => {\r\n  // updates and stuff\r\n})\r\n// expect commits and effects to be flushed \r\n// make assertions \r\n```\r\nNeat! I set it up so if you *don't* `await` the result from `act`, a warning gets triggered (with `setImmediate`) to do so. That makes it a bit harder to have rogue async `act()` calls in the ether.\r\n\r\nYou can nest `act()` calls - \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n```js\r\nawait act(async() => {\r\n  // nest synchronous calls\r\n  act(() => {\r\n    // updates and such    \r\n  })\r\n  // as before, updates and effects are flushed \r\n\r\n  // make assertions \r\n  await sleep(500) // or for a promise to resolve, or whatever\r\n  // more assertions maybe \r\n\r\n  // nest asynchronous calls too \r\n  await act(async () => {\r\n    // mutations and such \r\n    // more awaits \r\n    // and maybe an event or two\r\n  })\r\n  // more assertions \r\n})\r\n```\r\n\r\nI implemented a cheap form of unrolling safety, so if a previous `act()` gets closed before any subsequent `act()` calls, a warning gets triggered. This should prevent most interleaving attempts, and maintain a tree-like shape of `act()` blocks. \r\n\r\npros -\r\n- works with async/await, solves oss problems cleanly \r\n- the sync api is preserved \r\n- the warning is preserved\r\n- works with fake timers/fb \r\n\r\ncons - \r\n- can't guarantee batching after the first await in an act block (this will get better when concurrent?)\r\n- less restrictive than the sync model, and starts to feel more opt-in than opt-out (eg- someone could just wrap their entire test with an `act()` call... which might be fine?)\r\n- exposes a secret api on react dom to implement it, dunno how you feel about that\r\n\r\n\r\n",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
