{
  "url": "https://api.github.com/repos/facebook/react/issues/13215",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13215/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13215/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13215/events",
  "html_url": "https://github.com/facebook/react/pull/13215",
  "id": 341630719,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjAxNzIzNDEy",
  "number": 13215,
  "title": "Enforce presence or absence of component stack in tests",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": {
    "login": "bvaughn",
    "id": 29597,
    "node_id": "MDQ6VXNlcjI5NTk3",
    "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvaughn",
    "html_url": "https://github.com/bvaughn",
    "followers_url": "https://api.github.com/users/bvaughn/followers",
    "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
    "organizations_url": "https://api.github.com/users/bvaughn/orgs",
    "repos_url": "https://api.github.com/users/bvaughn/repos",
    "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvaughn/received_events",
    "type": "User",
    "site_admin": false
  },
  "assignees": [
    {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    }
  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-07-16T18:38:17Z",
  "updated_at": "2018-07-16T19:20:19Z",
  "closed_at": "2018-07-16T19:20:19Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/13215",
    "html_url": "https://github.com/facebook/react/pull/13215",
    "diff_url": "https://github.com/facebook/react/pull/13215.diff",
    "patch_url": "https://github.com/facebook/react/pull/13215.patch"
  },
  "body": "Currently, the way we test component stacks is ad-hoc. Sometimes we include it in the expected warning message, sometimes we don't. Sometimes we *mean* to not include a stack in the warning, and sometimes we just forget to.\r\n\r\nAs we're moving towards including component stacks by default for any `warning` call when it exists, I want to make the tests stricter. Specifically, **I want the tests to fail if a warning doesn't contain a stack, unless you explicitly opted out in the `toWarnDev()` call**.\r\n\r\nWith this change, calls like\r\n\r\n```js\r\nexpect(() => something()).toWarnDev(message);\r\nexpect(() => something()).toWarnDev([messages]);\r\n```\r\n\r\nwill expect that all messages include a stack (we check for `\\n   in ` which is accurate enough).\r\n\r\nIf the stack is missing, the test will fail. Here, we don't check the stack *content* itself â€” just that it exists. Any test that needs to verify the stack contents is welcome to keep doing it the same way we do today, in case where it's valuable.\r\n\r\nSome warnings are expected to *not* have a stack. In this case, you can pass:\r\n\r\n```js\r\nexpect(() => something()).toWarnDev(\r\n  message,\r\n  {withoutStack: true}\r\n)\r\n```\r\n\r\nIt is intentionally somewhat verbose so that you think twice before doing it.\r\n\r\nFor the edge case where a single `toWarnDev()` call contains both warnings with and without a stack, you can pass a number as `withoutStack`. That number is interpreted as how many messages you expect to not have stacks. This is rare. We only use this in two places in our entire test suite.\r\n\r\n----\r\n\r\n### Give Me Some Stats\r\n\r\nWe have 404 calls of `toWarnDev()`, and 193 (a slight minority) of them will contain `withoutStack` with this PR. Note that many of these calls are testing the same messages (e.g. the strict mode message which doesn't have a stack) so this isn't necessarily representative of the real warning distribution.\r\n\r\nOur of those 193 stack-less messages, 34 seem to be missing stacks by accident. I added a TODO comments to them so we can fix them.\r\n\r\n### Why Not a Shorter Name?\r\n\r\nI want to make it a little bit more annoying to add new warnings without stacks. I also think we might want to reconsider whether warnings for the class itself (e.g. bad static methods) should get a stack or not. Currently they don't but I think maybe it could be helpful.\r\n\r\n### Why Options Object Instead Of a Boolean Argument?\r\n\r\nI want to make it very easy to find all warnings with missing stacks by doing a project-wide search of `withoutStack` at any point in time. I also want all missing stacks to be highly visible since in the future I think we'll want to increase our stack coverage for warnings.\r\n\r\n### Why Not a Positive Name?\r\n\r\nWhy not `withStack: false`? I want the stack to be checked by default, and I find options that are `true` by default a bit confusing. When you see\r\n\r\n```js\r\nexpect(() => something).toWarn(message, {withStack: false})\r\n```\r\n\r\nit's not clear whether you need `{withStack: true}` when you *do* want to check it. I think `withoutStack: true` is a bit more obviously a non-default case.\r\n\r\n### What If I Add a Stack?\r\n\r\nThe matcher will intentionally fail the test if you add a stack but the test doesn't expect it. This is so that the tests always reflect the reality. This might become more important when we automate adding stacks as we then might accidentally include a wrong stack in case where we shouldn't have any. This check would catch such an issue.\r\n\r\n## Does This Change the Behavior\r\n\r\nNo, I only changed the tests. I'll add missing stacks in follow-up PRs.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
