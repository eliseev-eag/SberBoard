{
  "url": "https://api.github.com/repos/facebook/react/issues/14515",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14515/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14515/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14515/events",
  "html_url": "https://github.com/facebook/react/issues/14515",
  "id": 395119343,
  "node_id": "MDU6SXNzdWUzOTUxMTkzNDM=",
  "number": 14515,
  "title": "Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.",
  "user": {
    "login": "KieranWitt",
    "id": 45340068,
    "node_id": "MDQ6VXNlcjQ1MzQwMDY4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/45340068?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KieranWitt",
    "html_url": "https://github.com/KieranWitt",
    "followers_url": "https://api.github.com/users/KieranWitt/followers",
    "following_url": "https://api.github.com/users/KieranWitt/following{/other_user}",
    "gists_url": "https://api.github.com/users/KieranWitt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KieranWitt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KieranWitt/subscriptions",
    "organizations_url": "https://api.github.com/users/KieranWitt/orgs",
    "repos_url": "https://api.github.com/users/KieranWitt/repos",
    "events_url": "https://api.github.com/users/KieranWitt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KieranWitt/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1168115654,
      "node_id": "MDU6TGFiZWwxMTY4MTE1NjU0",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Support%20Redirect",
      "name": "Resolution: Support Redirect",
      "color": "106099",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-01-01T23:06:44Z",
  "updated_at": "2019-01-05T06:52:11Z",
  "closed_at": "2019-01-05T06:52:01Z",
  "author_association": "NONE",
  "body": "Developers, \r\n\r\nI'm getting this error with the below, I've been pouring over it trying to find the issue but just can't see it! What's wrong here? It seems to be stemming from the code from 146 to 236. \r\n\r\n> Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\r\n\r\n```\r\nimport React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  KeyboardAvoidingView,\r\n  LayoutAnimation,\r\n  UIManager,\r\n  Dimensions\r\n} from \"react-native\";\r\nimport { Button, Input } from \"react-native-elements\";\r\n\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\nimport SimpleIcon from \"react-native-vector-icons/SimpleLineIcons\";\r\n\r\nconst SCREEN_WIDTH = Dimensions.get(\"window\").width;\r\n\r\n// Enable LayoutAnimation on Android\r\nUIManager.setLayoutAnimationEnabledExperimental &&\r\n  UIManager.setLayoutAnimationEnabledExperimental(true);\r\n\r\nconst TabSelector = ({ selected }) => {\r\n  return (\r\n    <View style={styles.selectorContainer}>\r\n      <View style={selected && styles.selected} />\r\n    </View>\r\n  );\r\n};\r\n\r\nTabSelector.propTypes = {\r\n  selected: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default class AuthScreen extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      selectedCategory: 0,\r\n      isLoading: false,\r\n      isPasswordValid: true,\r\n      isConfirmationValid: true\r\n    };\r\n\r\n    this.selectCategory = this.selectCategory.bind(this);\r\n    this.login = this.login.bind(this);\r\n    this.signUp = this.signUp.bind(this);\r\n  }\r\n\r\n  selectCategory(selectedCategory) {\r\n    LayoutAnimation.easeInEaseOut();\r\n    this.setState({\r\n      selectedCategory,\r\n      isLoading: false\r\n    });\r\n  }\r\n\r\n  login() {\r\n    const { password } = this.state;\r\n    this.setState({ isLoading: true });\r\n    // Simulate an API call\r\n    setTimeout(() => {\r\n      LayoutAnimation.easeInEaseOut();\r\n      this.setState({\r\n        isLoading: false,\r\n        isPasswordValid: password.length >= 8 || this.passwordInput.shake()\r\n      });\r\n    }, 1500);\r\n  }\r\n\r\n  signUp() {\r\n    const { password, passwordConfirmation } = this.state;\r\n    this.setState({ isLoading: true });\r\n    // Simulate an API call\r\n    setTimeout(() => {\r\n      LayoutAnimation.easeInEaseOut();\r\n      this.setState({\r\n        isLoading: false,\r\n        isPasswordValid: password.length >= 8 || this.passwordInput.shake(),\r\n        isConfirmationValid:\r\n          password == passwordConfirmation || this.confirmationInput.shake()\r\n      });\r\n    }, 1500);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      selectedCategory,\r\n      isLoading,\r\n      isPasswordValid,\r\n      isConfirmationValid,\r\n      email,\r\n      password,\r\n      passwordConfirmation\r\n    } = this.state;\r\n    const isLoginPage = selectedCategory === 0;\r\n    const isSignUpPage = selectedCategory === 1;\r\n    return (\r\n      <View style={styles.container}>\r\n        <KeyboardAvoidingView\r\n          contentContainerStyle={styles.loginContainer}\r\n          behavior=\"position\"\r\n        >\r\n          <View style={styles.titleContainer}>\r\n            <View style={{ flexDirection: \"row\" }}>\r\n              <Text style={styles.titleText}>BEAUX</Text>\r\n            </View>\r\n            <View style={{ marginTop: -10, marginLeft: 10 }}>\r\n              <Text style={styles.titleText}>VOYAGES</Text>\r\n            </View>\r\n          </View>\r\n          <View style={{ flexDirection: \"row\" }}>\r\n            <Button\r\n              disabled={isLoading}\r\n              clear\r\n              activeOpacity={0.7}\r\n              onPress={() => this.selectCategory(0)}\r\n              containerStyle={{ flex: 1 }}\r\n              titleStyle={[\r\n                styles.categoryText,\r\n                isLoginPage && styles.selectedCategoryText\r\n              ]}\r\n              title={\"Login\"}\r\n            />\r\n            <Button\r\n              disabled={isLoading}\r\n              clear\r\n              activeOpacity={0.7}\r\n              onPress={() => this.selectCategory(1)}\r\n              containerStyle={{ flex: 1 }}\r\n              titleStyle={[\r\n                styles.categoryText,\r\n                isSignUpPage && styles.selectedCategoryText\r\n              ]}\r\n              title={\"Sign up\"}\r\n            />\r\n          </View>\r\n          <View style={styles.rowSelector}>\r\n            <TabSelector selected={isLoginPage} />\r\n            <TabSelector selected={isSignUpPage} />\r\n          </View>\r\n          {/* //!ISSUE LIES HERE */}\r\n          <View style={styles.formContainer}>\r\n            <Input\r\n              leftIcon={\r\n                <Icon\r\n                  name=\"envelope-o\"\r\n                  color=\"rgba(0, 0, 0, 0.38)\"\r\n                  size={25}\r\n                  style={{ backgroundColor: \"transparent\" }}\r\n                />\r\n              }\r\n              value={email}\r\n              keyboardAppearance=\"light\"\r\n              autoFocus={false}\r\n              autoCapitalize=\"none\"\r\n              autoCorrect={false}\r\n              keyboardType=\"email-address\"\r\n              returnKeyType=\"next\"\r\n              inputStyle={{ marginLeft: 10 }}\r\n              placeholder={\"Email\"}\r\n              containerStyle={{\r\n                borderBottomColor: \"rgba(0, 0, 0, 0.38)\"\r\n              }}\r\n              ref={input => (this.emailInput = input)}\r\n              onSubmitEditing={() => this.passwordInput.focus()}\r\n              onChangeText={email => this.setState({ email })}\r\n            />\r\n            <Input\r\n              leftIcon={\r\n                <SimpleIcon\r\n                  name=\"lock\"\r\n                  color=\"rgba(0, 0, 0, 0.38)\"\r\n                  size={25}\r\n                  style={{ backgroundColor: \"transparent\" }}\r\n                />\r\n              }\r\n              value={password}\r\n              keyboardAppearance=\"light\"\r\n              autoCapitalize=\"none\"\r\n              autoCorrect={false}\r\n              secureTextEntry={true}\r\n              returnKeyType={isSignUpPage ? \"next\" : \"done\"}\r\n              blurOnSubmit={true}\r\n              containerStyle={{\r\n                marginTop: 16,\r\n                borderBottomColor: \"rgba(0, 0, 0, 0.38)\"\r\n              }}\r\n              inputStyle={{ marginLeft: 10 }}\r\n              placeholder={\"Password\"}\r\n              ref={input => (this.passwordInput = input)}\r\n              onSubmitEditing={() =>\r\n                isSignUpPage ? this.confirmationInput.focus() : this.login()\r\n              }\r\n              onChangeText={password => this.setState({ password })}\r\n              errorMessage={\r\n                isPasswordValid ? null : \"Please enter at least 8 characters\"\r\n              }\r\n            />\r\n            {isSignUpPage && (\r\n              <Input\r\n                icon={\r\n                  <SimpleIcon\r\n                    name=\"lock\"\r\n                    color=\"rgba(0, 0, 0, 0.38)\"\r\n                    size={25}\r\n                    style={{ backgroundColor: \"transparent\" }}\r\n                  />\r\n                }\r\n                value={passwordConfirmation}\r\n                secureTextEntry={true}\r\n                keyboardAppearance=\"light\"\r\n                autoCapitalize=\"none\"\r\n                autoCorrect={false}\r\n                keyboardType=\"default\"\r\n                returnKeyType={\"done\"}\r\n                blurOnSubmit={true}\r\n                containerStyle={{\r\n                  marginTop: 16,\r\n                  borderBottomColor: \"rgba(0, 0, 0, 0.38)\"\r\n                }}\r\n                inputStyle={{ marginLeft: 10 }}\r\n                placeholder={\"Confirm password\"}\r\n                ref={input => (this.confirmationInput = input)}\r\n                onSubmitEditing={this.signUp}\r\n                onChangeText={passwordConfirmation =>\r\n                  this.setState({ passwordConfirmation })\r\n                }\r\n                errorMessage={\r\n                  isConfirmationValid ? null : \"Please enter the same password\"\r\n                }\r\n              />\r\n            )}\r\n            {/* //!ISSUE ENDS HERE */}\r\n            <Button\r\n              buttonStyle={styles.loginButton}\r\n              containerStyle={{ marginTop: 32, flex: 0 }}\r\n              activeOpacity={0.8}\r\n              title={isLoginPage ? \"LOGIN\" : \"SIGN UP\"}\r\n              onPress={isLoginPage ? this.login : this.signUp}\r\n              titleStyle={styles.loginTextButton}\r\n              loading={isLoading}\r\n              disabled={isLoading}\r\n            />\r\n          </View>\r\n        </KeyboardAvoidingView>\r\n        <View style={styles.helpContainer}>\r\n          <Button\r\n            title={\"Need help ?\"}\r\n            titleStyle={{ color: \"red\" }}\r\n            buttonStyle={{ backgroundColor: \"transparent\" }}\r\n            underlayColor=\"transparent\"\r\n            onPress={() => console.log(\"Account created\")}\r\n          />\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: \"#034d84\",\r\n    flex: 1\r\n  },\r\n  rowSelector: {\r\n    height: 20,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\"\r\n  },\r\n  selectorContainer: {\r\n    flex: 1,\r\n    alignItems: \"center\"\r\n  },\r\n  selected: {\r\n    position: \"absolute\",\r\n    borderRadius: 50,\r\n    height: 0,\r\n    width: 0,\r\n    top: -5,\r\n    borderRightWidth: 70,\r\n    borderBottomWidth: 70,\r\n    borderColor: \"white\",\r\n    backgroundColor: \"white\"\r\n  },\r\n  loginContainer: {\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\"\r\n  },\r\n  loginTextButton: {\r\n    fontSize: 16,\r\n    color: \"white\",\r\n    fontWeight: \"bold\"\r\n  },\r\n  loginButton: {\r\n    backgroundColor: \"rgba(232, 147, 142, 1)\",\r\n    borderRadius: 10,\r\n    height: 50,\r\n    width: 200\r\n  },\r\n  titleContainer: {\r\n    height: 150,\r\n    backgroundColor: \"transparent\",\r\n    justifyContent: \"center\"\r\n  },\r\n  formContainer: {\r\n    backgroundColor: \"white\",\r\n    width: SCREEN_WIDTH - 30,\r\n    borderRadius: 10,\r\n    paddingTop: 32,\r\n    paddingBottom: 32,\r\n    alignItems: \"center\"\r\n  },\r\n  loginText: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n    color: \"white\"\r\n  },\r\n  categoryText: {\r\n    textAlign: \"center\",\r\n    color: \"white\",\r\n    fontSize: 24,\r\n    fontFamily: \"light\",\r\n    backgroundColor: \"transparent\",\r\n    opacity: 0.54\r\n  },\r\n  selectedCategoryText: {\r\n    opacity: 1\r\n  },\r\n  titleText: {\r\n    color: \"white\",\r\n    fontSize: 30,\r\n    fontFamily: \"regular\"\r\n  },\r\n  helpContainer: {\r\n    height: 64,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\"\r\n  }\r\n});\r\n\r\n\r\n```",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
