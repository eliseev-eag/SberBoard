{
  "url": "https://api.github.com/repos/facebook/react/issues/15912",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15912/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15912/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15912/events",
  "html_url": "https://github.com/facebook/react/issues/15912",
  "id": 457396293,
  "node_id": "MDU6SXNzdWU0NTczOTYyOTM=",
  "number": 15912,
  "title": "Insecure Randomness (Security Features, Structural)",
  "user": {
    "login": "JeyanthinathanR",
    "id": 37268491,
    "node_id": "MDQ6VXNlcjM3MjY4NDkx",
    "avatar_url": "https://avatars2.githubusercontent.com/u/37268491?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/JeyanthinathanR",
    "html_url": "https://github.com/JeyanthinathanR",
    "followers_url": "https://api.github.com/users/JeyanthinathanR/followers",
    "following_url": "https://api.github.com/users/JeyanthinathanR/following{/other_user}",
    "gists_url": "https://api.github.com/users/JeyanthinathanR/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/JeyanthinathanR/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/JeyanthinathanR/subscriptions",
    "organizations_url": "https://api.github.com/users/JeyanthinathanR/orgs",
    "repos_url": "https://api.github.com/users/JeyanthinathanR/repos",
    "events_url": "https://api.github.com/users/JeyanthinathanR/events{/privacy}",
    "received_events_url": "https://api.github.com/users/JeyanthinathanR/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-06-18T10:43:50Z",
  "updated_at": "2019-06-24T06:29:53Z",
  "closed_at": "2019-06-18T16:23:23Z",
  "author_association": "NONE",
  "body": "Hello Team,\r\n\r\nWe use **React 0.14.7** in one of our projects and we recently did a security analysis of our product for an important change. As part of the analysis ( particularly Fortify scan ), we came across an issue which is related to React framework itself. The reported issue is **Insecure Randomness** - _Standard pseudorandom number generators cannot withstand cryptographic attacks._ which has been raised because of the usage of **Math.random()** in the framework.\r\n\r\nPasting actual content from the Fortify report.\r\n\r\n### Abstract\r\nStandard pseudorandom number generators cannot withstand cryptographic attacks.\r\n### Explanation\r\nInsecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in a security-sensitive context. Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic.\r\nStatistical PRNGs provide useful statistical properties, but their output is highly predictable and form an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between the generated random value and a truly random value. In general, if a PRNG algorithm is not advertised as\r\nbeing cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. Example: The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase.\r\nfunction genReceiptURL (baseURL){\r\nvar randNum = Math.random();\r\nvar receiptURL = baseURL + randNum + \".html\";\r\nreturn receiptURL;\r\n}\r\nThis code uses the Math.random() function to generate \"unique\" identifiers for the receipt pages it generates. Since Math.random() is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.\r\n### Recommendation\r\nWhen unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Do not use values such as the current time because it offers only negligible entropy.) In JavaScript, the typical recommendation is to use the indow.crypto.random() function in the Mozilla API. However, this method does not work in many browsers, including more recent versions of Mozilla Firefox. There is currently no crossbrowser solution for a robust cryptographic PRNG. In the meantime, consider handling any PRNG functionality outside of JavaScript.\r\n\r\nAnd our security analysis team advised us to upgrade to the latest version ( 16.x ) of React. But even the latest version of the framework has few usages of Math.random() in it.\r\n\r\nWhat should we do now? Please advise if we can live with this issue reported by Fortify scan.\r\n\r\nP.S: The Fortify Engine version used for the scan is 18.20.1071.\r\nAnd adding one of the issues reported in Fortify scan for reference.\r\n### Issue Details\r\n**Kingdom**: Security Features\r\n**Scan Engine**: SCA (Structural)\r\n### Sink Details\r\n**Sink**: FunctionPointerCall\r\n**Enclosing Method**: createReactRootIndex()\r\n**File**: /scripts/react/react-0.14.7.js:14206\r\n**Taint Flags**:\r\n14203\r\n14204 var ServerReactRootIndex = {\r\n14205 createReactRootIndex: function () {\r\n14206 return Math.ceil(**Math.random()** * GLOBAL_MOUNT_POINT_MAX);\r\n14207 }\r\n14208 };\r\n14209\r\n\r\nThanks,\r\nJey\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
