{
  "url": "https://api.github.com/repos/facebook/react/issues/7323",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/7323/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/7323/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/7323/events",
  "html_url": "https://github.com/facebook/react/issues/7323",
  "id": 166711553,
  "node_id": "MDU6SXNzdWUxNjY3MTE1NTM=",
  "number": 7323,
  "title": "Optimizing Compiler: Component Folding",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 180616330,
      "node_id": "MDU6TGFiZWwxODA2MTYzMzA=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
      "name": "Component: Optimizing Compiler",
      "color": "bfdadc",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2016-07-21T00:21:56Z",
  "updated_at": "2019-02-13T06:57:19Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "body": "This is like the final frontier for React but I never really wrote anything about it so I figured I'd create an issue.\n\nBasically, the idea is to utilize information about how React works to do [constant folding](https://en.wikipedia.org/wiki/Constant_folding) and [inlining](https://en.wikipedia.org/wiki/Inline_expansion) of components under certain conditions.\n\nExample Source:\n\n``` js\nfunction Foo(props) {\n  if (props.data.type === 'img') {\n    return <img src={props.data.src} className={props.className} alt={props.alt} />;\n  }\n  return <span>{props.data.type}</span>;\n}\nFoo.defaultProps = {\n  alt: \"An image of Foo.\"\n};\n```\n\n``` js\nvar CSSClasses = {\n  bar: 'bar'\n};\nmodule.exports = CSSClasses;\n```\n\n``` js\nvar Foo = require('Foo');\nvar Classes = require('Classes');\nfunction Bar(props) {\n  return <Foo data={{ type: 'img', src: props.src }} className={Classes.bar} />;\n}\n```\n\nBy knowing what Foo and Classes is made up of, we can turn the Bar component into this:\n\n``` js\nvar Foo = require('Foo');\nvar Classes = require('Classes');\nfunction Bar(props) {\n  return <Foo data={{ type: 'img', src: props.src }} className={Classes.bar} />;\n}\nfunction Bar_optimized(props) {\n  return <img src={props.src} className=\"Bar\" alt=\"An image of Foo.\" />;\n}\n```\n\n[Dead-code elimination](https://en.wikipedia.org/wiki/Dead_code_elimination) then strips it down to just:\n\n``` js\nfunction Bar_optimized(props) {\n  return <img src={props.src} className=\"Bar\" alt=\"An image of Foo.\" />;\n}\n```\n\nNow there are a bunch of different cases where this needs to bail out. For example, we need to know that the `CSSClasses` object and the `defaultProps` object is immutable, or we need to infer that it is immutable using [Escape analysis](https://en.wikipedia.org/wiki/Escape_analysis).\n\nWith classes these bail out cases are even more complex.\n\nThe problem is that current JS infrastructure is particularly bad at this kind of whole program or whole package linking. Node doesn't have a notion of per package private modules so anything can mutate anything by default. Transpilers such as Babel are set up to work on a single file at a time. They don't have access to the source of other files to do this analysis. [Rollup](https://github.com/rollup/rollup) is closer but is limited to a small set of static primitives.\n\nHowever, once smarter compilers become more prevalent in the JS world or we find ways to hack around the limitations, we can start building out more of these smarter compiler optimizations.\n",
  "closed_by": null
}
