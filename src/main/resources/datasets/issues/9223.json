{
  "url": "https://api.github.com/repos/facebook/react/issues/9223",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9223/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9223/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9223/events",
  "html_url": "https://github.com/facebook/react/issues/9223",
  "id": 215470602,
  "node_id": "MDU6SXNzdWUyMTU0NzA2MDI=",
  "number": 9223,
  "title": "Compiler Optimization Umbrella",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 180616330,
      "node_id": "MDU6TGFiZWwxODA2MTYzMzA=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
      "name": "Component: Optimizing Compiler",
      "color": "bfdadc",
      "default": false
    },
    {
      "id": 710615342,
      "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
      "name": "Type: Umbrella",
      "color": "5319e7",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2017-03-20T16:08:03Z",
  "updated_at": "2017-10-04T16:37:16Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "body": "Spinoff from https://github.com/reactjs/react-future/issues/50\r\n\r\nI wanted to create an umbrella task for when we start working on compiler level optimizations. We've had [a tag](https://github.com/facebook/react/issues?q=is%3Aopen+is%3Aissue+label%3A%22Component%3A+Optimizing+Compiler%22) open for a while but these are fairly primitive optimizations. We want to be able to go further.\r\n\r\nI don't think we'll start this project immediately but soon after the Fiber stuff is in place.\r\n\r\n__Compiler Infra__\r\n\r\n- [ ] Base-line cross-module full JavaScript AOT compiler.\r\n- [ ] Compiler infra structure that fits well into existing tooling at FB, Webpack, Rollup based ecosysem etc. Support parallelism and incremental builds.\r\n- [ ] Solve things like what the npm ecosystem should do. Compile before publishing or after? Probably after.\r\n\r\n__Optimizations__\r\n\r\n- [ ] Enable multiple levels of host instances / DOM elements to be managed by a single Fiber. I think this is probably a key requirement for many optimizations. I'm not sure if that Fiber's children will have a single placement point (the parent that they get inserted into) or if it could have multiple insertion points. If it manually does the insertion of its children, then the later would work.\r\n- [ ] Optimizing pure host/DOM elements (\"string\" components). Can be reasoned about at the core compiler level.\r\n- [ ] Inlining pure functional components so that now the result can be reasoned about as a flat component.\r\n- [ ] Basic constant folding for static configuration.\r\n- [ ] Optimizing across component boundaries without inlining.\r\n- [ ] Optimizing stateful functional components.\r\n\r\n__Runtime Optimizations__\r\n\r\n- [ ] Dead-code elimination of library code that isn't needed by a particular application. Such as certain events, controlled components or complex attributes.\r\n\r\n__Stretch Goals__\r\n\r\n- [ ] Computing delta updates after code changes and lets Service Workers update based on that.\r\n\r\nMore to come...",
  "closed_by": null
}
