{
  "url": "https://api.github.com/repos/facebook/react/issues/3228",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/3228/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/3228/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/3228/events",
  "html_url": "https://github.com/facebook/react/issues/3228",
  "id": 58488892,
  "node_id": "MDU6SXNzdWU1ODQ4ODg5Mg==",
  "number": 3228,
  "title": "Optimizing Compiler: Inline ReactElements",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 180616330,
      "node_id": "MDU6TGFiZWwxODA2MTYzMzA=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
      "name": "Component: Optimizing Compiler",
      "color": "bfdadc",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 22,
  "created_at": "2015-02-22T03:47:03Z",
  "updated_at": "2016-04-22T07:02:52Z",
  "closed_at": "2016-04-22T07:02:52Z",
  "author_association": "MEMBER",
  "body": "Starting with React 0.14 we will be able to inline ReactElements:\n\n``` javascript\n<div className=\"foo\">{bar}<Baz key=\"baz\" /></div>\n```\n\nas objects:\n\n``` javascript\n{ type: 'div', props: { className: 'foo', children:\n  [ bar, { type: Baz, props: { }, key: 'baz', ref: null } ]\n}, key: null, ref: null }\n```\n\nThis improves performance over the existing `React.createElement` call by inlining the result of it.\n## defaultProps\n\nIf a component might have default props they need to be resolved by the transpiler's runtime:\n\n``` javascript\n{ type: 'div', props: { className: 'foo', children:\n  [ bar, { type: Baz, props: $resolveDefaults(Baz.defaultProps, { }), key: 'baz', ref: null } ]\n}, key: null, ref: null }\n```\n## Exception: ref=\"string\"\n\nUnfortunately we still haven't figured out what the final semantics for refs. The current semantics relies on getting the current React owner. Therefore, we cannot apply this optimization if the ref attribute might be a string.\n\n``` javascript\nrender() {\n  // Neither of these...\n  return <div ref=\"str\" />;\n  // ...are safe to inline...\n  return <div ref={possibleStringValue} />;\n  // ...because they might contain a ref.\n  return <div {...objectThatMightContainARef} />;\n}\n```\n## Non-JSX\n\nThis can work on React.createElement or functions created by React.createFactory if the first argument is an inline object literal. Otherwise it is not safe since the object might be reused and mutated.\n## Only in Production Mode\n\nThis optimization should only be applied in production mode. Currently `React.createElement` fires various warnings for propTypes and key warnings if the `__DEV__` flag is set to true or `\"production\" !== process.env.NODE_ENV`. This optimization would skip the warnings which would be very very bad in development mode.\n\nThe difficult part of this is figuring out a way that this will work in everyone's environment because not everyone has the ability to use different transpilers for development and production mode.\n\nOne solution might be to use a ternary and rely on minifiers to strip out the extra code:\n\n``` javascript\n\"production\" === process.env.NODE_ENV ?\n  { type: 'div', props: { ... }, key: null, ref: null } :\n  React.createElement('div', ...)\n```\n\nThis will a pain for source maps though.\n\nAnother solution would be to have different flags in the transpilers themselves but we'd have to make sure that people actually use them correctly. They will otherwise have problems due to not firing warnings, or think that React is slow because they screwed up their config.\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
