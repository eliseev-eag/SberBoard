{
  "url": "https://api.github.com/repos/facebook/react/issues/2009",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/2009/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/2009/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/2009/events",
  "html_url": "https://github.com/facebook/react/issues/2009",
  "id": 39678621,
  "node_id": "MDU6SXNzdWUzOTY3ODYyMQ==",
  "number": 2009,
  "title": "Improve Flux documentation",
  "user": {
    "login": "appsforartists",
    "id": 926648,
    "node_id": "MDQ6VXNlcjkyNjY0OA==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/926648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/appsforartists",
    "html_url": "https://github.com/appsforartists",
    "followers_url": "https://api.github.com/users/appsforartists/followers",
    "following_url": "https://api.github.com/users/appsforartists/following{/other_user}",
    "gists_url": "https://api.github.com/users/appsforartists/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/appsforartists/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/appsforartists/subscriptions",
    "organizations_url": "https://api.github.com/users/appsforartists/orgs",
    "repos_url": "https://api.github.com/users/appsforartists/repos",
    "events_url": "https://api.github.com/users/appsforartists/events{/privacy}",
    "received_events_url": "https://api.github.com/users/appsforartists/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2014-08-06T23:59:00Z",
  "updated_at": "2014-08-14T01:47:37Z",
  "closed_at": "2014-08-14T01:47:37Z",
  "author_association": "NONE",
  "body": "I just read the [Flux TodoMVC](http://facebook.github.io/react/docs/flux-todo-list.html) walkthrough.  First, kudos: this is the most complete description of Flux I've seen.  The last time I explored React this doc hadn't been written yet, and the existing event story (\"event bubbling isn't supported - pass your listeners as callbacks through the DOM\") scared me off.  Flux is a much more sensible model; thanks for describing it in such detail.\n\nI have two pieces of feedback:\n\n1)\n\n> we are maintaining a private data structure called _todos. … Because this variable lives outside the class, but within the closure of the module, it remains private — it cannot be directly changed from the outside. This helps us preserve a distinct input/output interface for the flow of data by making it impossible to update the store without using an action.\n\nThis is not strictly true.  If your method had returned `_todos.slice()`, you'd be OK; but as it stands now, an oblivious caller could modify the result of `TodoStore.getAll` in-place without going through the store's methods.  `TodoStore.getAll().push(…)` is effectively `_todos.push(…)`.\n\n2) Move [Creating Semantic Actions](http://facebook.github.io/react/docs/flux-todo-list.html#creating-semantic-actions-) earlier in the walkthrough.  The first thing I wonder after seeing `TodoActions.destroy(this.props.todo.id);` is \"what does `TodoActions` look like?\"  The second thing is why are there so many layers of abstraction: wouldn't replacing that line with `dispatcher.dispatch({ action, id })` do the same thing in a more direct way?\n\nI'm glad to see the Semantic Actions section.  I doubt you'd have created an additional concept (actions) if it wasn't needed, but I still couldn't help but wonder why; it's nice to see my reservation directly addressed in the documentation.\n\nFor what it's worth, I'm still not convinced that this:\n\n```\nTodoActions.destroy(this.props.todo.id);\n```\n\nis significantly cleaner/more semantic than this:\n\n```\ndispatcher.dispatch({\n    \"type\": ActionType.DESTROY,\n    \"id\": type.id\n});\n```\n\nIf both were free, I'd probably prefer the former; however, knowing that I have to write and maintain a `TodoActions` class (and remember what it does) adds weight to my mental model and friction to my development pace.  `Actions.method` is a nicer syntax, but it doesn't communicate anything more clearly than `dispatcher.dispatch(…)` and I hate writing boilerplate.\n",
  "closed_by": {
    "login": "zpao",
    "id": 8445,
    "node_id": "MDQ6VXNlcjg0NDU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zpao",
    "html_url": "https://github.com/zpao",
    "followers_url": "https://api.github.com/users/zpao/followers",
    "following_url": "https://api.github.com/users/zpao/following{/other_user}",
    "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
    "organizations_url": "https://api.github.com/users/zpao/orgs",
    "repos_url": "https://api.github.com/users/zpao/repos",
    "events_url": "https://api.github.com/users/zpao/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zpao/received_events",
    "type": "User",
    "site_admin": false
  }
}
