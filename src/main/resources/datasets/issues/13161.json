{
  "url": "https://api.github.com/repos/facebook/react/issues/13161",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13161/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13161/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13161/events",
  "html_url": "https://github.com/facebook/react/pull/13161",
  "id": 339068988,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTk5ODQ1NTY3",
  "number": 13161,
  "title": "Change warning() to automatically inject the stack, and add warningWithoutStack() as opt-out",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-07-06T20:55:35Z",
  "updated_at": "2018-07-16T21:47:37Z",
  "closed_at": "2018-07-16T21:32:00Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/13161",
    "html_url": "https://github.com/facebook/react/pull/13161",
    "diff_url": "https://github.com/facebook/react/pull/13161.diff",
    "patch_url": "https://github.com/facebook/react/pull/13161.patch"
  },
  "body": "#### Summary\r\n\r\nThis flips `warning()` to always include a component stack **by default** if it exists. It also adds a counterpart `warningWithoutStack()` for cases where you **don't** want to have a stack.\r\n\r\nI opted to have two separate methods because `warning` arguments already have a meaning (they get interpolated). I decided against something like `warning.withoutStack()` because this proved to be a bit annoying in the past (e.g. `emptyFunction.*`), and would be a tiny bit more difficult to adopt our transforms to. I don't feel strongly about this though.\r\n\r\n**This PR shouldn't contain any functional changes.** Only warnings without stacks were converted to use the new function. Warnings that already have stacks just lost their last argument because it's provided automatically now.\r\n\r\n#### Why\r\n\r\n* I want to make it easy for newly added warnings to always have stacks.\r\n* This removes a bunch of `ReactDebugCurrentFrame` direct calls, imports, and wiring.\r\n* This paves the way towards doing more in `warning()`, e.g. determining whether we're in strict mode. Which is something we'll want to expose in every warning so that we can get rid of internal blacklist.\r\n\r\n#### How to Review\r\n\r\n* Calls to `warning()` that had stacks now omit the last formatting argument.\r\n* Calls to `warning()` that didn't have stacks now use `warningWithoutStack()`.\r\n* There are a few infra changes that make me more confident in this, e.g. I added validation of the warning argument number again the count of `%s` interpolations in tests.\r\n\r\nOne notable change is that instead of formatting before calling `console.error()`, we now pass through the message and the arguments, e.g. `console.error('%s is a bad component', 'Foo')`. This works in all major browsers (including IE), and Node.js. Theoretically this might be a breaking change for somebody who was relying on filtering `console.error` calls by exact messages. But we already change warning messages between releases anyway, and this change should make it *easier* to filter messages because the original formatting string is now exposed before the interpolation.\r\n\r\n#### Work Log\r\n\r\n- [x] Introduce `warningWithStack()` that automatically includes a stack from the currently injected implementation.\r\n- [x] Start converting callsites to use `warningWithStack()` and remove threading of `getStack` through utilities shared between SSR and client.\r\n- [x] Figure out places like `assertValidProps` and how they need the frame. Why don't test fails in prod there?\r\n- [x] Consider what to do for isomorphic callsites. They currently wouldn't work with `warningWithStack()` because it would create a circular dependency between `React` and `warningWithStack`.\r\n- [x] Maybe flip them. Make `warning()` have a stack, and `warningWithoutStack()` its explicit counterpart.\r\n- [x] Fail the build if we use warning with stack in a package that doesn't have React dep\r\n- [x] Change our transforms to handle the new warning method too.\r\n- [x] Fix Flow\r\n\r\n<details>\r\n<summary>Follow-up work</summary>\r\n\r\n- [ ] Consider snapshotting warnings?\r\n- [ ] Sometimes we deduplicate based on the stack. Should `warningWithStack()` just do it by default? Other ideas?\r\n- [ ] Convert all renderer callsites that include the stack to `warningWithStack()`.\r\n- [ ] Remove direct usage of `getCurrentFiberStackAddendum`. Always go through the central isomorphic module.\r\n- [ ] Consider doing the same for invariants.\r\n- [ ] Enforce that number of formatting arguments is expected in tests.\r\n- [ ] Consider attaching stack to invariants too? Make debug frame non-DEV-only?\r\n- [ ] Include strictness into the warnings. Integrate StrictMode warnings with this new infra.\r\n- [ ] Ensure internal callsites that depend on `%s` interpolation having already happened don't break\r\n\r\n\r\n</details>",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
