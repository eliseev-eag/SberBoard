{
  "url": "https://api.github.com/repos/facebook/react/issues/14740",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14740/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14740/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14740/events",
  "html_url": "https://github.com/facebook/react/issues/14740",
  "id": 405274598,
  "node_id": "MDU6SXNzdWU0MDUyNzQ1OTg=",
  "number": 14740,
  "title": "Still a \"NotFoundError: Failed to execute 'removeChild' on 'Node'\"",
  "user": {
    "login": "marco-gagliardi",
    "id": 2972151,
    "node_id": "MDQ6VXNlcjI5NzIxNTE=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/2972151?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marco-gagliardi",
    "html_url": "https://github.com/marco-gagliardi",
    "followers_url": "https://api.github.com/users/marco-gagliardi/followers",
    "following_url": "https://api.github.com/users/marco-gagliardi/following{/other_user}",
    "gists_url": "https://api.github.com/users/marco-gagliardi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marco-gagliardi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marco-gagliardi/subscriptions",
    "organizations_url": "https://api.github.com/users/marco-gagliardi/orgs",
    "repos_url": "https://api.github.com/users/marco-gagliardi/repos",
    "events_url": "https://api.github.com/users/marco-gagliardi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marco-gagliardi/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-01-31T14:36:41Z",
  "updated_at": "2019-02-14T19:25:07Z",
  "closed_at": "2019-02-08T16:38:36Z",
  "author_association": "NONE",
  "body": "I smashed again the error \"NotFoundError: Failed to execute 'removeChild' on 'Node'\" too.\r\n\r\nAfter reading tons of threads about it I realized it's a pretty common error, however I couldn't figure out how all the provided solutions could apply to my case: I neither do DOM mutations by hand nor swallow exceptions. \r\n\r\nI think I can reduce the relevant parts of the code as follows: \r\n\r\n**SearchDomains.js**\r\n```\r\n handleAddToCart = domain => {\r\n    if (!domain) {\r\n      return false\r\n    }\r\n\r\n    return this.props.addToCart(domain)\r\n      .catch(e => {\r\n        const errorCode = get(e, 'data.code')\r\n\r\n        if (errorCode === 'DomainTaken') {\r\n          this.setState({\r\n            domains: {\r\n              ...this.state.domains,\r\n              [domain.suggestion]: {\r\n                ...this.state.domains[domain.suggestion],\r\n                availability: STATUS_UNAVAILABLE\r\n              }\r\n            },\r\n            showPremiumDomainModalWarning: true\r\n          })\r\n        } else {\r\n          this.openErrorModal()\r\n        }\r\n\r\n        return Promise.reject(e)\r\n      })\r\n  }\r\n\r\nrender () {\r\n    const domains = this.getDomains()\r\n    const visibleDomains = this.getVisibleDomains()\r\n\r\n    return !this.state.isLoading && (\r\n      <Fragment>\r\n        <LoadMore\r\n          isLoading={this.state.isSearching}\r\n          total={domains.length}\r\n          count={visibleDomains.length}\r\n          loadingLabel='Searching, please wait...'\r\n          infinite\r\n          onLoadMore={this.handleLoadMore}\r\n        >\r\n          {React.cloneElement(this.props.children, {\r\n            domains: this.getDomains(),\r\n            visibleDomains: this.getVisibleDomains(),\r\n            allVisibleDomains: this.getVisibleDomains(0, false),\r\n            onChangeFilter: this.handleFilters,\r\n            onChangeFormFilter: this.handleSort,\r\n            onSearchChange: this.handleSearchChange,\r\n            onAddToCart: this.handleAddToCart,\r\n            ...omit(this.state, 'domains')\r\n          })}\r\n        </LoadMore>\r\n        {this.state.showTimeoutAlert && this.renderTimeoutAlert()}\r\n        {this.state.showErrorModal &&\r\n          <CartResourcesLimitExceeded\r\n            type='domain'\r\n            onClose={this.closeErrorModal}\r\n          />\r\n        }\r\n        <Popup\r\n          isOpen={this.state.showPremiumDomainModalWarning}\r\n          onClose={this.closePremiumModal}\r\n          icon={{ name: 'ic-warning', size: 'md', color: '#f6852f' }}\r\n          title='This is a premium domain'\r\n          message={\r\n            <span>Premium domain names are not registrable via Rebrandly at the moment.\r\n              <A href='https://support.rebrandly.com/hc/en-us/articles/224626587' size='lg' target='_blank'> Read more</A>\r\n            </span>\r\n          }\r\n          primaryButtonProps={{ label: 'Select another domain', onClick: this.closePremiumModal }}\r\n        />\r\n      </Fragment>\r\n    )\r\n  }\r\n```\r\n\r\n\r\n**DomainItem.js:**\r\n\r\n```\r\nrender () {\r\n    let discount\r\n\r\n    if (this.props.isCoupon) {\r\n      discount = <Text className='Text--Disable line-through m-r-24'>${this.props.renewalPrice}</Text>\r\n    } else {\r\n      discount = this.props.currentPrice < this.props.renewalPrice\r\n        ? <Text size='x-small' className='Text--Disable m-r-4'>\r\n          <span className='line-through m-r-4'>\r\n            ${this.props.renewalPrice}\r\n          </span>\r\n          NOW\r\n        </Text>\r\n        : <Text size='x-small' className='Text--Disable m-r-4'>\r\n          ONLY\r\n        </Text>\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        {this.props.availability === STATUS_AVAILABLE\r\n          ? <Fragment>\r\n            {discount}\r\n            {!this.props.isCoupon &&\r\n              <Tooltip\r\n                overlay={<span>First year, then ${this.props.renewalPrice} renewal. <RouterLink target='_blank' href='https://support.rebrandly.com/hc/en-us/articles/225551448-Domain-Pricing-for-Custom-Short-Urls'>Learn more</RouterLink></span>}\r\n                placement='top'\r\n              >\r\n                <Text className='DomainItem__azure m-r-24'>${this.props.currentPrice}</Text>\r\n              </Tooltip>\r\n            }\r\n            {this.state.isLoading\r\n              ? <Loading size='md' />\r\n              : <Button\r\n                isLoading={this.state.isLoading}\r\n                {...this.props.actionButtonProps}\r\n                onClick={this.handleOnClick}\r\n              />\r\n            }\r\n          </Fragment>\r\n          : <Text className='DomainItem__unavailable Text--SubDetail' size='small'>\r\n            {!!this.props.availability && (this.props.availability === STATUS_UNKNOWN ? 'Couldn’t check domain details' : 'Not available')}\r\n          </Text>\r\n        }\r\n      </Fragment>\r\n    )\r\n  }\r\n```\r\n\r\nI was pretty sure there had to be some messed (async) logic changing the cards under the hood between a render cycle and the next one, so I spent some time trying to debug all the updates,  looking for the reason that was driving to an inconsistency in the DOM reconciliation.  \r\n\r\nIndeed, I figured out the issue was with that ternary operator in the DomainItem's `render` function: dropping temporarily the \"else\" case, thus, preventing react from removing a content and injecting a different one, switched off the error.  Of course this was not an acceptable fix.\r\n\r\nThen, I realized that everything could be solved by just removing the wrapping `<Fragment>` in the return statement of DomainItem's `render` function. Now everything works fine:\r\n\r\n ```\r\nreturn this.props.availability === STATUS_AVAILABLE\r\n      ? <Fragment>\r\n        {discount}\r\n        {!this.props.isCoupon &&\r\n        <Tooltip\r\n          overlay={<span>First year, then ${this.props.renewalPrice} renewal. <RouterLink target='_blank' href='https://support.rebrandly.com/hc/en-us/articles/225551448-Domain-Pricing-for-Custom-Short-Urls'>Learn more</RouterLink></span>}\r\n          placement='top'\r\n        >\r\n          <Text className='DomainItem__azure m-r-24'>${this.props.currentPrice}</Text>\r\n        </Tooltip>\r\n        }\r\n        {this.state.isLoading\r\n          ? <Loading size='md' />\r\n          : <Button\r\n            isLoading={this.state.isLoading}\r\n            {...this.props.actionButtonProps}\r\n            onClick={this.handleOnClick}\r\n          />\r\n        }\r\n      </Fragment>\r\n      : <Text className='DomainItem__unavailable Text--SubDetail' size='small'>\r\n        {!!this.props.availability && (this.props.availability === STATUS_UNKNOWN ? 'Couldn’t check domain details' : 'Not available')}\r\n      </Text>\r\n```\r\n\r\nDidn't know if this is an intended behaviour so I thought it was worthy to report it.\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
