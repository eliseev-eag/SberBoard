{
  "url": "https://api.github.com/repos/facebook/react/issues/13346",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13346/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13346/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13346/events",
  "html_url": "https://github.com/facebook/react/issues/13346",
  "id": 348827196,
  "node_id": "MDU6SXNzdWUzNDg4MjcxOTY=",
  "number": 13346,
  "title": "React.createContext singleton enforcement?",
  "user": {
    "login": "rtsao",
    "id": 780408,
    "node_id": "MDQ6VXNlcjc4MDQwOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/780408?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rtsao",
    "html_url": "https://github.com/rtsao",
    "followers_url": "https://api.github.com/users/rtsao/followers",
    "following_url": "https://api.github.com/users/rtsao/following{/other_user}",
    "gists_url": "https://api.github.com/users/rtsao/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rtsao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rtsao/subscriptions",
    "organizations_url": "https://api.github.com/users/rtsao/orgs",
    "repos_url": "https://api.github.com/users/rtsao/repos",
    "events_url": "https://api.github.com/users/rtsao/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rtsao/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2018-08-08T17:47:21Z",
  "updated_at": "2019-07-25T15:01:12Z",
  "closed_at": "2018-08-08T18:15:53Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bit of both?\r\n\r\n**What is the current behavior?**\r\n\r\nThe old context API involved components that provided and consumed context using a shared string key. In other words, the only requirement for communication between components providing or consuming context was that the string key used was the same. This had the side effect of allowing easy communication via React context across packages (i.e. separate node_modules using the same shared context). This might be one of two forms:\r\n1. Entirely different components (using the same context key), perhaps spread around the source code or even in node_modules\r\n2. One or more packages importing the context providing/consuming components of another (a usage pattern more in line with the `React.createContext` abstraction).\r\n\r\nThe new `React.createContext` API works much differently. Instead, for communication to work correctly, the consumer and provider must always come from the exact same function call. Unlike the old API, this means if the provider or consumer is imported from another package, there is now an implicit singleton, otherwise there will be separate `React.createContext` instances.\r\n\r\nI think it is intuitive and reasonable that \"form 1\" does not work with the new API, but less so with \"form 2\".\r\n\r\nWhat is the best way of handling this? So far, the best approach I've thought of is using peer dependencies to enforce the package calling `React.createContext` is never duplicated in node_modules.\r\n\r\nThis potential drawback was not brought up in the [original React.createContext RFC](https://github.com/reactjs/rfcs/pull/2) and I can't seem to find any reference to this limitation in the docs anywhere.\r\n\r\nIs there a recommended way of handling this? Should this be listed in the documentation as a caveat when using `React.createContext`? Is there a way to make this less error-prone? There didn't seem to be an issue regarding this already so I figured I'd create one and kick off a discussion.\r\n\r\n**What is the expected behavior?**\r\n\r\nContext communication should work across package boundaries (see above note on old context API)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis concerns versions of React with the `React.createContext` API",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
