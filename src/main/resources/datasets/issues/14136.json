{
  "url": "https://api.github.com/repos/facebook/react/issues/14136",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14136/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14136/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14136/events",
  "html_url": "https://github.com/facebook/react/issues/14136",
  "id": 378296961,
  "node_id": "MDU6SXNzdWUzNzgyOTY5NjE=",
  "number": 14136,
  "title": "defaultProps inconsistency between createElement and cloneElement",
  "user": {
    "login": "jdlehman",
    "id": 3144695,
    "node_id": "MDQ6VXNlcjMxNDQ2OTU=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3144695?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jdlehman",
    "html_url": "https://github.com/jdlehman",
    "followers_url": "https://api.github.com/users/jdlehman/followers",
    "following_url": "https://api.github.com/users/jdlehman/following{/other_user}",
    "gists_url": "https://api.github.com/users/jdlehman/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jdlehman/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jdlehman/subscriptions",
    "organizations_url": "https://api.github.com/users/jdlehman/orgs",
    "repos_url": "https://api.github.com/users/jdlehman/repos",
    "events_url": "https://api.github.com/users/jdlehman/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jdlehman/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710722093,
      "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
      "name": "Type: Needs Investigation",
      "color": "fbca04",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-11-07T13:53:41Z",
  "updated_at": "2018-11-07T17:28:59Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n`defaultProps` aren't handled the same between `createElement` and `cloneElement`\r\n\r\ngiven a `Modal` component that just adds a wrapper around the children given to it where it has `defaultProps` defined:\r\n```js\r\nfunction Modal({ children }) {\r\n  return <div className=\"Modal\">{children}</div>;\r\n}\r\n\r\nModal.defaultProps = {\r\n  children: <div>Default Content</div>\r\n};\r\n```\r\n\r\n`createElement` sets default props **AFTER** setting children while `cloneElement` sets default props **BEFORE** setting children, resulting in different behavior:\r\n```js\r\nconst defaultModal = React.createElement(Modal,  { children: <div>Hi</div> }, undefined);\r\n// evaluates to the default prop: <div className=\"Modal\"><div>Default Content</div></div>\r\n\r\nconst cloned = React.cloneElement(defaultModal, { children: <div>Hi</div> }, undefined);\r\n// evaluates to <div className=\"Modal\"></div>\r\n```\r\n\r\nHowever, this only happens when children is explicitly set to `undefined`, since there is no check for children being `undefined`.\r\n\r\n```js\r\nconst defaultModal = React.createElement(Modal,  { children: <div>Hi</div> });\r\n// evaluates to the default prop: <div className=\"Modal\"><div>Hi</div></div>\r\n\r\nconst cloned = React.cloneElement(defaultModal, { children: <div>Hi</div> });\r\n// evaluates to  <div className=\"Modal\"><div>Hi</div></div>\r\n```\r\n\r\nI have a PR for a refactor that also makes `cloneElement` behave like `createElement` by setting default props after setting children: https://github.com/facebook/react/pull/14117, though I don't know if this is ultimately the behavior we want with `children`. We might also want to have code that ignores `undefined` children (though I don't know what repercussions that would have inside the reconciler).\r\n\r\nIt is a bit confusing to know if setting children in the config object or as the parameters to the function should take precedence. We should definitely document this, though it is probably not a case that comes up often in real world code.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nCodeSandbox: https://codesandbox.io/s/q3wwrjon24\r\n\r\n**What is the expected behavior?**\r\n\r\n`createElement` and `cloneElement` should set default props in the same way.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCodeSandbox is using React 16.5.2. I think this has been like this for a while if not always.\r\n",
  "closed_by": null
}
