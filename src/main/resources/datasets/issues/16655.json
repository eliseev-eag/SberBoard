{
  "url": "https://api.github.com/repos/facebook/react/issues/16655",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16655/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16655/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16655/events",
  "html_url": "https://github.com/facebook/react/issues/16655",
  "id": 489178419,
  "node_id": "MDU6SXNzdWU0ODkxNzg0MTk=",
  "number": 16655,
  "title": "[Feature Request] Metadata for which props were inherited from default props.",
  "user": {
    "login": "kalbert312",
    "id": 5498623,
    "node_id": "MDQ6VXNlcjU0OTg2MjM=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/5498623?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/kalbert312",
    "html_url": "https://github.com/kalbert312",
    "followers_url": "https://api.github.com/users/kalbert312/followers",
    "following_url": "https://api.github.com/users/kalbert312/following{/other_user}",
    "gists_url": "https://api.github.com/users/kalbert312/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/kalbert312/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/kalbert312/subscriptions",
    "organizations_url": "https://api.github.com/users/kalbert312/orgs",
    "repos_url": "https://api.github.com/users/kalbert312/repos",
    "events_url": "https://api.github.com/users/kalbert312/events{/privacy}",
    "received_events_url": "https://api.github.com/users/kalbert312/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-09-04T13:58:45Z",
  "updated_at": "2019-09-04T14:21:09Z",
  "closed_at": "2019-09-04T14:21:09Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature Request\r\n\r\n**What is the current behavior?**\r\nIt's impossible/super inefficient to figure out which props on a child component were explicitly defined (such that `prop in props` is true) vs which were inherited by default props.\r\n\r\n**What is the expected behavior?**\r\nIt would be helpful to have some metadata on a child that specifies if a prop was merged in from default props. A simple true / false would suffice. This would be useful to have for a very specific issue I'm facing with using `recharts`. It has a super nice declarative JSX approach but based on the way it's designed, it has some limitations. Some child components (XAxis for instance) are tightly coupled with their parent component (BarChart, etc). Long story short, creating proper HOCs on them is basically impossible due to defaultProps interference. I'm creating a wrapper for the top level component (BarChart) that provides additional default props to its child components (theme context, etc). I have the following code:\r\n```typescript\r\nconst BarChart: React.FC<BarChartProps> = fixWrapperFC(BarChartBase, (props) => {\r\n\tconst { children, ...rest } = props;\r\n\r\n\tconst theme = React.useContext(ThemeContext);\r\n\r\n\treturn (\r\n\t\t<BarChartBase {...rest}>\r\n\t\t\t{React.Children.map(children, (c: any) => {\r\n\t\t\t\tif (!c || !c.type || !c.type.displayName) {\r\n\t\t\t\t\treturn c;\r\n\t\t\t\t}\r\n\t\t\t\tconst displayName = c.type.displayName;\r\n\t\t\t\tif (displayName === \"XAxis\") {\r\n\t\t\t\t\treturn React.cloneElement(c, { ...xAxisProps({ theme, ...c.props }), });\r\n\t\t\t\t}\r\n\t\t\t\treturn c;\r\n\t\t\t})}\r\n\t\t</BarChartBase>\r\n\t);\r\n});\r\n```\r\nThe problem is that `c.props` already has default props, and the only way to accomplish what I'm doing is to subtract off default props with some type of equality algorithm, but my first thought is that it's ugly (the code I pasted above is ugly too, but the exterior would be nice and clean).\r\n\r\nI suppose the real problem is the limitations on how this library is designed and that it probably indulges anti-patterns to achieve it's declarative style. The real solution would likely be to rewrite it to support HOCs, however, I'd imagine at some point in the react code, `Object.keys(passedInProps)` and/or `Object.keys(defaultProps)` is somewhat cheaply available and could be tacked onto the child object?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.9",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
