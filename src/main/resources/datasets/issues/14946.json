{
  "url": "https://api.github.com/repos/facebook/react/issues/14946",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14946/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14946/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14946/events",
  "html_url": "https://github.com/facebook/react/issues/14946",
  "id": 413875052,
  "node_id": "MDU6SXNzdWU0MTM4NzUwNTI=",
  "number": 14946,
  "title": "Feature request: `useShouldUpdate` hook",
  "user": {
    "login": "josepot",
    "id": 8620144,
    "node_id": "MDQ6VXNlcjg2MjAxNDQ=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/8620144?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/josepot",
    "html_url": "https://github.com/josepot",
    "followers_url": "https://api.github.com/users/josepot/followers",
    "following_url": "https://api.github.com/users/josepot/following{/other_user}",
    "gists_url": "https://api.github.com/users/josepot/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/josepot/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/josepot/subscriptions",
    "organizations_url": "https://api.github.com/users/josepot/orgs",
    "repos_url": "https://api.github.com/users/josepot/repos",
    "events_url": "https://api.github.com/users/josepot/events{/privacy}",
    "received_events_url": "https://api.github.com/users/josepot/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-02-24T22:13:30Z",
  "updated_at": "2019-03-01T15:36:24Z",
  "closed_at": "2019-03-01T15:08:53Z",
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nIt is currently impossible to let React know that the output of a **functional component** is not affected by the current change. I think that it would be great to have a hook for enabling this capability. In other words: having the SCU functionality in functional components through a hook.\r\n\r\nI'm aware of the existence of `React.memo` and I know that it is possible to accomplish the same thing by splitting the logic in 2 different functional components... as long as we enhance the \"base\" component with `React.memo`. However, I still think that the hook that I'm suggesting would be a pretty nice addition.\r\n\r\nI guess that it's a good idea to show an example of a real case where this hook would be helpful. So, here we go:\r\n\r\nI don't normally use the official react-redux bindings. Instead, I have my own version of the `connect` HOC which has a more limited (and slightly different) API, that better suits my needs. This makes my version a bit more performant and a lot lighter. Regardless of whether it is a good idea not to use the official react-redux bindings, the following example illustrates the benefit of having the hook that I'm suggesting.\r\n\r\nThis is the current implementation of my custom \"connect\" HOC:\r\n\r\n```js\r\nconst emptyObj = {};                                                           \r\nconst alwaysEmpty = () => emptyObj;                                            \r\n                                                                               \r\nexport default (fromStateProps_, fromActionProps = emptyObj, mapper) => {      \r\n  const dependsOnProps = fromStateProps_ && fromStateProps_.length !== 1;      \r\n  const fromStateProps = !fromStateProps_ ? alwaysEmpty : fromStateProps_;     \r\n                                                                               \r\n  return BaseComponent => {                                                    \r\n    const MBaseComponent = memo(BaseComponent);                                \r\n                                                                               \r\n    return props => {                                                          \r\n      const dependantProps = dependsOnProps ? props : emptyObj;                \r\n                                                                               \r\n      const {state, dispatch} = useContext(context);                           \r\n      const stateProps = useMemo(() => fromStateProps(state, dependantProps), [\r\n        state,                                                                 \r\n        dependantProps,                                                        \r\n      ]);                                                                      \r\n      const actionProps = useMemo(() => {                                      \r\n        const res = {};                                                        \r\n        Object.entries(fromActionProps).forEach(([name, aCreator]) => {        \r\n          res[name] = (...args) => dispatch(aCreator(...args));                \r\n        });                                                                    \r\n        return res;                                                            \r\n      }, [dispatch]);                                                          \r\n                                                                               \r\n      return useMemo(() => {                                                   \r\n        const finalProps = mapper                                              \r\n          ? mapper(stateProps, actionProps, props)                             \r\n          : {...props, ...stateProps, ...actionProps};                         \r\n        return <MBaseComponent {...finalProps} />;                             \r\n      }, [actionProps, props, stateProps]);                                    \r\n    };                                                                         \r\n  };                                                                           \r\n};                                                                             \r\n```\r\n\r\nIt works great (for me). However, I would much rather to be able to implement it like this:\r\n\r\n```js\r\nconst emptyObj = {};                                                           \r\nconst alwaysEmpty = () => emptyObj;                                            \r\n                                                                               \r\nexport default (fromStateProps_, fromActionProps = emptyObj, mapper) => {      \r\n  const dependsOnProps = fromStateProps_ && fromStateProps_.length !== 1;      \r\n  const fromStateProps = !fromStateProps_ ? alwaysEmpty : fromStateProps_;     \r\n                                                                               \r\n  return BaseComponent => {                                                    \r\n    const componentFn = BaseComponent.prototype                                \r\n      ? p => <BaseComponent {...p} />                                          \r\n      : p => BaseComponent(p);                                                 \r\n                                                                               \r\n    return props => {                                                          \r\n      const dependantProps = dependsOnProps ? props : emptyObj;                \r\n                                                                               \r\n      const {state, dispatch} = useContext(context);                           \r\n      const stateProps = useMemo(() => fromStateProps(state, dependantProps), [\r\n        state,                                                                 \r\n        dependantProps,                                                        \r\n      ]);                                                                      \r\n      const actionProps = useMemo(() => {                                      \r\n        const res = {};                                                        \r\n        Object.entries(fromActionProps).forEach(([name, aCreator]) => {        \r\n          res[name] = (...args) => dispatch(aCreator(...args));                \r\n        });                                                                    \r\n        return res;                                                            \r\n      }, [dispatch]);                                                          \r\n                                                                               \r\n      useShouldUpdate([actionProps, props, stateProps]);                       \r\n                                                                               \r\n      const finalProps = mapper                                                \r\n        ? mapper(stateProps, actionProps, props)                               \r\n        : {...props, ...stateProps, ...actionProps};                           \r\n                                                                               \r\n      return componentFn(finalProps);                                          \r\n    };                                                                         \r\n  };                                                                           \r\n};                                                                             \r\n```\r\n\r\nHow do you feel about this suggestion? Too weird? ðŸ˜„ \r\n\r\nThanks,\r\n\r\nJosep",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
