{
  "url": "https://api.github.com/repos/facebook/react/issues/4136",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/4136/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/4136/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/4136/events",
  "html_url": "https://github.com/facebook/react/issues/4136",
  "id": 88499798,
  "node_id": "MDU6SXNzdWU4ODQ5OTc5OA==",
  "number": 4136,
  "title": "implications of shouldComponentUpdate on 'render callbacks'",
  "user": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 11,
  "created_at": "2015-06-15T18:11:32Z",
  "updated_at": "2018-02-17T20:44:46Z",
  "closed_at": "2015-06-15T21:48:31Z",
  "author_association": "CONTRIBUTOR",
  "body": "related to https://github.com/facebook/react/issues/4127 / https://discuss.reactjs.org/t/children-as-a-function-render-callbacks/626, this thread is to discuss and understand how `shouldComponentUpdate` should/could behave the render-callback pattern. \n\nAgain, an example, using [react-state](https://github.com/threepointone/react-state) - \n\n``` js\nclass Counters extends React.Component{\n  render(){\n    return <div id='A' onClick={() => this.setState({a: this.state.a + 1})}>\n      <State initial={0}>{\n        (val, set) =>\n          <div id='B' onClick={() => set(val + 1)}>\n            clicked A {this.state.a} times\n            clicked B {val} times\n          </div>\n      }</State>  \n    </div>;\n  }\n}\n```\n\nIn the above example, when `#B` is clicked, everything updates as expected. However, when `#A` is clicked, and because `State` doesn't receive new props, then `B` risks having stale data, and won't reflect the changes in `A`'s state. (This is technically correct, since the render callback here isn't 'pure')\n\nThere are 3 methods (that I can think of) to work around this.\n- the render-callback-component (alternate name, please?) implements `shouldComponentUpdate` to always return `true`. This is my (current) preferred way, because the component is kinda equivalent to a stateful function wrapper on its 'children', and these children would have been rendered anyway. [This is how react-state works](https://github.com/threepointone/react-state/blob/master/src.js#L9) (as also react-springs, etc)\n- render callbacks must always be pure - dependent only on the arguments passed to them in the callback. this should also be fairly performant. the con is that the utility of this pattern diminishes a little.\n- the render-callback-component accepts props that the render callback is 'dependent' on - this is sorta like method 2, except that these props don't have to be passed on to the callback itself, and are only used by the r-c-c to tell itself to update. Based on the above example, it could look like - \n\n``` js\n...\n<State initial={0} depends={{a: this.state.a}}>{\n  (val, set) =>\n    <div id='B' onClick={() => set(val + 1)}>\n      clicked A {this.state.a} times\n      clicked B {val} times\n    </div>\n}</State> \n...\n```\n\nthe con here is it's more fiddly. it also looks like ember's model dependency syntax, and that might not be _too_ bad, the marking of explicit dependencies.\n\nThoughts / advice?\n\n/cc @chenglou \n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
