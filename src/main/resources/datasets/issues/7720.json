{
  "url": "https://api.github.com/repos/facebook/react/issues/7720",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/7720/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/7720/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/7720/events",
  "html_url": "https://github.com/facebook/react/issues/7720",
  "id": 176751171,
  "node_id": "MDU6SXNzdWUxNzY3NTExNzE=",
  "number": 7720,
  "title": "Skip comparing known constant props during reconciliation",
  "user": {
    "login": "jtadmor",
    "id": 8089974,
    "node_id": "MDQ6VXNlcjgwODk5NzQ=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/8089974?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jtadmor",
    "html_url": "https://github.com/jtadmor",
    "followers_url": "https://api.github.com/users/jtadmor/followers",
    "following_url": "https://api.github.com/users/jtadmor/following{/other_user}",
    "gists_url": "https://api.github.com/users/jtadmor/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jtadmor/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jtadmor/subscriptions",
    "organizations_url": "https://api.github.com/users/jtadmor/orgs",
    "repos_url": "https://api.github.com/users/jtadmor/repos",
    "events_url": "https://api.github.com/users/jtadmor/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jtadmor/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 180616330,
      "node_id": "MDU6TGFiZWwxODA2MTYzMzA=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Optimizing%20Compiler",
      "name": "Component: Optimizing Compiler",
      "color": "bfdadc",
      "default": false
    },
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2016-09-13T21:12:40Z",
  "updated_at": "2017-10-04T15:28:31Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a _feature_ or report a _bug_?**\n\n_Feature_\n\n**What is the current behavior?**\n\nCurrently, whether a prop is expected to change or not, it is passed through props. There is no way for us as developers to mark a prop as fixed (should never change over the lifecycle of a component).\n\n**What is the expected behavior?**\n\nThese would _not_ be static properties, i.e. they can change from instance to instance. But they are created at initial render and never change (`===`) from the original. Ideally, though I'm not sure on implementation, they would also always be `deepEqual` to the original (perhaps something like `Object.freeze(Object.assign({}, originalObject))`.\n\nAdvantages to allowing props to be explicitly marked as fixed:\n1. shouldComponentUpdate would be better if a lot if certain props automatically don't / can't change\n2. Allow for errors / warnings when a prop marked as fixed is changed after the initial render.\n3. Possible compiler / render optimizations knowing that particular props will never change over the course of multiple renders. In particular, if a component only has fixed props (including children), we know the render output is fixed, and we can just inline that output into the parent render output.\n\nOne possible API would allow a separate fixedProps category.\n\n`React.createElement(MyComponent, { name: 'Hello' }, children, { message: 'Always this one string' })` (maintain signature)\n\nFor JSX, one (very mediocre) idea would be something like:\n`<MyComponent name=\"Hello\" $fixed.message=\"Always this one string\" />`\n\nAnother would be a separate prop called $fixed or something similar.\n\n`React.createElement(MyComponent, { name: 'Hello', $fixed: { message: 'Always this one string' } }, children)`\n`<MyComponent name=\"Hello\" $fixed={{ message: 'Always this one string' }} />`\n\nIt would be critical that `props` and `fixedProps` would be merged when the component is actually created. `this.props` would always contain all props, functional components still get one arg, and thus nobody has to rewrite render for any component.\n",
  "closed_by": null
}
