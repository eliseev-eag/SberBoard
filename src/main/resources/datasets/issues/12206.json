{
  "url": "https://api.github.com/repos/facebook/react/issues/12206",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12206/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12206/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12206/events",
  "html_url": "https://github.com/facebook/react/issues/12206",
  "id": 296125143,
  "node_id": "MDU6SXNzdWUyOTYxMjUxNDM=",
  "number": 12206,
  "title": "Precompile Renderers with Prepack",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 71502270,
      "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
      "name": "Component: Build Infrastructure",
      "color": "f9d0c4",
      "default": false
    },
    {
      "id": 760751171,
      "node_id": "MDU6TGFiZWw3NjA3NTExNzE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20challenging",
      "name": "Difficulty: challenging",
      "color": "f2687c",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2018-02-10T19:11:25Z",
  "updated_at": "2018-05-21T14:39:45Z",
  "closed_at": "2018-05-21T14:39:44Z",
  "author_association": "MEMBER",
  "body": "Filing this for future work. (If anyone wants to take this up, feel free to! But it's not the easiest task and we won't be able to answer a lot of questions so you'll be largely on your own. It's fun though!)\r\n\r\nWe want to remove as much indirection as we can in hot paths. However React reconciler is abstracted away from the underlying platform through a renderer \"host config\". For example, ReactDOM says [\"here's how you insert a DOM node\"](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/client/ReactDOM.js#L761-L767), and then the reconciler [uses this function](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-reconciler/src/ReactFiberCommitWork.js#L485). The problem is that we get that function by passing a [\"config\" object around](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-reconciler/src/ReactFiberCommitWork.js#L41). This is both extra code to have around, and extra indirection at runtime.\r\n\r\nNote this approach will *not* significantly reduce the code size. But I hope it could make the runtime a bit more efficient.\r\n\r\nIdeally we want the compiled reconciler code to directly include calls into the DOM APIs. We already use Closure Compiler which helps with inlining. But it's not smart enough to see that all functions in the \"host config\" can be fully inlined because the object itself never escapes the bundle. Prepack *is* smart enough for this because it actually executes the initialization code.\r\n\r\nWith this hypothetical new approach, we run Prepack first to get rid of those intermediate representations. Then we run Closure Compiler *on top of that*. Less indirection means Closure Compiler can be smarter about what to inline. I made a proof of concept that shows that the DOM methods successfully end up right in the reconciler hot paths, just like we want:\r\n\r\n<img width=\"350\" alt=\"screen shot 2018-02-10 at 18 39 38\" src=\"https://user-images.githubusercontent.com/810438/36065406-21175038-0e92-11e8-87e1-34f2bb152074.png\">\r\n\r\nMy proof of concept was hacky and done outside the build workflow so I won't be sending a PR. But here's roughly what I did (and what you can try).\r\n\r\nFirst, you'll need to add Prepack to our build workflow. https://github.com/facebook/react/pull/11716 roughly shows *where* that should be done, even though this will give you a broken bundle. You'll need to make sure you include `simpleClosures: true` and (maybe?) `omitInvariants: true` in the options. It will still be broken.\r\n\r\nThe main reason it breaks immediately is the UMD wrapper emitted by Rollup. Prepack just doesn't understand what that soup of checks with `exports`, `module`, and `require` means. I don't think there's an easy way to model this without changing Prepack so I found it easier to [change this function](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/scripts/rollup/build.js#L126) to return `'iife'`. This will tell Rollup to output a simple \"factory pattern\" that assigns to a global, which is more than enough to start hacking on this (but of course will only work in a browser).\r\n\r\nPrepack will still be confused by a few things. I found it easiest to just take the Rollup bundle, save it on the disk, and then manually tweak it and re-run Prepack CLI on it afterwards so that I could quickly get an idea for what exactly is breaking.\r\n\r\nThere are a few common cases:\r\n\r\n* Access to `React.*` (because Prepack doesn't know what it is).\r\n  - It's probably possible to get around this by modeling React as an abstract global, i.e. something like\r\n  \r\n    ```js\r\n    React = __abstract({\r\n      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: __abstract({\r\n        ReactCurrentOwner: __abstract({\r\n          current: __abstract('object')\r\n        }),\r\n        // TODO: other things?\r\n      })\r\n    }, 'React');\r\n    __makeSimple(React);\r\n    __makeSimple(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\r\n    __makeSimple(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner);\r\n    ```\r\n\r\n  prepended to the input bundle.\r\n\r\n  I didn't get very far there so I just replaced `React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign` with `Object.assign` in the bundle, but we'll need a proper fix.\r\n\r\n* Access to `window` and `document` during initialization.\r\n  - Some cases like `document.documentMode` can be shimmed with something like:\r\n\r\n  ```js\r\n  document = __abstract({\r\n    documentMode: __abstractOrUndefined('number'),\r\n  });\r\n  __makeSimple(document);\r\n  ```\r\n\r\n  - Other cases like `document.createElement('div').style` probably won't work at all. I don't know how to model this as abstract.\r\n\r\n  - For all cases that aren't clear, I just made them initialize lazily. Prepack only executes the initial path. So code like:\r\n\r\n  ```js\r\n  var supportSomeFeature = document.documentMode <= 11;\r\n\r\n  function shouldDoSomething() {\r\n    if (supportSomeFeature) {\r\n      // ...\r\n    }\r\n  }\r\n  ```\r\n\r\n  could be written like:\r\n\r\n  ```js\r\n  var didInit = false;\r\n  var supportSomeFeature;\r\n\r\n  function ensureReady() {\r\n    if (didInit) {\r\n      return;\r\n    }\r\n    didInit = true;\r\n\r\n    // go wild here!\r\n    supportSomeFeature = document.documentMode <= 11;\r\n  }\r\n\r\n  function shouldDoSomething() {\r\n    ensureReady();\r\n    if (supportSomeFeature) {\r\n      // ...\r\n    }\r\n  }\r\n  ```\r\n\r\n  I'm not super happy about this but it works. There's like 4 or 5 places where this ends up being necessary. Maybe we can model more with abstracts but I don't know Prepack that well.\r\n\r\n* Non-deterministic calls like `Math.random().toString()`\r\n\r\n  Not sure what to do about those. For now I just shimmed them to be string literals. Maybe we can teach Prepack that `Math.random().toString()` is also an abstract string somehow.\r\n\r\nSay we just fix all these immediate issues. Donâ€™t get too excited! The first bundle will be huge. This is because Prepack pre-evaluates all metaprogramming. So code [like this](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/events/getVendorPrefixedEventName.js#L17-L37) will turn into giant \"precomputed\" object literals with all the final values.\r\n\r\nOne way to solve it is just to remove code like this. It can be tricky although with time we should move into that direction. Another way is to delay initialization. Prepack only \"pre-executes\" the initial path. So we can change the code to lazily initialize those objects (e.g. not until the functions that use them are called for the first time). I already did some work to find those places:\r\n\r\n* those [CSS prefixes](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/events/getVendorPrefixedEventName.js#L17-L37) I mentioned\r\n* more [CSS prefixes](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/shared/CSSProperty.js#L75-L79)\r\n* [DOM property configs](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/shared/DOMProperty.js#L202-L492)\r\n* `eventTypes` [here](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-dom/src/events/SimpleEventPlugin.js#L122-L149)\r\n\r\nThese are the cases that Prepack \"explodes\". By solving them you'll get back to roughly the same bundle size as normal React. For my super hacky version, I made all event plugins \"lazy\" and injected them during the first `ReactDOM.render` call. This way Prepack doesn't attempt to pre-evaluate those paths (which contains those explosive objects). Maybe there's a better way (e.g. making just `eventTypes` lazy, or somehow avoiding the need for those objects altogether).\r\n\r\nTo get rid of the host config, I needed to make sure parts of it [like `mutation` object](https://github.com/facebook/react/blob/29e8924c70856bef9b11e0c74a450140bfcce773/packages/react-reconciler/src/ReactFiberCommitWork.js#L263) aren't not referenced in inner closures. Otherwise Prepack won't know it's safe to omit it. So I added `hasMutation = config.mutation` early and then used just that (and the destructured functions themselves). By that point my bundle was already a few hundred bytes smaller than the original one, and the host config indirection was gone.\r\n\r\nThe final problem I bumped into was that GCC was running out of memory. For some reason Prepacked input puts it under more pressure. I was able to work around by manually bumping the process memory limit:\r\n\r\n```\r\nnode --max-old-space-size=8192 ./scripts/rollup/build.js dom-client --type=UMD_PROD \r\n```\r\n\r\nIt peaks around 5GB but then compiles.\r\n\r\nTo sum up, this was fun as an evening hack, and is probably a viable longer term strategy. We need to think about how to solve those object initialization issues and whether we want to make more things lazy. Of course we also need to figure out how to integrate this into our build properly (e.g. do we just re-add UMD/Node headers later? do we model them with Prepack?)\r\n\r\nI think it's a fun task to work on for motivated contributors so I'll tag it as one. But please don't expect that the result would get merged. This is mostly exploratory work. It would be awesome to see a working PR though!",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
