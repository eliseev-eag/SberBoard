{
  "url": "https://api.github.com/repos/facebook/react/issues/10338",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/10338/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/10338/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/10338/events",
  "html_url": "https://github.com/facebook/react/issues/10338",
  "id": 246970317,
  "node_id": "MDU6SXNzdWUyNDY5NzAzMTc=",
  "number": 10338,
  "title": "More permissive rehydration logic",
  "user": {
    "login": "geelen",
    "id": 23264,
    "node_id": "MDQ6VXNlcjIzMjY0",
    "avatar_url": "https://avatars3.githubusercontent.com/u/23264?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/geelen",
    "html_url": "https://github.com/geelen",
    "followers_url": "https://api.github.com/users/geelen/followers",
    "following_url": "https://api.github.com/users/geelen/following{/other_user}",
    "gists_url": "https://api.github.com/users/geelen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/geelen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/geelen/subscriptions",
    "organizations_url": "https://api.github.com/users/geelen/orgs",
    "repos_url": "https://api.github.com/users/geelen/repos",
    "events_url": "https://api.github.com/users/geelen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/geelen/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710332294,
      "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
      "name": "Component: Server Rendering",
      "color": "d4c5f9",
      "default": false
    },
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2017-08-01T06:44:46Z",
  "updated_at": "2017-10-04T20:20:44Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "So for the last little while I've been pursuing an idea called [React Snapshot](https://github.com/geelen/react-snapshot), where instead of running your code in a Node environment to generate static HTML, you run it in a virtual browser (jsdom or chrome headless) and take a snapshot of the DOM at a particularly moment in time, then host the snapshots like any other static file (technique also known as pre-rendering).\r\n\r\nI've been tossing around different API choices (https://github.com/geelen/react-snapshot/pull/30) in order to handle components that have async data fetching requirements, but I'm already starting to see real promise in this approach. Because the snapshot environment is so similar to the client one, far fewer changes are needed to get the performance & accessibility benefits of serving real HTML to your users. This is an example of the React Snapshot async API to make a component snapshottable:\r\n\r\n```diff\r\n+ import { snapshot } from 'react-snapshot'\r\n\r\nclass Home extends React.Component {\r\n  state = { quotes: null }\r\n\r\n  componentWillMount() {\r\n+   snapshot(() => (\r\n      fetch('/api/quotes')\r\n        .then(response => response.json())\r\n+   ))\r\n    .then(quotes => {\r\n      this.setState({ quotes })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { quotes } = this.state\r\n    return (\r\n      <div className=\"Quotes\">\r\n        {\r\n          quotes && quotes.map((quote, i) => <Quote key={i} quote={quote}/>)\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n```\r\n\r\nThe idea is that any async parts of your app can be wrapped in a `snapshot` call, which caches responses and rehydrates on the client. However, I've hit a few walls that I think means I'd need changes to React itself to take this to its logical conclusion. Hence, I wanted to start the discussion about whether such changes would be compatible with React's future direction.\r\n\r\n### Rehydration\r\n\r\nAs far as I can tell from my experimentation and from reading the code, the two criteria for reusing the existing DOM elements in a pre-rendered HTML page is:\r\n\r\n* the adler32 hash of the initial client-rendered markup has to match the `data-react-checksum` present on the `rootElement`.\r\n* the `_domID` of each instance in the render tree needs to match the `data-react-id` on each DOM element\r\n\r\nBetween those two criteria, its enforced that the _structure_ and the _content_ of the DOM is the same. I can kinda see why both are needed—the checksum is the cheapest way to confirm the structure will be the same, but the ID of each element is needed to actually wire everything up. Also, `data-react-checksum` is just an attribute, and could be calculated off something that's no longer present in the HTML.\r\n\r\nHowever, generating the exact right checksum in any other way than the existing SSR API turns out to be pretty difficult!\r\n\r\n### HTML-escaping woes\r\n\r\nI hit this problem where I was rendering the React app like normal, then taking the `innerHTML` of the root container, then passing it to [`addChecksumToMarkup`](https://github.com/facebook/react/blob/master/src/renderers/dom/stack/server/ReactMarkupChecksum.js#L26), and not getting the same checksum as `ReactDOMServer.renderToString`. I first realised I needed to add the `data-reactid` to each element along the way, which wasn't too hard, but still it wasn't working. I figured out it's due to [`escapeTextContentForBrowser`](https://github.com/facebook/react/blob/master/src/renderers/dom/shared/escapeTextContentForBrowser.js) converting things like `'` to `&#x27;` and `\"` to `&quot;`, meaning that while the content _appears_ the same once rendered, the precise string is not, therefore the checksum is not, and no rehydration takes place.\r\n\r\nFrom what I can understand, again by reading the code, React _always_ sanitises the HTML content before generating markup (on server or in client), it's just the fact that once its injected into the DOM, `innerHTML` doesn't re-sanitise things like quotes. They don't technically need to be, as discussed in issue https://github.com/facebook/react/issues/3879, and so if that were to be changed this particular problem would disappear, but there may well be more I just haven't hit yet. To me, the real issue is needing to have the content be byte-for-byte equivalent, rather than just functionally (and structurally) equivalent.\r\n\r\n### My interim solution\r\n\r\nAt the moment, I've realised its easier to boot up the app in its entirety, wait for all async processes to take place, then effectively reboot the app using `ReactDOMServer.renderToString` and splice the markup in place. Any side-effects relying on `componentDidMount` (like CSS injection or meta tags in the HEAD) that affect the DOM _outside_ the React app are preserved, but the markup and checksum of the React-rendered HTML are guaranteed to be correct. It works, but its not ideal. You still have to understand that your components are running in two different \"modes\", they'll run different lifecycle methods in each, and only one generates the final snapshot. Which I think adds an unreasonable conceptual burden, much the same way server-rendering does.\r\n\r\nThat's really the problem I see with the status quo and why I started looking into this problem in the first place. If snapshot/server rendering requires too much overhead, most people won't do it, which is exactly where we're at. Create-react-app doesn't include any because none of the options are simple enough with a broad enough applicability. The official [React Router docs](https://reacttraining.com/react-router/web/guides/code-splitting/code-splitting-server-rendering) warn agains combining server-rendering and code-splitting. Server-rendering boilerplates include fairly specific webpack hacks to provide the same environment on server and client, etc.\r\n\r\nThe result is that most people only ever do client-rendering. They serve a blank page & render everything client-side. Code splitting and service worker caching offer useful advantages but imo it's not enough. Snapshot rendering _could_ be the solution, but only if it can offer big benefits for small changes to application code.\r\n\r\n### My Dream Solution\r\n\r\nArchitecturally, what I'd like is for an arbitrary React app to be launched on one browser, executed until ready (async resources complete), snapshotted (serialised to HTML), then resumed on another browser. Those snapshots would be generated then cached at the edge of a CDN during deployment, or periodically depending on how often the content changes.\r\n\r\nPractically, I think that would require two changes to React's architecture:\r\n\r\nThe first is for a weaker check for rehydration—some other fingerprint than a hash of the escaped HTML. Some other method for a snapshot to indicate to React to reuse as much of the existing DOM as possible.\r\n\r\nThe second would be for only parts of the tree to be rehydrated rather than the whole thing. If a component has some side-effect, say in a `componentDidMount`, then the snapshotted HTML would include the result of that side-effect. But when the app boots on the client side, the render method will generate the initial behaviour. At the moment React would replace what's there with what's just been rendered, but it might be preferable to leave the DOM unchanged on the first render, then wire things up later.\r\n\r\nI don't know the exact specifics of a solution, nor do I know enough of the internals of React as it is now or as it will become, but I wanted to start the discussion and see if there was any interest from the React team & wider community in this use case and direction. I look forward to hearing your thoughts!",
  "closed_by": null
}
