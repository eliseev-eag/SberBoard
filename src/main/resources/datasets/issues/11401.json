{
  "url": "https://api.github.com/repos/facebook/react/issues/11401",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11401/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11401/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11401/events",
  "html_url": "https://github.com/facebook/react/issues/11401",
  "id": 269655958,
  "node_id": "MDU6SXNzdWUyNjk2NTU5NTg=",
  "number": 11401,
  "title": "WIP RFC: Improvements to the \"ref\" system",
  "user": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 739777675,
      "node_id": "MDU6TGFiZWw3Mzk3Nzc2NzU=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
      "name": "Component: Component API",
      "color": "d4c5f9",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 32,
  "created_at": "2017-10-30T16:01:55Z",
  "updated_at": "2019-03-09T19:56:46Z",
  "closed_at": "2018-08-15T15:46:33Z",
  "author_association": "MEMBER",
  "body": "This is a formal discussion to talk about the future of refs within React and how we can improve upon them. \r\n\r\n## Current Behavior\r\n\r\nCurrently, there are two ways of doing refs in React, string refs and callback refs.\r\n\r\n### String refs\r\n\r\nString refs can be applied to \"composite\" components that are class components (i.e. `<MyComponent />`) and \"host\" components (i.e. `<span />`). \r\n\r\nAn example of how this might look like for both types:\r\n\r\n```jsx\r\n// host components\r\nclass MyComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.refs.input.focus();\r\n  }\r\n  render() {\r\n    return <div><input ref=\"input\" type=\"text\" /></div>\r\n  }\r\n}\r\n\r\n// composite components\r\nclass InputWrapper extends React.Component {\r\n  focus() {\r\n    this.refs.input.focus();\r\n  }\r\n  render() {\r\n    return <input ref=\"input\" type=\"text\" />\r\n  }\r\n}\r\nclass FormComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.refs.inputWrapper.focus()\r\n  }\r\n  render() {\r\n    return <InputWrapper ref=\"inputWrapper\" />\r\n  }\r\n}\r\n```\r\n\r\n### Callback refs\r\n\r\nCallback refs can also be applied to \"composite\" components that are class components (i.e. `<MyComponent />`) and \"host\" components (i.e. `<span />`). \r\n\r\nAn example of how this might look like for both types:\r\n\r\n```jsx\r\n// host components\r\nclass MyComponent extends React.Component {\r\n  componentDidMount() {\r\n    if (this._inputNode) {\r\n      this._inputNode.focus();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input ref={domNode => this._inputNode = domNode} type=\"text\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// composite components\r\nclass InputWrapper extends React.Component {\r\n  focus() {\r\n    this._input.focus();\r\n  }\r\n  render() {\r\n    return <input ref={domNode => this._input = domNode} type=\"text\" />\r\n  }\r\n}\r\nclass FormComponent extends React.Component {\r\n  componentDidMount() {\r\n    this._inputWrapper.focus()\r\n  }\r\n  render() {\r\n    return <InputWrapper ref={instance => this._inputWrapper = instance} />\r\n  }\r\n}\r\n```\r\n\r\n## Proposed Behavior\r\n\r\nI propose three major changes to how the current ref system works:\r\n\r\n### Deprecate string refs for removal in React 17\r\n\r\nThe ref API is broken is several aspects (taken from https://github.com/facebook/react/issues/1373).\r\n\r\n- You have to refer to this.refs['myname'] as strings to be Closure Compiler Advanced Mode compatible.\r\n- It doesn't allow the notion of multiple owners of a single instance.\r\n- Magical dynamic strings potentially break optimizations in VMs.\r\n- It needs to be always consistent, because it's synchronously resolved. This means that asynchronous batching of rendering introduces potential bugs.\r\n- We currently have a hook to get sibling refs so that you can have one component refer to it's sibling as a context reference. This only works one level. This breaks the ability to wrap one of those in an encapsulation.\r\n- It can't be statically typed. You have to cast it at any use in languages like Flow or TypeScript.\r\n- There's no way to attach the ref to the correct \"owner\" in a callback invoked by a child. `<Child renderer={index => <div ref=\"test\">{index}</div>} />` -- this ref will be attached where the callback is issued, not in the current owner.\r\n- They require access to the React runtime to find the current owner during the creation of a ReactElement, making ahead-of-time optimizations hard to deal with.\r\n\r\nCallback refs do not have the above issues and have been the recommended choice by the React team for some time. You can already do everything and more with callback refs, so I personally feel there's no need to keep the string ref system around.\r\n\r\nOther libraries, such as Inferno and Preact have already removed string refs and have reported performance optimization from doing so.\r\n\r\n### Deprecate the \"ref\" prop entirely\r\n\r\nI feel refs on components lead to problematic patterns that make apps much harder to scale because it can easily break the uni-direction flow of a component tree. In my opinion, class components shouldn't be able to access the instances of other components for communication â€“ they should use `props` instead. Alternatively, in cases where access of a root DOM node is needed but unavailable, a wrapper component (https://github.com/facebook/react/issues/11401#issuecomment-340543801) could be used as an escape hatch.\r\n\r\nThe below example is something that I personally feel is a problematic pattern and one that I've seen bite teams in the past:\r\n\r\n```jsx\r\nclass ItemContainer extends React.Component {\r\n  render() {\r\n    let { subscribe, unsubscribe } = props.SubscriptionHandler;\r\n\r\n    return (\r\n      <ul>\r\n        { this.props.items.map( item => (\r\n           <ListItem \r\n              key={item.uid}\r\n              data={item.data}\r\n              ref={\r\n                _ref => _ref ? subscribe(item.uid, _ref) : unsubscribe(item.uid, _ref)\r\n              }\r\n           />\r\n         ) }\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nThe above example couples all the handling of the items in the item container, breaking the control flow. Ideally, the `SubscriptionHandler` should be passed to the child as a prop, then the child can control its own flow.\r\n\r\nAnother usage of refs on composite components is related to `ReactDOM.findDOMNode(...)` usage. By passing `findDOMNode` the component instance from the ref, you can get back the root DOM node. An example of this follows:\r\n\r\n```jsx\r\nclass DOMContainer extends React.Component {\r\n  render() {\r\n    if (this.props.type === \"inline\") {\r\n      return <span />;\r\n    } else {\r\n      return <div />;\r\n    }\r\n  }\r\n}\r\nclass Appender extends React.Component {\r\n  componentDidMount() {\r\n    ReactDOM.findDOMNode(this._domContainer).appendChild(this.props.node);\r\n  }\r\n  render() {\r\n   return <DOMContainer ref={_ref => this._domContainer = _ref} type=\"inline\" />\r\n  }\r\n}\r\n```\r\n\r\nThis approach can be avoided in this instance by passing refs via props:\r\n\r\n```jsx\r\nfunction DOMContainer(props) {\r\n  if (props.type === \"inline\") {\r\n    return <span ref={props.rootRef} />;\r\n  } else {\r\n    return <div ref={props.rootRef} />;\r\n  }\r\n}\r\nclass Appender extends React.Component {\r\n  componentDidMount() {\r\n     this._rootRef.appendChild(this.props.node);\r\n  }\r\n  render() {\r\n   return <DOMContainer rootRef={_ref => this._rootRef = _ref} type=\"inline\" />\r\n  }\r\n}\r\n```\r\n\r\n### Add a special \"hostRef\" prop that only works on host components\r\n\r\nThis is to reduce confusion, as `hostRef` would be a normal prop on composite components. Keeping the current \"ref\" naming might cause unintended problems. This would also allow apps to move over to the new system incrementally. Furthermore, `hostRef` should only accept callback refs, not string refs. An example of this:\r\n\r\n```jsx\r\nfunction Button({ className, ...props }) {\r\n  return (\r\n    <button\r\n      {...props}\r\n      className={classNames(className, 'my-btn')}\r\n    />\r\n  );\r\n}\r\n\r\n// \"hostRef\" is a simple prop here, and gets passed through to the <button> child via JSX spread\r\n<Button hostRef={ _ref => console.log(_ref) } className=\"headerBtn\" />\r\n```\r\n\r\n## Downsides\r\n\r\n### Migration Cost\r\n\r\nBoth changes in this proposal have a cost for migration. \r\n\r\n- String refs are still widely used in third-party components but are likely to be trackable and upgraded via codemodding.\r\n- Refs on composite components are far more widely used than string refs, so it may not make sense to make those changes vs the cost it will have on the React ecosystem. It's unlikely that they can be upgraded via a codemod.\r\n\r\n### Codemodding\r\n\r\nIt may be possible to automate the vast majority of string refs to callback refs via a codemod. There will need to be some form of checking for where the owner of a ref differs in cases of string refs vs callback refs. [This point needs to be broken apart and discussed more]\r\n\r\nIt might not be possible to automate a codemod for refs on composite components as it would require a change in how the structure of the components in an app work. [This point needs to be broken apart and discussed more]\r\n\r\n## Other Considerations?\r\n\r\nReact Native currently doesn't have host components, only composite components. So refs on core components such as `<View />` will need special consideration for how they may function as they do now. Maybe they could function by a prop called `viewRef` or something similar, which would work like refs currently do.",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
