{
  "url": "https://api.github.com/repos/facebook/react/issues/14756",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14756/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14756/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14756/events",
  "html_url": "https://github.com/facebook/react/pull/14756",
  "id": 406444366,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjUwMTQxMDcw",
  "number": 14756,
  "title": "[Wait for Hooks before merging] Scheduler.unstable_next",
  "user": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-02-04T17:47:14Z",
  "updated_at": "2019-02-06T08:16:42Z",
  "closed_at": "2019-02-06T08:16:42Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/14756",
    "html_url": "https://github.com/facebook/react/pull/14756",
    "diff_url": "https://github.com/facebook/react/pull/14756.diff",
    "patch_url": "https://github.com/facebook/react/pull/14756.patch"
  },
  "body": "When a user initiates an action, they expect immediate feedback. They don't necessarily expect the action to finish immediately, but they do expect some sort of response from the UI within a timeframe that feels immediate, so they know their request was received.\r\n\r\nIn React, the recommended way to achieve this is to split expensive updates into two separate tasks. The first task contains work that needs to finish immediately. We refer to this as a \"user blocking\" update. An example is, when switching to a new tab in a tabbed interface, the new tab should change color immediately after it's clicked.\r\n\r\nEverything that doesn't need to happen immediately (i.e. doesn't block the user) should happen in a second task. This task typically takes longer to finish, either because it's CPU intensive or because it relies on IO-bound resources. In the tab switching example, this includes loading and rendering the content that corresponds to the newly selected tab. We refer to this as a \"normal\" update, because this category tends to encompass most of the work in a React application.\r\n\r\nTo implement this pattern in React, you need a separate `setState` call for each of the two tasks. The first `setState` should happen directly inside the event handler. React will automatically infer that this update is user-blocking and schedule it at the corresponding priority.\r\n\r\nThe second update — the more expensive one that does the bulk of the work — should be wrapped in a call to `Scheduler.next`:\r\n\r\n```js\r\nconst onClick = () => {\r\n  // Local update that renders immediately\r\n  setHighlightedTab(tab);\r\n  Scheduler.next(() => {\r\n    // Navigation update that might take a bit longer to finish\r\n    dispatch({type: 'switch_tab', tab});\r\n  });\r\n};\r\n```\r\n\r\nUpdates initiated inside the function passed to `Scheduler.next` are scheduled with \"normal\" priority, instead of user-blocking priority. (The function itself is immediately invoked, a la `batchedUpdates` and `flushSync`.)\r\n\r\nThe name \"next\" is intentionally vague about its exact semantics. It's meant to imply that the task scheduled inside passed function happen after the task scheduled directly inside the event handler.",
  "closed_by": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  }
}
