{
  "url": "https://api.github.com/repos/facebook/react/issues/2559",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/2559/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/2559/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/2559/events",
  "html_url": "https://github.com/facebook/react/issues/2559",
  "id": 49296006,
  "node_id": "MDU6SXNzdWU0OTI5NjAwNg==",
  "number": 2559,
  "title": "Testable React Components",
  "user": {
    "login": "iammerrick",
    "id": 109635,
    "node_id": "MDQ6VXNlcjEwOTYzNQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/109635?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iammerrick",
    "html_url": "https://github.com/iammerrick",
    "followers_url": "https://api.github.com/users/iammerrick/followers",
    "following_url": "https://api.github.com/users/iammerrick/following{/other_user}",
    "gists_url": "https://api.github.com/users/iammerrick/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iammerrick/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iammerrick/subscriptions",
    "organizations_url": "https://api.github.com/users/iammerrick/orgs",
    "repos_url": "https://api.github.com/users/iammerrick/repos",
    "events_url": "https://api.github.com/users/iammerrick/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iammerrick/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 14,
  "created_at": "2014-11-18T21:31:06Z",
  "updated_at": "2014-11-21T03:39:53Z",
  "closed_at": "2014-11-21T03:39:53Z",
  "author_association": "CONTRIBUTOR",
  "body": "I wrote an article on [dependency injection with react](http://merrickchristensen.com/articles/react-dependency-injection.html) using properties. The TLDR of it is this: \n\n``` javascript\nvar MyComponent = React.createClass({\n  propTypes: {\n    model: React.PropTypes.shape({\n      getState: React.PropTypes.func\n    })\n  },\n\n  getDefaultProps() {\n    return {\n      model: new MyComponentViewModel(new HTTP())\n    };\n  },\n\n  getInitialState() {\n    return this.props.model.getState()\n  },\n\n  render() {\n    return <h1>Hello {this.state.name}</h1>;\n  }\n});\n```\n\nThis enables a user to override the dependencies at runtime during testing, but leave the implementation untouched. The problem is that if a user has multiple `MyComponent`s their ViewModel is shared. This is a problem using the traditional `require()` approach as well, where one `require('MyComponentViewModel')`s because it is a singleton. `getDefaultProps()` cacheing effectively nullifys this technique's use for instance level dependency injection.\n\nCurrently in react there is only two ways to pass things in at runtime:\n1. Child components.\n2. Props\n\nBecause React copies props even though they are technically per instance I have no other way of passing in dependencies at runtime. \n\nThe ultimate goal of this is to write testable react components without mocking at the module level. \n## Why not mock at the module level?\n\nHere is an excerpt from my article:\n1. It's slower, you are reevaluating the module several times.\n2. The module still has the same state for an entire test file, multiple it() blocks would still need to reset state or require() the module in each it() block. Slow and difficult to test.\n3. require is a service locator, not a dependency injector. Using it for both conflates it's use violating the single responsibility principle.\n4. In tests uses of instanceof can break because you could be getting a different instance for each require().\n5. Code is now encouraged to be written in the form of singletons which is problematic for it's own reasons.\n## Some Potential Solutions\n\nI realize that other people may not be of the same opinion about mocking at the module level but react being a library I do think it should have some notion of passing in runtime dependencies. Or somehow support a testing story that doesn't involve module level mocking.\n\nMaybe a constructor lifecycle function that receives the props? This would enable me to per instance use a passed in prop as a dependency. Another option would be to stop caching getDefaultProps(), I imagine that is cached because props are typically viewed as immutable but there is currently no other way to pass arguments to a component. \n",
  "closed_by": {
    "login": "iammerrick",
    "id": 109635,
    "node_id": "MDQ6VXNlcjEwOTYzNQ==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/109635?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/iammerrick",
    "html_url": "https://github.com/iammerrick",
    "followers_url": "https://api.github.com/users/iammerrick/followers",
    "following_url": "https://api.github.com/users/iammerrick/following{/other_user}",
    "gists_url": "https://api.github.com/users/iammerrick/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/iammerrick/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/iammerrick/subscriptions",
    "organizations_url": "https://api.github.com/users/iammerrick/orgs",
    "repos_url": "https://api.github.com/users/iammerrick/repos",
    "events_url": "https://api.github.com/users/iammerrick/events{/privacy}",
    "received_events_url": "https://api.github.com/users/iammerrick/received_events",
    "type": "User",
    "site_admin": false
  }
}
