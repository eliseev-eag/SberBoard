{
  "url": "https://api.github.com/repos/facebook/react/issues/14744",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14744/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14744/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14744/events",
  "html_url": "https://github.com/facebook/react/pull/14744",
  "id": 405737875,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjQ5NjMxNzc4",
  "number": 14744,
  "title": "expose `TestUtils.act()` for batching actions in tests",
  "user": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 37,
  "created_at": "2019-02-01T15:01:57Z",
  "updated_at": "2019-02-20T04:22:14Z",
  "closed_at": "2019-02-05T16:10:17Z",
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/14744",
    "html_url": "https://github.com/facebook/react/pull/14744",
    "diff_url": "https://github.com/facebook/react/pull/14744.diff",
    "patch_url": "https://github.com/facebook/react/pull/14744.patch"
  },
  "body": "### `act()` for testing react components\r\n---\r\n\r\n```js\r\n// React DOM\r\nimport { act } from 'react-dom/test-utils';\r\n\r\n// React Native\r\nimport { act } from 'react-test-renderer';\r\n```\r\n\r\nReact, like other libraries, doesn't guarantee synchronous ordering and execution of _it's_ own work. eg - calling `this.setState()` inside a class doesn't actually set the component state immediately. In fact, it might not even update the state of the component in the same 'tick'. This isn't a problem when it comes to 'users'; they interact with React surfaces asynchronously, giving react and components plenty of time to 'resolve' to particular states.\r\n\r\nHowever, tests are unique in that people write code, usually sequential, to interact with React components, and some assumptions they make won't hold true. Consider - with React's new `useEffect` hook, a component can run a side effect as soon as it 'starts up'. As a contrived example -\r\n\r\n```jsx\r\nfunction App(props) {\r\n  useEffect(() => {\r\n    props.callback();\r\n  });\r\n  return null;\r\n}\r\n```\r\n\r\nLet's say you write a test for it like so -\r\n\r\n```jsx\r\nlet called = false;\r\nrender(\r\n  <App\r\n    callback={() => {\r\n      called = true;\r\n    }}\r\n  />,\r\n  document.body\r\n);\r\nexpect(called).toBe(true); // this fails, it's false instead!\r\n```\r\n\r\nThe test would fail, which seems counterintuitive at first. But the docs explain it - \"The function passed to useEffect will run after the render is committed to the screen.\" So while the effect has been queued into it's scheduler, it's up to React to decide when to run it. React only guarantees that it'll be run before the browser has reflected changes made to the dom to the user (ie - before the browser has 'painted' the screen)\r\n\r\nYou may be tempted to refactor this like so -\r\n\r\n```jsx\r\n// don't do this!\r\nfunction App(props) {\r\n  useLayoutEffect(() => {\r\n    props.callback();\r\n  });\r\n  return null;\r\n}\r\n```\r\n\r\nThis would \"work\" in that your test would pass, but that's because you've explicitly using a render blocking effect where it possibly wasn't required. This is bad for a number of reasons, but in this context, it's bad because we're changing product behavior just to fix a test.\r\n\r\nWhat can we do better?\r\n\r\nWell, React could expose a helper, let's call it `act`, that guarantees the sequential execution of it's update queue. Let's rewrite the test -\r\n\r\n```jsx\r\nlet called = false;\r\nact(() => {\r\n  // this 'scope' is safe to interact with the React component,\r\n  // rendering and clicking as you please\r\n  render(\r\n    <App\r\n      callback={() => {\r\n        called = true;\r\n      }}\r\n    />,\r\n    document.body\r\n  );\r\n});\r\n// at this point, we can guarantee that effects have been executed,\r\n// so we can make assertions\r\nexpect(called).toBe(true); // this passes now!\r\nact(() => {\r\n  // further interactions, like clicking buttons, scrolling, etc\r\n});\r\n// more assertions\r\n```\r\n\r\nNote - React still doesn't synchronously execute the effect (so you still can't put your `expect` statements _inside_ `act`), but it does guarantee to execute all enqueued effects right after `act` is called.\r\n\r\nThis is a nice mental model for separation of concerns when testing components - \"React, here's a batch of code I'd like you to run at one go\", followed by more code to test what React has actually 'done'.",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
