{
  "url": "https://api.github.com/repos/facebook/react/issues/16009",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16009/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16009/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16009/events",
  "html_url": "https://github.com/facebook/react/issues/16009",
  "id": 461363735,
  "node_id": "MDU6SXNzdWU0NjEzNjM3MzU=",
  "number": 16009,
  "title": "[Flare] Rethinking Focus",
  "user": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 1296748300,
      "node_id": "MDU6TGFiZWwxMjk2NzQ4MzAw",
      "url": "https://api.github.com/repos/facebook/react/labels/React%20Flare",
      "name": "React Flare",
      "color": "63f2ff",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 23,
  "created_at": "2019-06-27T07:28:34Z",
  "updated_at": "2019-10-16T10:14:02Z",
  "closed_at": null,
  "author_association": "MEMBER",
  "body": "I think we need to rethink how focus works in React. React Flare is the perfection opportunity to allow us to do this, so here are some of my thoughts. None of these ideas wouldn't be possible if it weren't for the great ideas from @sebmarkbage, @devongovett and @necolas have had. Furthermore, the discussions in https://github.com/facebook/react/pull/16000, https://github.com/facebook/react/pull/15848 and https://github.com/facebook/react/pull/15849 got me thinking on a better system.\r\n\r\n## Focus is a mess on the DOM, so let's not use the DOM\r\n\r\nFocusing on the DOM is a mess today. We couple ideas around ideas around things like `tabIndex` and whether a specific browser treats something as focusable. This is very much a hard-coded disaster where no one really agrees on a good formula for success. Not to mention, that this just doesn't translate well for a declarative UI. How does one tab to a specific node that isn't focusable? How does one use keyboard arrows to navigate a table using keyboard arrows?\r\n\r\nThen there's implementation. Without relying on an attribute on an element or a `ref`, it's very hard to say: \"Hey look, let's focus to this node, given this criteria\". Not to mention the performance overhead of doing this: querying or \"collecting\" focusable elements is an expensive O(n) task, which doesn't scale for large applications well. I noticed that wrapping the an internal large app with `<FocusScope>` and then collecting all focusable nodes took over 850ms on Android using Chrome. Querying the DOM nodes took even longer.\r\n\r\nLastly, we can't use the DOM with React Native and the story for handling focus with React Flare is important. If we instead had a React system for handling focus, then both the web and RN would be consistent and performant.\r\n\r\n## Accessible components\r\n\r\nWe already have the `<Focus>` and `<FocusScope>` event components. We could extend on React Flare and introduce a way of layering accessibility logic on to host components. In this I introduce a new API called `createAccessibleComponent`, but really it could be anything â€“ ignore the naming! This is purely hypothetical discussion for now.\r\n\r\n```jsx\r\n// input is not focusable\r\n<FocusScope>\r\n  <input type=\"text\" placeholder=\"Enter your username\" /> \r\n</FocusScope>\r\n\r\nconst FocusableInput = ReactDOM.createAccessibleComponent((props, focusable) => {\r\n  return <input tabIndex={focusable ? 0 : -1} {...props} />;\r\n});\r\n\r\n// now it's focusable\r\n<FocusScope>\r\n  <FocusableInput\r\n    type=\"text\"\r\n    placeholder=\"Enter your username\"\r\n    focusable={true}\r\n  />\r\n</FocusScope>\r\n```\r\n\r\nIf you don't use a `FocusScope`, then the normal DOM behaviour will continue to work as expected. `FocusScope` will only care about these new types of accessible component.\r\n\r\n## The focus manager should be encapsulated and relative to `FocusScope`\r\n\r\nIn order for focus management to be powerful, it needs to be baked into React. Event responders like `FocusScope` can let the manager know what scope it should be interacting with given a particular `<Focus>` that focuses occur in. `FocusScope` will also fully override the browser tabbing behaviour (like it does now) to ensure tabbing works as expected:\r\n\r\n```jsx\r\nimport { focusManager } from 'react-events/focus';\r\n\r\nfocusManager.getFocusedNode();\r\nfocusManager.getFocusedId();\r\nfocusManager.focusFirst(isRTL?: boolean = false);\r\nfocusManager.focusLast(isRTL?: boolean = false);\r\nfocusManager.focusPrevious(fromId?: string, isRTL?: boolean = false);\r\nfocusManager.focusNext(fromId?: string, isRTL?: boolean = false, );\r\nfocusManager.focusById(id: string);\r\n\r\nconst FocusableDiv = ReactDOM.createAccessibleComponent((props, focusable) => {\r\n  return <div tabIndex={focusable ? 0 : -1} {...props} />;\r\n});\r\n\r\n<FocusScope onMount={() => focusManager.focusFirst()}>\r\n  <FocusableDiv focusable={true} />\r\n  <FocusableDiv focusable={true} />\r\n  <div tabIndex={0}>You can't focus this</div>\r\n</FocusScope>\r\n```\r\n\r\nFocusing by `focusId` will propagate until an `focusId` is found. So this would matter for cases such:\r\n\r\n```jsx\r\nconst FocusableDiv = ReactDOM.createAccessibleComponent((props, focusable, focusId) => {\r\n  return <div tabIndex={focusable ? 0 : -1} {...props} />;\r\n});\r\n\r\n<FocusScope>\r\n  <FocusableDiv focusable={true} focusId=\"focus-me\" />\r\n  <FocusScope>\r\n    <FocusableDiv focusable={true} focusId=\"focus-me\" />\r\n  </FocusScope>\r\n</FocusScope>\r\n```\r\n\r\nIf `focusManager.focusById('focus-me);` was used on the inner `FocusScope`, it would focus the inner button. If used on the outer `FocusScope`, it would focus the outer button. If the outer `FocusScope` didn't have an id that matched, then it would propagate the lookup to the inner `FocusScope`.\r\n\r\nDoing this, it makes it possible to apply keyboard navigation:\r\n\r\n```jsx\r\nfunction handleKeyPress(key) {\r\n  if (isValidArrowKey(key)) {\r\n    const currentId = focusManager.getFocusedId();\r\n    const nextId = findNextId(currentId, key);\r\n    focusManager.focusById(nextId);\r\n  }\r\n}\r\n<FocusScope onKeyPress={handleKeyPress}>\r\n  <FocousableCell focusable={true} focusId=\"AA\" />\r\n  <FocousableCell focusable={true} focusId=\"AB\" />\r\n  <FocousableCell focusable={true} focusId=\"AC\" />\r\n  <FocousableCell focusable={true} focusId=\"BA\" />\r\n  <FocousableCell focusable={true} focusId=\"BB\" />\r\n  <FocousableCell focusable={true} focusId=\"BC\" />\r\n  <FocousableCell focusable={true} focusId=\"CA\" />\r\n  <FocousableCell focusable={true} focusId=\"CB\" />\r\n  <FocousableCell focusable={true} focusId=\"CC\" />\r\n</FocusScope>\r\n```\r\n\r\nFurthermore, `<FocusScope>`s can also have `focusId`s that allows you to move focus to a specific scope. That particular event component can then act upon receiving focus `<FocusScope onFocus={...}>`.\r\n\r\n## It can simplify `<Focus>`\r\n\r\n```jsx\r\n<Focus onFocus={...}>\r\n  <div>\r\n    <FocusableDiv focusable={true} />\r\n  </div>\r\n</Focus>\r\n```\r\n\r\nBefore, focus would only be of the direct child of the `<Focus>` component. This made it somewhat problematic when you wanted to find the focusable element that was not a direct child. Focus no longer needs to be coupled with \"bubbling up\" through the DOM, but rather it bubbles from accessible component to event components. So doing this, will still result in the nearest focusable child being passed to the `Focus`:\r\n\r\n```jsx\r\n<Focus onFocus={...}>\r\n  <div>\r\n    <FocusableDiv focusable={true}>\r\n      <FocusableDiv focusable={true} />\r\n    </FocusableDiv>\r\n  </div>\r\n</Focus>\r\n```\r\n\r\n## This can be fast too\r\n\r\nIn terms of performance, we can actually fast-path how this all works because we're no longer using the DOM, but event components within the Flare event system. We'd have optimized data collections that ensure that the least possible time is taken traversing focusable elements by leveraging a separate internal data structure that is separate from the Fiber and DOM structures. The cost is that this will take additional memory and time to construct when a focus scope gets mounted/unmounted. Given this shouldn't be a rapid event, it's worth the trade-off.\r\n\r\nAlso, given we're not wrapping `FocusScope` with a context provider (as mentioned in the FocusManager PR), which should get improved performance from not needing to do context lookups and traversals.\r\n\r\n## `Focus` and `FocusScope`, `focusManager`\r\n\r\nGiven that they now share underlying implementation details, they all should come from the same module. So going forward, it makes sense to import them all form `react-events/focus`.\r\n\r\nThe nice benefit from this is that this actually fixes a bunch of issues with the current implementation, where we can't use `FocusScope` as a hooked event component. With the changes outlined in this issue, it should allow for them to be used via the `useEvent` hook.\r\n\r\n## We can build in great dev tooling around the focus system\r\n\r\nWe can build in great support for debugging in React Dev Tools when working with focus and \r\nthis will help improve accessibility within apps that use `<Focus>`, `<FocusScope>` and `focusManager`. Plus it would support any future APIs that add accessibility benefits to components.",
  "closed_by": null
}
