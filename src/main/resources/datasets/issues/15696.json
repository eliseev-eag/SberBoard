{
  "url": "https://api.github.com/repos/facebook/react/issues/15696",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15696/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15696/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15696/events",
  "html_url": "https://github.com/facebook/react/issues/15696",
  "id": 446674570,
  "node_id": "MDU6SXNzdWU0NDY2NzQ1NzA=",
  "number": 15696,
  "title": "Provide a way to access DOM nodes of React elements during corresponding components construction phase on a DOM Hydration",
  "user": {
    "login": "DmytroYeremieiev",
    "id": 19588441,
    "node_id": "MDQ6VXNlcjE5NTg4NDQx",
    "avatar_url": "https://avatars2.githubusercontent.com/u/19588441?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/DmytroYeremieiev",
    "html_url": "https://github.com/DmytroYeremieiev",
    "followers_url": "https://api.github.com/users/DmytroYeremieiev/followers",
    "following_url": "https://api.github.com/users/DmytroYeremieiev/following{/other_user}",
    "gists_url": "https://api.github.com/users/DmytroYeremieiev/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/DmytroYeremieiev/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/DmytroYeremieiev/subscriptions",
    "organizations_url": "https://api.github.com/users/DmytroYeremieiev/orgs",
    "repos_url": "https://api.github.com/users/DmytroYeremieiev/repos",
    "events_url": "https://api.github.com/users/DmytroYeremieiev/events{/privacy}",
    "received_events_url": "https://api.github.com/users/DmytroYeremieiev/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 0,
  "created_at": "2019-05-21T15:08:23Z",
  "updated_at": "2019-05-21T15:13:48Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "### *Feature request*\r\n\r\nIn order to explain the urge to have this feature I will try to put it into a context of a real-world scenario: \r\nSPA + SSR web application based on `Next.js` framework which partially consists of static content blocks from a remote cms server. \r\n\r\nMain page:\r\n```\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport CMSContent from '../components/CMSContent';\r\n\r\nclass IndexPage extends React.Component {\r\n  state = {__html: \"\"}\r\n  static async getInitialProps() {\r\n    const res = await axios.get('.......')\r\n    const content1 = {\r\n      __html: res.data\r\n    }\r\n    let props = {\r\n      content1: content1,\r\n      content2: content1,\r\n      content3: content1\r\n    }\r\n    content1.toJSON = ()=>{\r\n      return {__html: \"\"}\r\n    }\r\n    return props\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <CMSContent html={this.props.content1}></CMSContent>\r\n      {/* dynamic part */}\r\n      <CMSContent html={this.props.content2}></CMSContent>\r\n      {/* dynamic part */}\r\n      <CMSContent html={this.props.content3}></CMSContent>\r\n    </div>;\r\n  }\r\n}\r\n\r\nexport default IndexPage;\r\n```\r\nStatic content wrapper:\r\n```\r\nimport React from 'react';\r\nclass CMSContent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {html: props.html};\r\n  }\r\n\r\n  render() {\r\n    return <div dangerouslySetInnerHTML={this.state.html} suppressHydrationWarning={true}></div>;\r\n  }\r\n}\r\n\r\nexport default CMSContent;\r\n```\r\n\r\nThe SSR part:\r\n-  retrieves the static HTML content from a CMS web server in `getInitialProps` and render it into a final page before serving to the client using React's custom ’CMSContent' class component via passing the raw HTML content to  `dangerouslySetInnerHTML` attr. \r\n- since the content is purely static HTML and is not subject to change in the future, we address the overhead of cms data into DOM serialization, by overriding the default `toJSON` serializer and return an empty string for cms content during serialization. \r\n\r\nAfter the whole page was rendered on a server including all cms content blocks and shipped to the client the problem arises,\r\nIn order to successfully hydrate the real DOM on a client, exactly the same Virtual DOM has to be built. Since nothing was serialized to the document, the Virtual DOM within cms blocks basically contains nothing and therefore differ from the real DOM, \r\nand so `React` reacts on this with a reasonable warning `Warning: Prop `dangerouslySetInnerHTML` did not match. Server: ...`, BUT without wiping the cms content from the real DOM. \r\n \r\nOptions:\r\n1.  Suppress the warning with a `suppressHydrationWarning={true}` and hope for the best what in future react updates such mismatches won’t lead to wiping out the real DOM\r\n2. Before building  a Virtual DOM tree on a client in this scenario, during 'CMSContent'  components construction phase, instead of picking an empty string as a cms content from the serialized object try to pick the existing server-side rendered content from the real DOM `this.domRef.current.innerHTML` which these 'CMSContent' components are supposed to represent:\r\n\r\n```\r\nclass CMSContent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {html: this.domRef.current.innerHTML || props.html};\r\n  }\r\n\r\n  render() {\r\n    return <div dangerouslySetInnerHTML={this.state.html} suppressHydrationWarning={true}></div>;\r\n  }\r\n}\r\n```\r\n\r\n\r\n\r\nAnd here's the limitation of `React` regarding the second option,  \r\nI can understand why during `ReactDOM.render()` all components can’t have a real DOM reference until they are actually mounted, but during `ReactDOM. hydrate()`,  it’s a completely different story. \r\nIt would be very nice to have a way to access DOM nodes of respective React elements during their construction phase upon a DOM **Hydration**. ",
  "closed_by": null
}
