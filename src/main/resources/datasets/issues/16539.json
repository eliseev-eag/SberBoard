{
  "url": "https://api.github.com/repos/facebook/react/issues/16539",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16539/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16539/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16539/events",
  "html_url": "https://github.com/facebook/react/issues/16539",
  "id": 483881468,
  "node_id": "MDU6SXNzdWU0ODM4ODE0Njg=",
  "number": 16539,
  "title": "Getting error when import component  to write unit test cases.",
  "user": {
    "login": "vineet-agrawal96",
    "id": 16913925,
    "node_id": "MDQ6VXNlcjE2OTEzOTI1",
    "avatar_url": "https://avatars2.githubusercontent.com/u/16913925?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vineet-agrawal96",
    "html_url": "https://github.com/vineet-agrawal96",
    "followers_url": "https://api.github.com/users/vineet-agrawal96/followers",
    "following_url": "https://api.github.com/users/vineet-agrawal96/following{/other_user}",
    "gists_url": "https://api.github.com/users/vineet-agrawal96/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vineet-agrawal96/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vineet-agrawal96/subscriptions",
    "organizations_url": "https://api.github.com/users/vineet-agrawal96/orgs",
    "repos_url": "https://api.github.com/users/vineet-agrawal96/repos",
    "events_url": "https://api.github.com/users/vineet-agrawal96/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vineet-agrawal96/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-08-22T09:39:30Z",
  "updated_at": "2019-08-23T08:26:19Z",
  "closed_at": "2019-08-23T08:26:19Z",
  "author_association": "NONE",
  "body": "I'm trying to write unit test case using jest and enzyme. but when i'm importing a component then i'm facing a issue. I'm writing test case for following component:- \r\n\r\n```jsx\r\nimport React, { PureComponent } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n   List,\r\n   ListItem,\r\n   ListItemSecondaryAction,\r\n   ListItemText,\r\n   Typography\r\n} from \"@material-ui/core\"\r\n\r\nimport DeleteIcon from \"@material-ui/icons/Delete\"\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\"\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport { showSnackbar } from \"pages/App/AppActions\"\r\nimport RenderTicketForm from \"../TicketForm\"\r\nimport ConfirmationAlertDialog from \"../../common/ConfirmationAlertDialog\"\r\nimport client from \"config/apollo\"\r\nimport {\r\n   GET_TICKET_TYPE,\r\n   DELETE_TICKET_TEMPLATE\r\n} from \"../../TicketTypesGraphQL\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport { filter } from \"lodash\"\r\nimport { customStyles } from \"../../common/Styles\"\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst initialValues = {\r\n   ticket_type_desc: \"\",\r\n   ticket_template: \"\",\r\n   flag_default_print_notes: false,\r\n   flag_is_print_content: false,\r\n   flag_subscriber_report: false\r\n}\r\n\r\nconst propTypes = {\r\n   ispId: PropTypes.number.isRequired,\r\n   classes: PropTypes.object.isRequired,\r\n   defaultSelectedTemplate: PropTypes.object.isRequired,\r\n   showSnackbar: PropTypes.func\r\n}\r\n\r\n class Templates extends PureComponent {\r\n   state = {\r\n      selectedTicketId: this.props.defaultTemplateId,\r\n      selectedTicketTemplate: this.props.defaultSelectedTemplate,\r\n      list: this.props.list,\r\n      isOpen: false,\r\n      selectItemIdToDelete: 0\r\n   }\r\n\r\n   addNewTemplate = () => {\r\n      this.setState({\r\n         selectedTicketId: 0,\r\n         selectedTicketTemplate: initialValues\r\n      })\r\n   }\r\n\r\n   handleUpdateTemplate = (item, list) => {\r\n      this.setState({ list })\r\n      this.onSelectTemplate(item)\r\n   }\r\n\r\n   onSelectTemplate = item => {\r\n      const {\r\n         flag_default_print_notes,\r\n         flag_is_print_content,\r\n         ticket_template,\r\n         ticket_type_desc,\r\n         ticket_type_id,\r\n         flag_subscriber_report\r\n      } = item\r\n      this.setState({\r\n         selectedTicketId: ticket_type_id,\r\n         selectedTicketTemplate: {\r\n            flag_default_print_notes,\r\n            flag_is_print_content,\r\n            ticket_template,\r\n            ticket_type_desc,\r\n            flag_subscriber_report\r\n         }\r\n      })\r\n   }\r\n\r\n   handleDeleteTicket = item => {\r\n      const { isOpen } = this.state\r\n      this.setState({\r\n         isOpen: !isOpen,\r\n         selectItemIdToDelete: item.ticket_type_id\r\n      })\r\n   }\r\n\r\n   renderListItem = (item, index) => {\r\n      const { classes } = this.props\r\n      const { selectedTicketId } = this.state\r\n      const isSelected =\r\n         selectedTicketId === item.ticket_type_id\r\n            ? \" listItems activecls\"\r\n            : \"listItems\"\r\n      return (\r\n         <ListItem\r\n            key={item + index}\r\n            dense\r\n            button\r\n            className={isSelected}\r\n            onClick={e => this.onSelectTemplate(item, index)}\r\n         >\r\n            <ListItemText primary={`${item.ticket_type_desc}`} className={classes.textEllipsis} />\r\n            <ListItemSecondaryAction className={classes.listAction}>\r\n               <DeleteIcon\r\n                  className={\"material-icons mr-3 \" + classes.delIcon}\r\n                  onClick={() => this.handleDeleteTicket(item)}\r\n               />\r\n            </ListItemSecondaryAction>\r\n         </ListItem>\r\n      )\r\n   }\r\n\r\n   renderAddCircleIcon = () => {\r\n      const { classes } = this.props\r\n      // console.log(\"renderAddCircleIcon\", this.state)\r\n      const { selectedTicketId } = this.state\r\n      const isDisable = selectedTicketId === 0 ? true : false\r\n      return (\r\n         <div className={classes.bottomBorder + \" w-100\"}>\r\n            <IconButton\r\n               onClick={this.addNewTemplate}\r\n               className={classes.addTemplate + \" d-flex justify-content-start\"}\r\n               disabled={isDisable}\r\n            >\r\n               <AddCircleIcon className={classes.addIcon + \" mr-2\"} />\r\n               <Typography variant=\"h6\">Add new template</Typography>\r\n            </IconButton>\r\n         </div>\r\n      )\r\n   }\r\n\r\n   handleClickOnYes = async () => {\r\n      const { selectItemIdToDelete } = this.state\r\n      const { ispId, showSnackbar } = this.props\r\n      try {\r\n         const result = await client.mutate({\r\n            mutation: DELETE_TICKET_TEMPLATE,\r\n            variables: { id: selectItemIdToDelete }\r\n         })\r\n\r\n         if (result.data.deleteTicketType) {\r\n            let { listOfTemplate } = await client.readQuery({\r\n               query: GET_TICKET_TYPE,\r\n               variables: { isp_id: ispId }\r\n            })\r\n\r\n            const templateList = filter(\r\n               listOfTemplate.ticket_types,\r\n               (item, index) => {\r\n                  if (item.ticket_type_id !== selectItemIdToDelete) {\r\n                     return item\r\n                  }\r\n               }\r\n            )\r\n\r\n            await client.writeQuery({\r\n               query: GET_TICKET_TYPE,\r\n               data: {\r\n                  listOfTemplate: { ticket_types: templateList, __typename: \"Isps\" }\r\n               },\r\n               variables: { isp_id: ispId }\r\n            })\r\n\r\n            this.setState({\r\n               list: { ticket_types: templateList },\r\n               selectedTicketId: templateList[0].ticket_type_id,\r\n               selectedTicketTemplate: templateList[0]\r\n            })\r\n            showSnackbar(\"Template removed successfully\", \"success\")\r\n         }\r\n      } catch (error) {\r\n         showSnackbar(error.message, \"error\")\r\n      }\r\n   }\r\n\r\n   renderAlertDialog = () => {\r\n      const { isOpen } = this.state\r\n      if (isOpen) {\r\n         return (\r\n            <ConfirmationAlertDialog\r\n               open={isOpen}\r\n               handleClose={this.handleDeleteTicket}\r\n               handleClickOnYes={this.handleClickOnYes}\r\n               dialogeTitle={\"Are you sure?\"}\r\n               okBtnLabel={\"Delete\"}\r\n               cancelBtnLabel={\"Cancel\"}\r\n            />\r\n         )\r\n      }\r\n      return null\r\n   }\r\n\r\n   render() {\r\n      const { classes } = this.props\r\n      const { selectedTicketTemplate, selectedTicketId, list } = this.state\r\n      const lists =\r\n         list && list.ticket_types && list.ticket_types.map(this.renderListItem)\r\n      return (\r\n         <>\r\n            <div className=\" container-fluid customContainerFuild ticketSection button_bottom\" >\r\n               <Grid spacing={4} container className={\"tray-body \" + classes.trayPadding}>\r\n                  <Grid item lg={3} className={\"sectionContent tabSection \" + classes.templatePaddingLeft}>\r\n                     <Grid container className=\"templateSection\">\r\n                        <Grid item lg={12} className={classes.templateBottomBorder + \" pb-0\"}>\r\n                           <Typography className={classes.templateTitle + \" pl-4\"} variant=\"h6\">Templates</Typography>\r\n                        </Grid>\r\n                        {this.renderAddCircleIcon()}\r\n                        <div\r\n                           className={classes.root}\r\n                           style={{ maxHeight: \"calc(100vh - 155px)\" }}\r\n                        >\r\n                           <List className=\"template-list\">{lists}</List>\r\n                        </div>\r\n                     </Grid>\r\n                  </Grid>\r\n                  <Grid item lg={9} className=\"sectionContent clientInvoiceSection\"\r\n                     id=\"editorSection\"\r\n                     style={{ height: \"100vh\", borderColor: \"#ddd\" }}>\r\n                        <Grid spacing={2} container className=\"row emailSection\" style={{ margin: \"0\" }}>\r\n                           <Grid item lg={12} className=\"headerTitle px-0\">\r\n                              <Typography className={classes.ticketTypes} variant=\"h6\">Ticket Types</Typography>\r\n                           </Grid>\r\n                        </Grid>\r\n                        <RenderTicketForm\r\n                        selectedTicketTemplate={selectedTicketTemplate}\r\n                        selectedTicketId={selectedTicketId}\r\n                        updatedSelectedItem={this.handleUpdateTemplate}\r\n                     />\r\n                     \r\n                  </Grid>\r\n               </Grid>\r\n            </div>\r\n            {this.renderAlertDialog()}\r\n         </>\r\n      )\r\n   }\r\n}\r\n\r\nTemplates.propTypes = propTypes\r\n\r\nconst mapStateToProps = state => {\r\n   return {\r\n      ispId: state.ispId\r\n   }\r\n}\r\n\r\nexport default connect(\r\n   mapStateToProps,\r\n   { showSnackbar }\r\n)(withStyles(customStyles)(Templates))\r\n```\r\n\r\nmy test case is \r\n```jsx\r\nimport React from 'react';\r\nimport { shallow, configure } from 'enzyme';\r\nimport  { Templates }  from \"./index\"\r\nimport Adapter from \"enzyme-adapter-react-16\";\r\n\r\nconfigure({ adapter: new Adapter() });\r\n\r\n\r\ndescribe('Templates', () => {\r\n    const templates = shallow(<Templates />)\r\n  it('should render correctly in \"debug\" mode', () => {\r\n      console.log(\"test---------->\")\r\n  });\r\n});\r\n```\r\n\r\nAnd error is:\r\n\r\n[http://prntscr.com/ow04ym](url)",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
