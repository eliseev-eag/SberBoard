{
  "url": "https://api.github.com/repos/facebook/react/issues/15579",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15579/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15579/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15579/events",
  "html_url": "https://github.com/facebook/react/issues/15579",
  "id": 441113625,
  "node_id": "MDU6SXNzdWU0NDExMTM2MjU=",
  "number": 15579,
  "title": "Portal not correctly reconciled; whole tree recreated upon any state change",
  "user": {
    "login": "shirakaba",
    "id": 14055146,
    "node_id": "MDQ6VXNlcjE0MDU1MTQ2",
    "avatar_url": "https://avatars0.githubusercontent.com/u/14055146?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/shirakaba",
    "html_url": "https://github.com/shirakaba",
    "followers_url": "https://api.github.com/users/shirakaba/followers",
    "following_url": "https://api.github.com/users/shirakaba/following{/other_user}",
    "gists_url": "https://api.github.com/users/shirakaba/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/shirakaba/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/shirakaba/subscriptions",
    "organizations_url": "https://api.github.com/users/shirakaba/orgs",
    "repos_url": "https://api.github.com/users/shirakaba/repos",
    "events_url": "https://api.github.com/users/shirakaba/events{/privacy}",
    "received_events_url": "https://api.github.com/users/shirakaba/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-05-07T08:47:53Z",
  "updated_at": "2019-05-08T08:25:27Z",
  "closed_at": "2019-05-08T08:25:27Z",
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nNote: this concerns the custom React renderer that I am building – [React NativeScript](https://github.com/shirakaba/react-nativescript) – thus it's hard to pinpoint whether this is a reconciliation problem or a problem with my Host Config. It's also relatively difficult to provide a runnable example.\r\n\r\nI have a class component that renders a portal: `PortalToStatefulPage`. It renders a `Button` that, when clicked, will call `setState` to restyle that very `Button` by nudging it along by 10 pixels to the right. This state change only affects the `Button`.\r\n\r\nUpon pressing the Button, though, the whole class component's DOM tree is rebuilt (i.e. the Portal's whole DOM tree is unmounted and recreated anew, reflected by calls to `removeChild()` and `createInstance()` by the Host Config).\r\n\r\n**What is the expected behavior?**\r\n\r\n`removeChild()` and `createInstance()` should not be called by the Host Config at all. `PortalToStatefulPage`'s root `Page` component should be re-used as-is because no properties changed, and only the `Button` should be updated.\r\n\r\nIt looks to me like the reconciler is failing to recognise that this Portal has already been rendered before, and thus is failing to re-use it. I'm unsure how to go about testing this hypothesis, however.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThe best I can manage as a MWE. Note that:\r\n\r\n* `Frame` is like iOS's `UINavigationController`\r\n* `Page` is like iOS's `UIViewController`\r\n\r\n```tsx\r\nimport * as application from \"tns-core-modules/application\";\r\nimport * as React from \"react\";\r\nimport * as ReactNativeScript from \"react-nativescript/dist/index\";\r\nimport { Frame, Page } from \"react-nativescript/dist/client/ElementRegistry\";\r\nimport {\r\n    RCTButton, RCTContentView, RCTAbsoluteLayout, RCTStackLayout, RCTPage\r\n} from \"react-nativescript/dist/index\";\r\nimport { GestureEventData } from \"tns-core-modules/ui/gestures/gestures\";\r\nimport { EventData } from \"tns-core-modules/data/observable/observable\";\r\n\r\n\r\n/*\r\n * Start up the NativeScript application, specifying that it navigate to show\r\n * our StatefulPageGestureTest component. No need to examine this too closely.\r\n */\r\napplication.run({\r\n    create: () => {\r\n        const hostFrame = new Frame();\r\n\r\n        hostFrame.navigate({\r\n            create: () => {\r\n                const hostPageRef = React.createRef<Page>();\r\n                ReactNativeScript.render(\r\n                    (<StatefulPageGestureTest forwardedRef={hostPageRef} />),\r\n                    new ProxyViewContainer()\r\n                );\r\n                return hostPageRef.current;\r\n            }\r\n        });\r\n\r\n        return hostFrame;\r\n    }\r\n});\r\n\r\n\r\n/*\r\n * A hub page; navigation in NativeScript necessitates the use of Portals.\r\n * Pressing the button here will navigate to the problematic Portal.\r\n */\r\nclass StatefulPageGestureTest extends React.Component<\r\n    { forwardedRef: React.RefObject<Page> },\r\n    {}\r\n> {\r\n    private readonly yellowPageRef = React.createRef<Page>();\r\n\r\n    render(){\r\n        return (\r\n            <RCTPage ref={this.props.forwardedRef}>\r\n                <RCTStackLayout>\r\n                    <RCTButton\r\n                        text={\"Navigate to yellow page\"}\r\n                        onPress={(args: EventData) => {\r\n                            this.props.forwardedRef.current!.frame.navigate({\r\n                                create: () => this.yellowPageRef.current;\r\n                            });\r\n                        }}\r\n                    />\r\n                </RCTStackLayout>\r\n                \r\n                <PortalToStatefulPage yellowPageRef={this.yellowPageRef} />\r\n            </RCTPage>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * The problematic Portal. Upon pressing the Button here to prompt a state\r\n * change, the whole DOM tree that it renders will be reconstructed.\r\n */\r\nclass PortalToStatefulPage extends React.Component<\r\n    { yellowPageRef: React.RefObject<Page> },\r\n    { x: number }\r\n> {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            x: 0\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            ReactNativeScript.createPortal(\r\n                (\r\n                    <RCTPage ref={this.props.yellowPageRef} backgroundColor={\"yellow\"} >\r\n                        <RCTAbsoluteLayout>\r\n                            <RCTButton\r\n                                left={{ unit: \"px\", value: this.state.x }}\r\n                                onPress={(args: GestureEventData) => {\r\n                                    // Leads to whole portal being recreated\r\n                                    this.setState((prevState) => ({\r\n                                        x: prevState.x + 10,\r\n                                    }));\r\n                                }}\r\n                            />\r\n                        </RCTAbsoluteLayout>\r\n                    </RCTPage>\r\n                ),\r\n                this.props.yellowPageRef.current,\r\n                `PortalToStatefulPage-1`\r\n            )\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n**EDIT:** forgot that I should include my implementation for `ReactNativeScript.createPortal()`. It's just a copy of ReactDOM's implementation:\r\n\r\n```tsx\r\nimport * as ReactReconciler from 'react-reconciler';\r\nimport { Container } from \"./HostConfig\";\r\nimport { ReactPortal } from \"react\";\r\n\r\nconst hasSymbol = typeof Symbol === 'function' && Symbol.for;\r\n\r\nexport function createPortal(\r\n    children: ReactReconciler.ReactNodeList,\r\n    container: Container,\r\n    key: string|null = null,\r\n): ReactPortal {\r\n    return {\r\n        $$typeof: hasSymbol ? Symbol.for('react.portal') : 0xeaca,\r\n        key: key == null ? null : '' + key,\r\n        children,\r\n        containerInfo: container,\r\n        implementation: null,\r\n    };\r\n}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React: `16.8.5`\r\n* React Reconciler: `0.20.2`\r\n* OS: iOS\r\n\r\nHave only tested in this current version of React.\r\n\r\n**Apologies in advance**\r\n\r\nSorry if this is not much to go on. There is relatively little documentation about React's Host Config and React Reconciler out there, especially in regard to Portal reconciliation, so it's hard for me to pinpoint where exactly the fault lies. The fact that this is a custom renderer also introduces an extra complication. I'll be happy to follow up with any extra information needed, as my project is rather blocked on this.",
  "closed_by": {
    "login": "shirakaba",
    "id": 14055146,
    "node_id": "MDQ6VXNlcjE0MDU1MTQ2",
    "avatar_url": "https://avatars0.githubusercontent.com/u/14055146?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/shirakaba",
    "html_url": "https://github.com/shirakaba",
    "followers_url": "https://api.github.com/users/shirakaba/followers",
    "following_url": "https://api.github.com/users/shirakaba/following{/other_user}",
    "gists_url": "https://api.github.com/users/shirakaba/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/shirakaba/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/shirakaba/subscriptions",
    "organizations_url": "https://api.github.com/users/shirakaba/orgs",
    "repos_url": "https://api.github.com/users/shirakaba/repos",
    "events_url": "https://api.github.com/users/shirakaba/events{/privacy}",
    "received_events_url": "https://api.github.com/users/shirakaba/received_events",
    "type": "User",
    "site_admin": false
  }
}
