{
  "url": "https://api.github.com/repos/facebook/react/issues/9511",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9511/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9511/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9511/events",
  "html_url": "https://github.com/facebook/react/issues/9511",
  "id": 223928288,
  "node_id": "MDU6SXNzdWUyMjM5MjgyODg=",
  "number": 9511,
  "title": "_updateRenderedComponent Error When Rendered Child Components Repeatedly Throw",
  "user": {
    "login": "davezuko",
    "id": 6439050,
    "node_id": "MDQ6VXNlcjY0MzkwNTA=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/6439050?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davezuko",
    "html_url": "https://github.com/davezuko",
    "followers_url": "https://api.github.com/users/davezuko/followers",
    "following_url": "https://api.github.com/users/davezuko/following{/other_user}",
    "gists_url": "https://api.github.com/users/davezuko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davezuko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davezuko/subscriptions",
    "organizations_url": "https://api.github.com/users/davezuko/orgs",
    "repos_url": "https://api.github.com/users/davezuko/repos",
    "events_url": "https://api.github.com/users/davezuko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davezuko/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2017-04-24T19:37:05Z",
  "updated_at": "2017-05-19T12:47:53Z",
  "closed_at": "2017-05-19T12:47:53Z",
  "author_association": "NONE",
  "body": "Apologies in advance if this has already been reported. I did my best to thoroughly search through existing issues before posting this, but could not find something this specific. I'd be happy to move/close this as needed. **This is (hopefully) more nuanced than the issue about \"my render method threw and React blew up, why?\" that I mostly encountered.**\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**Minimal Test Cases**\r\n* [`Uncaught TypeError: Cannot read property '_currentElement' of null`](http://www.react.run/HyBqdhjAl/6)\r\n* [`Uncaught TypeError: Cannot read property 'getNativeNode' of null`](http://www.react.run/HyBqdhjAl/7)\r\n\r\n**What is the current behavior?**\r\n\r\nIf a child component throws in its `render` method, and attempts to be rendered more than once, React throws an uncaught error inside of its internal `_updateRenderedComponent` method. Depending on the context, this error is either:\r\n\r\n1) `Uncaught TypeError: Cannot read property 'getNativeNode' of null`\r\n2) `Uncaught TypeError: Cannot read property '_currentElement' of null`\r\n\r\nLet's say we have a problematic component `A`. When `A` renders it throws a runtime error.\r\n\r\n```js\r\nclass A extends React.Component {\r\n  render () {\r\n    throw new Error('whoops')\r\n  }\r\n}\r\n```\r\n\r\n1) Some parent component renders `A`. During the first render, we see the error that `A` threw while rendering. This is as expected and is a userland error.\r\n2) If we attempt to render the parent again, and therefore again render `A`, we get a different exception. This is where we see `Uncaught TypeError: Cannot read property 'getNativeNode' of null` from React (or the one referring to `_currentElement`).\r\n\r\n_The difference between exceptions #1 (`getNativeNode`) and #2 (`_currentElement`) is that #1 happens when component `A` is the same between each render; #2 happens when component `A` is swapped in the second render with another component that _also_ happens to throw while rendering. The latter is more likely as we move from a loaded -> error handler view, where the error view may unfortunately also throw._\r\n\r\nWhy would you render a broken twice? Well, consider something as simple as this:\r\n\r\n```js\r\nclass AppLoaded extends React.Component {\r\n  render () {\r\n    throw new Error('I throw!')\r\n  }    \r\n}\r\n\r\n// Supposed to gracefully render an error, but it happens to throw.\r\nclass GracefulError extends React.Component {\r\n  render () {\r\n    throw new Error('Dang, I also throw :(')\r\n  }    \r\n}\r\n\r\nclass Main extends React.Component {\r\n  constructor(props, ctx) {\r\n    super(props, ctx)\r\n    this.state = {\r\n      loaded: false,\r\n      error: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount () {\r\n    // Do some async work...\r\n    // NOTE: This living inside of a promise is not vital to reproduction, but\r\n    // it is what originally caused me to go down the path of discovering\r\n    // the issue. See minimal test cases for examples w/o promises.\r\n    return Promise.resolve() // do some async work\r\n      .then(() => {\r\n        this.setState({ loaded: true })\r\n      })\r\n      // Yes, this really should not be in `catch`, but there are valid scenarios\r\n      // for code like this to exist. This is just to demonstrate the issue.\r\n      // See explanations below.\r\n      .catch((err) => {\r\n        this.setState({ error: true })\r\n      })\r\n  }\r\n\r\n  render () {\r\n    if (this.state.error) return <GracefulError />\r\n    if (this.state.loaded) return <AppLoaded />\r\n    return <h1>Loading</h1>\r\n  }\r\n}\r\n```\r\n\r\nThis is what led to the discovery of this bug. The promise handling here is technically incorrect, since what we really meant was to use `.then(onSuccess, onFailure)` so that we didn't implicitly catch synchronous render errors caused by the `setState` call in the `onSuccess` callback. However, I do believe there are valid scenarios where this occurs, such as when manually handling a render error, but where the recovering component rendered in its place also (unfortunately) throws and consequently leads to this untraceable error.\r\n\r\n**What is the expected behavior?**\r\n\r\nReact should not blow up with this internal/untraceable error on the second render. I'm not even sure if this is possible, but at a minimum I'd like to better understand why this occurs.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n**Browser:** Google Chrome Version 58.0.3029.81 (64-bit)\r\n\r\n**React:**\r\n* v15.1.0\r\n* v15.3.2\r\n* v15.5.0\r\n\r\nThose are just the versions I've tested, there's no evidence that it works in any versions in between those posted above. No, this has not worked in a previous version to my knowledge.\r\n\r\nThank you in advance for your help.",
  "closed_by": {
    "login": "davezuko",
    "id": 6439050,
    "node_id": "MDQ6VXNlcjY0MzkwNTA=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/6439050?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/davezuko",
    "html_url": "https://github.com/davezuko",
    "followers_url": "https://api.github.com/users/davezuko/followers",
    "following_url": "https://api.github.com/users/davezuko/following{/other_user}",
    "gists_url": "https://api.github.com/users/davezuko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/davezuko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/davezuko/subscriptions",
    "organizations_url": "https://api.github.com/users/davezuko/orgs",
    "repos_url": "https://api.github.com/users/davezuko/repos",
    "events_url": "https://api.github.com/users/davezuko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/davezuko/received_events",
    "type": "User",
    "site_admin": false
  }
}
