{
  "url": "https://api.github.com/repos/facebook/react/issues/16007",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16007/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16007/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16007/events",
  "html_url": "https://github.com/facebook/react/pull/16007",
  "id": 461318074,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjkyMjcwMzc0",
  "number": 16007,
  "title": "Add tail=\"collapsed\" option to SuspenseList",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-06-27T05:15:11Z",
  "updated_at": "2019-07-02T02:56:35Z",
  "closed_at": "2019-07-02T02:56:35Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/16007",
    "html_url": "https://github.com/facebook/react/pull/16007",
    "diff_url": "https://github.com/facebook/react/pull/16007.diff",
    "patch_url": "https://github.com/facebook/react/pull/16007.patch"
  },
  "body": "Builds on top of #16005.\r\n\r\nThis add an option to SuspenseList which ensures that we avoid inserting any new rows at the tail of the list past some point.\r\n\r\nThe first option is \"collapsed\" which means that there is only one row visible at the end of the list. I plan on adding a \"hidden\" option which ensures that zero visible rows are at the end.\r\n\r\nNote that the tail in terms of unfolding row-by-row is defined as any insertions at the bottom or any rows that updated to become suspended or were already inserted from previous commits. This option doesn't actually remove or hide those. However, this is a rare edge cases. Typically you're expected to clear the list for these cases.\r\n\r\nThe use case here is for streaming rendering of items. This lets you provide more rows to React than you have available yet. The main purpose of this is for server rendering where you can't update to add more. However, it also is useful so that React can prerender later rows while blocked on previous rows. This PR doesn't actually do that yet tho.\r\n\r\nThis option also allows to render CPU bound work, one item at a time without showing all the fallbacks. Thanks to the tail expiration time.\r\n\r\n## Collapsing to the last row\r\n\r\nThe `tail=\"collapsed\"` option uses the first new row for showing the fallback state. That's fairly efficient because we've rendered it when we tried the last row.\r\n\r\nIf you want to instead show the last row, you have to use a nested suspense list and the \"hidden\" option of the inner one:\r\n\r\n```\r\n<SuspenseList revealOrder=\"forward\">\r\n  <SuspenseList revealOrder=\"forward\" tail=\"hidden\">\r\n    ...\r\n  </SuspenseList>\r\n  <Tail />\r\n</SuspenseList>\r\n```\r\n\r\nTail in this case can be a Suspense boundary that unsuspends when we're not expected to get more items added to the list.\r\n\r\n```\r\nfunction Blocker({suspendOn}) {\r\n  if (!suspendOn.isResolved()) throw something();\r\n  return null;\r\n}\r\nfunction Tail() {\r\n  return <Suspense fallback={<Shimmer />}>\r\n    <Blocker suspendOn={endOfTheList} />\r\n  </Suspend>;\r\n}\r\n```\r\n\r\nThis technique ensures that if `endOfTheList` resolves on the server, the SSR streaming can hide the tail shimmer. No need for client rerenders. Placing it in an outer SuspenseList also ensures that once `endOfTheList` is resolved we don't hide the Shimmer before the rows in the list are fully loaded. Otherwise, the shimmer would hide first and then we'd wait for the inner rows but they're hidden.\r\n\r\nThis is a bit unfortunate since I think this is a pretty common use case for visualizing a tail load differently from suspended existing boundaries.\r\n\r\nIn theory we could add an option to collapse into the last row but it gets tricky. Because after the first commit, that row would now be mounted and now it's not a new insertion anymore. That complicates the semantics a bit. The collapsed tail would have to be something like everything after the last committed row that isn't the last one.\r\n\r\nThis approach doesn’t actually work:\r\n\r\n```\r\n<SuspenseList>\r\n  {rows}\r\n  <Tail />\r\n</SuspenseList>\r\n```\r\n\r\nBecause that’s actually just two rows since the fragment in that case is treated as a single row.\r\n\r\nI feel like it's just clearer with two lists. That also makes it clearer what a \"row\" means. E.g. if your tail has multiple rows, it kind of just works.\r\n\r\nI also suspect that at some point SuspenseList will accept a custom streaming data type and in that case it might be easier to think of the inner list as one stream and the outer as another.\r\n\r\nAlthough a counter point is that virtualization might make this api difficult/impossible to use.\r\n\r\nA possible option would be to add an explicit tail component:\r\n\r\n```\r\n<SuspenseList tailMarker={<Tail />}>\r\n  ...\r\n</SuspenseList>\r\n```\r\n\r\nHowever, that would require two fibers to be stored similar to how Suspense inserts extra fibers.",
  "closed_by": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  }
}
