{
  "url": "https://api.github.com/repos/facebook/react/issues/3261",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/3261/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/3261/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/3261/events",
  "html_url": "https://github.com/facebook/react/issues/3261",
  "id": 58887881,
  "node_id": "MDU6SXNzdWU1ODg4Nzg4MQ==",
  "number": 3261,
  "title": "hook between componentWillMount and render even at first render",
  "user": {
    "login": "codeuniquely",
    "id": 1037719,
    "node_id": "MDQ6VXNlcjEwMzc3MTk=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/1037719?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/codeuniquely",
    "html_url": "https://github.com/codeuniquely",
    "followers_url": "https://api.github.com/users/codeuniquely/followers",
    "following_url": "https://api.github.com/users/codeuniquely/following{/other_user}",
    "gists_url": "https://api.github.com/users/codeuniquely/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/codeuniquely/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/codeuniquely/subscriptions",
    "organizations_url": "https://api.github.com/users/codeuniquely/orgs",
    "repos_url": "https://api.github.com/users/codeuniquely/repos",
    "events_url": "https://api.github.com/users/codeuniquely/events{/privacy}",
    "received_events_url": "https://api.github.com/users/codeuniquely/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2015-02-25T11:31:46Z",
  "updated_at": "2015-02-27T05:28:07Z",
  "closed_at": "2015-02-27T01:17:28Z",
  "author_association": "NONE",
  "body": "Would it be feasible to provide a function that allows a developer to hook into the component life-cycle after  componentWillMount() and before render().  This would need to always be possible even during the initial render.\n\nmaybe something like this: \n\n```\n_renderValidatedComponentWithoutOwnerOrContext: function() {\n  var inst = this._instance;\n  if (inst.willRender) {    // Check if hook is defined\n    inst.willRender();      // hook called\n  }                                 \n\n  var renderedComponent = inst.render();\n  if (__DEV__) {\n    // We allow auto-mocks to proceed as if they're returning null.\n    if (typeof renderedComponent === 'undefined' &&\n        inst.render._isMockFunction) {\n      // This is probably bad practice. Consider warning here and\n      // deprecating this convenience.\n      renderedComponent = null;\n    }\n  }\n  return renderedComponent;\n},\n```\n\nright now we can write mixins that hook in at componentWillMount() which would be called before the equivalent function of the component. This leaves no opportunity to further act on props and state  between whatever the component developer does and the point of render. We are trying to insert various tracking properties for automated testing and validation or debugging which can be switched off by a prop. Allowing us to also to validate and automate UI testing.\n\nIts a real pain having to ask developers to either add in the same code over and over (cut and paste coding) every time they write / amend components, or ask them to call a function on a mixin before they commence the render. Even on very simple render functions Its highly error prone as they tend to forget.\n\n```\nrender: function () {\n    this.someMixinCompIsAboutToRender();\n    return React.createElement('section', this.props );\n}\n```\n\nIts much easier to add in (and its easy to statically verify this has been added)\n\n```\nmixins: [Router.State, someMixin],\n```\n\nAfter the initial render there is of course the hook via the use of componentWillUpdate() but this is bypassed during the initial render phase, so doesn't work as a consistent way of being able to hook in after the component has Mounted (developer codes) and Before it Renders.\n\nbeing able to put something like this in a mixin would make all of this much simpler / less time consuming in general and more importantly significantly less error prone.\n\n```\nwillRender : function() {\n   this.props.x = ... inject the property ...\n   this.props.y = ... inject the property ...\n   this.props.z = ... inject the property ...\n},\n```\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
