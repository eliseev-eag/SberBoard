{
  "url": "https://api.github.com/repos/facebook/react/issues/5867",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/5867/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/5867/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/5867/events",
  "html_url": "https://github.com/facebook/react/issues/5867",
  "id": 127041029,
  "node_id": "MDU6SXNzdWUxMjcwNDEwMjk=",
  "number": 5867,
  "title": "Generating unique ID's and SSR (for a11y and more)",
  "user": {
    "login": "jquense",
    "id": 339286,
    "node_id": "MDQ6VXNlcjMzOTI4Ng==",
    "avatar_url": "https://avatars2.githubusercontent.com/u/339286?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jquense",
    "html_url": "https://github.com/jquense",
    "followers_url": "https://api.github.com/users/jquense/followers",
    "following_url": "https://api.github.com/users/jquense/following{/other_user}",
    "gists_url": "https://api.github.com/users/jquense/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jquense/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jquense/subscriptions",
    "organizations_url": "https://api.github.com/users/jquense/orgs",
    "repos_url": "https://api.github.com/users/jquense/repos",
    "events_url": "https://api.github.com/users/jquense/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jquense/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710332294,
      "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
      "name": "Component: Server Rendering",
      "color": "d4c5f9",
      "default": false
    },
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 28,
  "created_at": "2016-01-16T17:44:15Z",
  "updated_at": "2019-02-05T06:34:32Z",
  "closed_at": "2018-01-02T14:14:54Z",
  "author_association": "COLLABORATOR",
  "body": "Howdy ya'll,\n\n**tl dr: please provide a way to coordinate pseudo-random identifiers across the client and server**\n\nThis issue has been discussed a bit before (#1137, #4000) but I continually run into this issue, trying to build libraries that provide accessible components _by default_. The react component model generally speaking offers a big opportunity to raise the often low bar for accessibility in the library and widget world, see experiments like @ryanflorence's react-a11y. \n\nFor better or for worse the aria, and a11y API's in the browser are heavily based on using ID's to link components together. `aria-labelledby`, `aria-describedby`, `aria-owns`,`aria-activedescendent`, and so on all need's ID's. In a different world we would just generate ids where needed and move on, however server-side rendering makes that complicated, because any generated ID is going to cause a mismatch between client/server.\n\nWe've tried a few different approaches to address some of this, one is making id's required props on components that need them. That gets kinda ugly in components that need a few id's but moreso it annoys users. Its unfortunate because if we could generate deterministic id's we could just provide more accessible components by default.\n\nThe frustrating part is that the component generally has all the information it needs to just set the various aria info necessary to make the component usable with a screen reader, but are stymied by not having the user provide a bunch of globally unique ids'\n\nSo far only really reasonable approaches I've seen are @syranide's solution of a root ID store, and using `_rootID`. The latter obviously has problems. The former doesn't scale well for library authors. Everyones' root App component is already wrapped in a Router, Provider, etc, having every library use their own root level ID provider is probably not super feasible and annoying to users.\n\nIt seems like the best way to do this would be if React (or a React addon) could just provide a consistent first class way to get a unique identifier for a component, even if it is just a base64 of the node's _rootID.\n\nthanks for all the hard work everyone!\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
