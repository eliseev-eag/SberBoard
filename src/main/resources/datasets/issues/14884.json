{
  "url": "https://api.github.com/repos/facebook/react/issues/14884",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14884/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14884/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14884/events",
  "html_url": "https://github.com/facebook/react/pull/14884",
  "id": 411758605,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjU0MTI1MjAy",
  "number": 14884,
  "title": "Deal with fallback content in Partial Hydration",
  "user": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-02-19T05:59:12Z",
  "updated_at": "2019-02-19T21:07:42Z",
  "closed_at": "2019-02-19T21:07:42Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/14884",
    "html_url": "https://github.com/facebook/react/pull/14884",
    "diff_url": "https://github.com/facebook/react/pull/14884.diff",
    "patch_url": "https://github.com/facebook/react/pull/14884.patch"
  },
  "body": "Previously we assumed that we hydrated only once we had the final content in the suspense boundary. This lets a dehydrated suspense boundary to be in three possible states (as encoded with different comment nodes):\r\n\r\n__Pending__ `<!--$?-->` - In the pending state, we assume that the content is displaying the fallback state and we're not yet to hydrate because the streaming server (Fizz) will send the content later on. In this state, React won't try to hydrate the content. If props or context changes, the boundary will be deleted and replaced. React will register a `._reactRetry` function on the comment node which is expected to be invoked when this boundary changes to one of the other two states.\r\n\r\n__Fallback__ `<!--$!-->` - In the fallback state, we assume that the content is displaying the fallback state and that it is fine to keep displaying that but we won't get anything more from the server. Therefore, React is now free to replace it with the final content by rendering it on the client instead.\r\n\r\n__Success__ `<!--$-->` - In this state, we assume that the content of the boundary is the final content and will be the same as if we rendered the content on the client so we can now start hydrating it.\r\n\r\nIn the current server renderer we always render suspended boundaries as \"Fallback\". This is useful for content that you only want to render on the client.\r\n\r\nIn Fizz, this PR lets hydration start before the final content is resolved.\r\n\r\nIt is possible that the server will eventually error and not be able to send the final content. If that happens, or a timeout, the Fizz runtime is expected to switch the pending state to fallback state. This lets the client try to render it, and if it errors again, replace it with error boundary content.\r\n\r\nI had thought that we could always try to render the content on the client if we could. However, that didn't work out. For one, it's a waste of cycles since you're most likely going to suspend anyway since you're unlikely to have all the data sent down the wire yet. More importantly, if the client succeeds, it might still have further nested fallback states that the server wouldn't have had. So it might be better to show the server content anyway. In theory we could try to patch up new server content but that seems complicated and breaks the clean architectural boundary between Fizz and the client.",
  "closed_by": {
    "login": "sebmarkbage",
    "id": 63648,
    "node_id": "MDQ6VXNlcjYzNjQ4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sebmarkbage",
    "html_url": "https://github.com/sebmarkbage",
    "followers_url": "https://api.github.com/users/sebmarkbage/followers",
    "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
    "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
    "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
    "repos_url": "https://api.github.com/users/sebmarkbage/repos",
    "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
    "type": "User",
    "site_admin": false
  }
}
