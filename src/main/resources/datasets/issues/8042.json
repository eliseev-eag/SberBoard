{
  "url": "https://api.github.com/repos/facebook/react/issues/8042",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/8042/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/8042/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/8042/events",
  "html_url": "https://github.com/facebook/react/issues/8042",
  "id": 184595158,
  "node_id": "MDU6SXNzdWUxODQ1OTUxNTg=",
  "number": 8042,
  "title": "[feature/idea] rename context(types) to implicit props(types), and merge them.",
  "user": {
    "login": "slivcode",
    "id": 22228689,
    "node_id": "MDQ6VXNlcjIyMjI4Njg5",
    "avatar_url": "https://avatars2.githubusercontent.com/u/22228689?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/slivcode",
    "html_url": "https://github.com/slivcode",
    "followers_url": "https://api.github.com/users/slivcode/followers",
    "following_url": "https://api.github.com/users/slivcode/following{/other_user}",
    "gists_url": "https://api.github.com/users/slivcode/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/slivcode/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/slivcode/subscriptions",
    "organizations_url": "https://api.github.com/users/slivcode/orgs",
    "repos_url": "https://api.github.com/users/slivcode/repos",
    "events_url": "https://api.github.com/users/slivcode/events{/privacy}",
    "received_events_url": "https://api.github.com/users/slivcode/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2016-10-22T00:14:16Z",
  "updated_at": "2017-10-04T14:13:10Z",
  "closed_at": "2017-10-04T14:13:09Z",
  "author_association": "NONE",
  "body": "Currently\n\n``` js\n// Parent\ngetChildContext = _ => ({theme: 'red'})\nrender = _ => <ThemedButton />\n\n// Child\nThemedButton  = (props, ctx: {theme}) => <button color={theme}>BTN</button>\nThemedButton.contextTypes = {theme: PropTypes.string}\n```\n\nEffectively, context is an **implicit props**, i.e. it is _mostly_ equivalent for all Child under Parent, it just expect Child to ask for it.\n\n``` js\n// Parent\nrender = _ => <ThemedButton theme={parentToChildContext.theme} />\n```\n\nInterchangably, my Proposal/idea in mind.\n\n``` js\n// Child\nThemedButton  = (props:{theme}) => <button color={theme}>BTN</button>\nThemedButton.propTypes = {theme: PropTypes.string.allowImplicit}\n```\n\nit also imply, you can **override** the props if needed, for cases like testing/preview/...\n\n``` js\n<ThemedButton theme=\"green\" /> {/*green button, explicit props have higher priority*/}\n<ThemedButton /> {/*red button*/}\n```\n\na sample enhancer implementation\n\n``` js\nexport let withImplicitProps = (propsName) => (target) => {\n  let o = {}\n  propsName.forEach((k) => o[k] = PropTypes.any)\n  let out: any = (props, ctx) => createElement(target, Object.assign({}, ctx, props))\n  out.contextTypes = o\n  return out\n}\n```\n\nFeel free to point out flaws and edge cases, but whatever they are, context probably share the same issue. The idea is just more intuitive to introduce the concept.\n\nP.S Also, I would proposal creating **constant** context values, to share fixed values, which never trigger Child update after mount.\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
