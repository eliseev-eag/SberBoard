{
  "url": "https://api.github.com/repos/facebook/react/issues/15523",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15523/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15523/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15523/events",
  "html_url": "https://github.com/facebook/react/issues/15523",
  "id": 438155079,
  "node_id": "MDU6SXNzdWU0MzgxNTUwNzk=",
  "number": 15523,
  "title": "useEffect for synchronizing state and props",
  "user": {
    "login": "Yakimych",
    "id": 5010901,
    "node_id": "MDQ6VXNlcjUwMTA5MDE=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5010901?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Yakimych",
    "html_url": "https://github.com/Yakimych",
    "followers_url": "https://api.github.com/users/Yakimych/followers",
    "following_url": "https://api.github.com/users/Yakimych/following{/other_user}",
    "gists_url": "https://api.github.com/users/Yakimych/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Yakimych/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Yakimych/subscriptions",
    "organizations_url": "https://api.github.com/users/Yakimych/orgs",
    "repos_url": "https://api.github.com/users/Yakimych/repos",
    "events_url": "https://api.github.com/users/Yakimych/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Yakimych/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 40929155,
      "node_id": "MDU6TGFiZWw0MDkyOTE1NQ==",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Question",
      "name": "Type: Question",
      "color": "cc317c",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 8,
  "created_at": "2019-04-29T05:31:03Z",
  "updated_at": "2019-09-05T09:28:56Z",
  "closed_at": "2019-09-05T09:28:56Z",
  "author_association": "NONE",
  "body": "Hi. I have a recurring scenario that I’ve been struggling with since the good old days of `componentWillReceiveProps`, and now I’ve pretty much run into the same issue with hooks, so I was hoping I could get some guidance as to what the idiomatic way of solving this and similar cases in React is.\r\n\r\n### Problem description - starting point\r\n\r\nI have a list of items. Every item has an Edit button next to it. Clicking it opens an “Editor”, where one can change all the fields and either Confirm or Cancel. (Confirming would send an API call to save the data, but this part is not relevant to the problem I am having.) The “parent” component would render the list with the Edit buttons, and have an `itemUnderEdit` property that would be null from the start. Clicking on “Edit” for a specific item would set the `itemUnderEdit` to the clicked item.\r\n\r\n![usecase](https://user-images.githubusercontent.com/5010901/56883590-6cbcd080-6a67-11e9-9401-bd44e1747bc2.gif)\r\n\r\nHere is the full example with all 3 solutions on CodeSandbox: https://codesandbox.io/s/2oz2nzynpy\r\n\r\n### Solution 1\r\n\r\nMake the “Editor” component stateless and controlled - it takes in change handlers for every field as props with the parent tracking every change. This solution appeals to me, since I like pure stateful components that are a one-to-one mapping of props to HTML - they are simple to reason about etc etc. This kind of goes against the commonly heard “keep your state close to where it is used” advice, which also seems reasonable, since I don’t really need to know in the parent what the user is typing, I am only interested to know when they are done at the end. This stateless solution also introduces a lot of props, since I need one event handler per field (onNameChanged, onDescriptionChanged in the example, but it could as well be 10 fields), which is a lot of props.\r\n\r\n### Solution 2\r\n\r\nMake the “Editor” component stateful and only get an event when editing is done: `onConfirm(itemToSave)` or `onCancel()`. This seems like the “React” way and is in line with the advice of keeping state close to where it is used. Since I am only interested to know when the user clicks `Confirm`, a stateful “blackbox”-component that tracks its own state seems reasonable.\r\n\r\nIn order to achieve this, however, I need to copy my props to the state, which, according to @gaearon, is a bad idea:\r\n```\r\nconst [name, setName] = useState(props.item.name);\r\nconst [description, setDescription] = useState(props.item.description);\r\n```\r\n\r\nMoreover, this solution is buggy from the start, since clicking on Edit for a different item doesn’t “re-sync” the props with the state - it only works if I close the Editor and then reopen it:\r\n\r\n![stateful_editor1](https://user-images.githubusercontent.com/5010901/56877667-e2b53d80-6a4f-11e9-8f4c-6a52fa175abd.gif)\r\n\r\nWhich brings us to Solution 3.\r\n\r\n### Solution 3\r\n\r\nThis one has been one of my biggest pain-points with stateful components in React (which is why I prefer stateless components with a state container, but those I widely demonized nowadays, so I am yet again trying to understand the idiomatic React way of doing this).\r\nThe “old” ways were to sync in `componentWillReceiveProps` and later with `getDerivedStateFromProps`. Now I can do this with `useEffect`, where I specify `props.item` as the “dependency”, since I want to run it when the item changes.\r\n\r\n```\r\nuseEffect(() => {\r\n  if (props.item.name !== name) {\r\n    setName(props.item.name);\r\n  }\r\n  if (props.item.description !== description) {\r\n    setDescription(props.item.description);\r\n  }\r\n}, [props.item]);\r\n```\r\n\r\nThis seems to work as expected, but I get the linter warning: `React Hook useEffect has missing dependencies: 'description' and 'name'. Either include them or remove the dependency array  react-hooks/exhaustive-deps`. Obviously if I were to add those to the dependency list, I wouldn’t be able to change anything in the inputs, so how come I get this warning?\r\n\r\n### Summary\r\n\r\nThis is a question in two parts: first one about an idiomatic solution in React, as well as feedback to the React team: this scenario is simple and common, but *it’s difficult to know how to implement correctly and safely in a consistent way*.\r\n\r\nLifting state up and making the problematic component stateless is good advice that solves the problem, but every time it seems like a “temporary” solution. It also leads to painful refactoring every time something has to be moved around the component tree, so relying on it in the long run is extremely brittle.\r\n\r\nThe second part of the question is whether the solution with `useEffect` is viable at all, and in this case - why do I get the linter warning? Clearly I want to run it **only** when a certain prop changes. Is there an edge-case where this would result in an unexpected bug? ",
  "closed_by": {
    "login": "threepointone",
    "id": 18808,
    "node_id": "MDQ6VXNlcjE4ODA4",
    "avatar_url": "https://avatars2.githubusercontent.com/u/18808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/threepointone",
    "html_url": "https://github.com/threepointone",
    "followers_url": "https://api.github.com/users/threepointone/followers",
    "following_url": "https://api.github.com/users/threepointone/following{/other_user}",
    "gists_url": "https://api.github.com/users/threepointone/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/threepointone/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/threepointone/subscriptions",
    "organizations_url": "https://api.github.com/users/threepointone/orgs",
    "repos_url": "https://api.github.com/users/threepointone/repos",
    "events_url": "https://api.github.com/users/threepointone/events{/privacy}",
    "received_events_url": "https://api.github.com/users/threepointone/received_events",
    "type": "User",
    "site_admin": false
  }
}
