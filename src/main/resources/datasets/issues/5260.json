{
  "url": "https://api.github.com/repos/facebook/react/issues/5260",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/5260/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/5260/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/5260/events",
  "html_url": "https://github.com/facebook/react/issues/5260",
  "id": 113065742,
  "node_id": "MDU6SXNzdWUxMTMwNjU3NDI=",
  "number": 5260,
  "title": "Naming of react-dom/server is misleading",
  "user": {
    "login": "Merri",
    "id": 976619,
    "node_id": "MDQ6VXNlcjk3NjYxOQ==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/976619?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Merri",
    "html_url": "https://github.com/Merri",
    "followers_url": "https://api.github.com/users/Merri/followers",
    "following_url": "https://api.github.com/users/Merri/following{/other_user}",
    "gists_url": "https://api.github.com/users/Merri/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Merri/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Merri/subscriptions",
    "organizations_url": "https://api.github.com/users/Merri/orgs",
    "repos_url": "https://api.github.com/users/Merri/repos",
    "events_url": "https://api.github.com/users/Merri/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Merri/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2015-10-23T17:39:16Z",
  "updated_at": "2016-04-16T00:42:26Z",
  "closed_at": "2016-04-16T00:34:04Z",
  "author_association": "NONE",
  "body": "**TL;DR**: I think it should be `react-dom/static`\n\nIf we have a look at what `react-dom/server` actually does, it only provides two methods: `renderToString` and `renderToStaticMarkup`. Both of these result in static HTML: the later one gives plain HTML while the first one gives React-flavored HTML that React can quickly inject to. But essentially all you get is static HTML as a string.\n\nI can understand why it says server in the name: in most cases you really only want to use it in server-side and thus name it based on that. However I think this leads to people to think you should **never** use the code client-side, which isn't true for it's nature. There are perfectly fine use cases for client-side. For example, I've written a [lazy loader component](https://github.com/Merri/react-lazy/tree/react-v0.14) which renders `this.props.children` as \"non-react\" static HTML until component comes into the viewport.\n\nThe rendering trick must be done because you can't have real DOM elements inside a `noscript` element: it's contents is always seen as a string (or as nothing at all if you ask IE8-). The `noscript` element is important for the lazy loading trick in this case, because it allows for loading the images even if JavaScript is disabled and in addition search engines can also get access to the images; although Google these days does support JavaScript, but I have no idea if it deals with lazy loading via virtual viewport or not. Also, most importantly, by using `noscript` browser will not start fetching any images or resources contained within the `noscript` element when JavaScript is enabled.\n\nSo the use case in summary:\n1. Server renders static HTML with `noscript` elements containing non-reactified static HTML.\n2. Client must render this exact same static HTML inside `noscript` element on initial render.\n3. Once `componentDidMount` client can start updating the DOM by checking if the component is in the viewport or not.\n4. In case JavaScript is disabled you can still get the images / resources loaded. You just won't have them lazy loaded.\n\nSo I think it should be `react-dom/static`; although I might also question the fact whether static rendering really has to be abstracted to it's own dependency.\n\nFinally, I already received a pull request that initially attempted to remove `react-dom/server` dependency purely because it's name is what it is. I don't know if anyone else gets this noise, but I guess it is quite likely for that to happen, because naming things is hard yet names are powerful.\n",
  "closed_by": {
    "login": "jimfb",
    "id": 9595985,
    "node_id": "MDQ6VXNlcjk1OTU5ODU=",
    "avatar_url": "https://avatars3.githubusercontent.com/u/9595985?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jimfb",
    "html_url": "https://github.com/jimfb",
    "followers_url": "https://api.github.com/users/jimfb/followers",
    "following_url": "https://api.github.com/users/jimfb/following{/other_user}",
    "gists_url": "https://api.github.com/users/jimfb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jimfb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jimfb/subscriptions",
    "organizations_url": "https://api.github.com/users/jimfb/orgs",
    "repos_url": "https://api.github.com/users/jimfb/repos",
    "events_url": "https://api.github.com/users/jimfb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jimfb/received_events",
    "type": "User",
    "site_admin": false
  }
}
