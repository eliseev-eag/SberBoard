{
  "url": "https://api.github.com/repos/facebook/react/issues/12664",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12664/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12664/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12664/events",
  "html_url": "https://github.com/facebook/react/issues/12664",
  "id": 316386369,
  "node_id": "MDU6SXNzdWUzMTYzODYzNjk=",
  "number": 12664,
  "title": "[Question] How to deal with RenderProps Components callback hell?",
  "user": {
    "login": "xialvjun",
    "id": 4413712,
    "node_id": "MDQ6VXNlcjQ0MTM3MTI=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/4413712?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/xialvjun",
    "html_url": "https://github.com/xialvjun",
    "followers_url": "https://api.github.com/users/xialvjun/followers",
    "following_url": "https://api.github.com/users/xialvjun/following{/other_user}",
    "gists_url": "https://api.github.com/users/xialvjun/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/xialvjun/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/xialvjun/subscriptions",
    "organizations_url": "https://api.github.com/users/xialvjun/orgs",
    "repos_url": "https://api.github.com/users/xialvjun/repos",
    "events_url": "https://api.github.com/users/xialvjun/events{/privacy}",
    "received_events_url": "https://api.github.com/users/xialvjun/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2018-04-20T19:33:58Z",
  "updated_at": "2018-04-20T19:39:01Z",
  "closed_at": "2018-04-20T19:39:01Z",
  "author_association": "NONE",
  "body": "This issue is somewhat long. If you are eager, goto the `FINAL_BUT`.\r\n\r\n# How to deal with RenderProps Components callback hell?\r\n\r\nYes, there is a package `react-adopt`. It's awesome, but it has problems. Let me show you:\r\n\r\n```jsx\r\nimport { Value } from 'react-powerplug';\r\nimport { adopt } from 'react-adopt';\r\n\r\nA_and_B = adopt({ mapper: { a: <Value initial=\"A\"/>, b: <Value initial=\"B\"/> } });\r\n<A_and_B>\r\n  {({ a, b }) => <div>{a + b}</div>}\r\n</A_and_B>\r\n```\r\n\r\n#### Then what if I want dynamic `mapper`:\r\n\r\n```jsx\r\nimport { Adopt } from 'react-adopt';\r\n\r\nA_and_B = adopt({ mapper: { a: <Value initial=\"A\"/>, b: <Value initial=\"B\"/> } });\r\n<Adopt mapper={{ a: <Value initial=\"A\"/>, b: <Value initial=\"B\"/> }}>\r\n  {({ a, b }) => <div>{a + b}</div>}\r\n</Adopt>\r\n```\r\n\r\nIn fact, there is a bug in `Adopt` at least in `react-adopt@0.3.1`: it didn't cache the Component returned from `adopt`, then react will always treat it like a different Component, then rebuild the DOM.\r\n\r\nWell, it's just a bug of `react-adopt`, not `react`'s.\r\n\r\n#### But the above example is not a really dynamic `mapper`. What if I want a really dynamic `mapper`(assume we have fixed the bug)?\r\n\r\n```jsx\r\ncount = 10;\r\n<Adopt mapper={new Array(count).fill(0).map((_, idx) => <Value key={idx} initial=\"A\"/>)}>\r\n  {obj => <div>{Object.keys(obj).map((_, idx) => obj[idx]).join()}</div>}\r\n</Adopt>\r\n```\r\n\r\nThen if we `this.setState({ count: 9 })`, the DOM will rebuild even we have fixed `Adopt`'s `no cache bug`.\r\n\r\n> **WHY**: `react-adopt` just expand `mapper={[<Value initial=\"A\"/>, <Value initial=\"B\"/>]}` to `<Value initial=\"A\">{a => <Value initial=\"B\">{b => <div>{[a, b].join()}</div>}</Value>}</Value>`. So the `mapper` influence the VDOM structure. VDOM structure changed, DOM rebuild.\r\n\r\n### So, is there any other way to deal with RenderProps Components callback hell?\r\n\r\nI thought and came up with this:\r\n\r\n```jsx\r\nimport React, { PureComponent, Component } from \"react\";\r\n\r\nclass Result extends Component {\r\n  render() {\r\n    return this.props.children();\r\n  }\r\n}\r\n\r\nexport class Compose extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.skip_force = true;\r\n  }\r\n  componentWillUpdate() {\r\n    this.skip_force = true;\r\n  }\r\n  render() {\r\n    const { mapper, children } = this.props;\r\n    const mapper_is_array = Object.prototype.toString.call(mapper) === \"[object Array]\";\r\n    const arg = mapper_is_array ? [] : {};\r\n    return (\r\n      <React.Fragment>\r\n        {Object.keys(mapper).map(key => {\r\n          const value = mapper[key];\r\n          const with_key = mapper_is_array ? null : { key };\r\n          return (typeof value === \"function\" ? React.createElement : React.cloneElement)(value, with_key, (...args) => {\r\n            arg[key] = args[0]; // maybe we should just use args rather than args[0]\r\n            if (!this.skip_force) {\r\n              this.forceUpdate();\r\n            }\r\n            return null;\r\n          });\r\n        })}\r\n        <Result>\r\n          {() => {\r\n            this.skip_force = false;\r\n            return children(arg);\r\n          }}\r\n        </Result>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nIt works!\r\n\r\n# BUT!!!\r\n\r\n1. It relies on the fact that the last Child will render at the last. But the fact is not defined in React SPEC.\r\n2. It relies on `componentWillUpdate` which is deprecated.\r\n\r\nThen, is there any other better methods ?\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
