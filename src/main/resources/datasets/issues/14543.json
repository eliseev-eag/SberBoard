{
  "url": "https://api.github.com/repos/facebook/react/issues/14543",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/14543/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/14543/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/14543/events",
  "html_url": "https://github.com/facebook/react/issues/14543",
  "id": 396786559,
  "node_id": "MDU6SXNzdWUzOTY3ODY1NTk=",
  "number": 14543,
  "title": "Add `get` function to `useState`",
  "user": {
    "login": "liyuanqiu",
    "id": 24999464,
    "node_id": "MDQ6VXNlcjI0OTk5NDY0",
    "avatar_url": "https://avatars1.githubusercontent.com/u/24999464?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/liyuanqiu",
    "html_url": "https://github.com/liyuanqiu",
    "followers_url": "https://api.github.com/users/liyuanqiu/followers",
    "following_url": "https://api.github.com/users/liyuanqiu/following{/other_user}",
    "gists_url": "https://api.github.com/users/liyuanqiu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/liyuanqiu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/liyuanqiu/subscriptions",
    "organizations_url": "https://api.github.com/users/liyuanqiu/orgs",
    "repos_url": "https://api.github.com/users/liyuanqiu/repos",
    "events_url": "https://api.github.com/users/liyuanqiu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/liyuanqiu/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 710375792,
      "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
      "name": "Type: Discussion",
      "color": "fef2c0",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 29,
  "created_at": "2019-01-08T07:51:31Z",
  "updated_at": "2019-03-31T15:33:17Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n- feature\r\n\r\n**What is the current behavior?**\r\nCode from [Introducing Hooks](https://reactjs.org/docs/hooks-intro.html):\r\n```javascript\r\nimport { useState } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => setCount(count + 1)}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\n```javascript\r\n// each time \"count\" changed, this arrow function will be created again.\r\n// so that it can access the latest \"count\"\r\nonClick={() => setCount(count + 1)}\r\n```\r\nI don't think it is good to create a fixed function many times, so I try to modify the code:\r\n```javascript\r\nconst [count, setCount] = useState(0);\r\nconst handleClick = useCallback(() => setCount(count + 1), []);\r\n```\r\nBut obviously the callback in `useCallback` couldn't get the latest `count` because I pass in an empty inputs array to avoid this callback been generated again and again.\r\n\r\nSo, in fact, the inputs array decide two things:\r\n1. when to recreate the callback\r\n2. which state can be accessed in the callback\r\n\r\nIn most situation, the two things are one thing, but here they conflict. \r\n\r\nSo I think maybe it's good to add a `get` function to `useState` like this:\r\n```javascript\r\nimport { useState, useCallback } from 'react';\r\n\r\nfunction Example() {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  const [count, setCount, getCount] = useState(0);\r\n\r\n  const handleClick = useCallback(() => setCount(getCount() + 1), []);\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={handleClick}>\r\n        Click me\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n```\r\nMaybe it's confusing because `getCount` can totally replace `count`, but it brings the possible to avoid creating callbacks again and again.\r\n\r\n### Edited\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452237355 exactly resolves the case above. But thereâ€˜re many other scenarios can't use `updater` to resolve. Here are some more code snippets:\r\n#### 1. Access states in a timer.\r\n```javascript\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n#### 2. Access states in WebSocket callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  // create a WebSocket client named \"ws\"\r\n  ws.onopen = () => {\r\n    // access states\r\n  };\r\n  ws.onmessage = () => {\r\n    // access states\r\n  };\r\n  return () => ws.close();\r\n}, inputs);\r\n```\r\n#### 3. Access states in Promise\r\n```javascript\r\nuseEffect(() => {\r\n  create_a_promise().then(() => {\r\n    // access states\r\n  });\r\n}, inputs);\r\n```\r\n#### 4. Access states in event callbacks\r\n```javascript\r\nuseEffect(() => {\r\n  function handleThatEvent() {\r\n    // access states\r\n  }\r\n  instance.addEventListener('eventName', handleThatEvent);\r\n  return instance.removeEventListener('eventName', handleThatEvent);\r\n}, inputs);\r\n```\r\n\r\nWe had to use some workaround patterns to resolve those cases, like\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452676760\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453058025\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-453079958\r\nOr a funny way:\r\n```javascript\r\nconst [state, setState] = useState();\r\nuseEffect(() => {\r\n  // or setInterval\r\n  const id = setTimeout(() => {\r\n    // access states\r\n    setState((prevState) => {\r\n      // Now I can do anything with state...ðŸ¤®\r\n      ...\r\n      return prevState;\r\n    });\r\n  }, period);\r\n  return () => clearTimeout(id);\r\n}, inputs);\r\n```\r\n\r\nSo let's discuss and wait...\r\nhttps://github.com/facebook/react/issues/14543#issuecomment-452713416\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- React 16.7.0-alpha.2\r\n\r\n",
  "closed_by": {
    "login": "liyuanqiu",
    "id": 24999464,
    "node_id": "MDQ6VXNlcjI0OTk5NDY0",
    "avatar_url": "https://avatars1.githubusercontent.com/u/24999464?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/liyuanqiu",
    "html_url": "https://github.com/liyuanqiu",
    "followers_url": "https://api.github.com/users/liyuanqiu/followers",
    "following_url": "https://api.github.com/users/liyuanqiu/following{/other_user}",
    "gists_url": "https://api.github.com/users/liyuanqiu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/liyuanqiu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/liyuanqiu/subscriptions",
    "organizations_url": "https://api.github.com/users/liyuanqiu/orgs",
    "repos_url": "https://api.github.com/users/liyuanqiu/repos",
    "events_url": "https://api.github.com/users/liyuanqiu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/liyuanqiu/received_events",
    "type": "User",
    "site_admin": false
  }
}
