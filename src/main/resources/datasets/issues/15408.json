{
  "url": "https://api.github.com/repos/facebook/react/issues/15408",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15408/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15408/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15408/events",
  "html_url": "https://github.com/facebook/react/pull/15408",
  "id": 432846326,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MjcwMjI1ODI2",
  "number": 15408,
  "title": "Experimental Event API: Redesign event responder propagation",
  "user": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    },
    {
      "id": 1296748300,
      "node_id": "MDU6TGFiZWwxMjk2NzQ4MzAw",
      "url": "https://api.github.com/repos/facebook/react/labels/React%20Flare",
      "name": "React Flare",
      "color": "63f2ff",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2019-04-13T13:14:07Z",
  "updated_at": "2019-04-13T19:37:44Z",
  "closed_at": "2019-04-13T19:37:40Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/15408",
    "html_url": "https://github.com/facebook/react/pull/15408",
    "diff_url": "https://github.com/facebook/react/pull/15408.diff",
    "patch_url": "https://github.com/facebook/react/pull/15408.patch"
  },
  "body": "This PR aims at tackling a class of issues, confusion and bugs with how event responder propagate in the different phases and how `stopPropagation` works. The previous implementation didn't correctly ensure event components in the capture phase were fired in the right order. This PR revamps the entire process, cleaning up code along the way and improving performance significantly compared to before.\r\n\r\nThis also fixes a bunch of bugs along the way, which now have tests added to ensure we don't regress. Another big change is that it is expected the the event responder `onEvent` returns a `boolean` indicating if the event module itself should prevent propagation after. Rather than before, where you'd use `dispatchStopPropagation`, which didn't make a lot of sense. Furthermore, the responder `event` object passed to the callbacks (like `onEvent`) now has a `phase` integer property. The phase property indicates what the current phase is:\r\n\r\n- `0`: root phase\r\n- `1`: bubble phase\r\n- `2`: capture phase\r\n\r\nThe ordering of these phases, when events come in:\r\n\r\n`Capture target event types` -> `Bubble target event types` -> `Root event types`\r\n\r\nThis can be used to properly dispatch events in their relative phases, rather than passing `capture` on the config object of `dispatchEvent`. So, if you want to dispatch an event in the capture phase, you need to check the current phase that the event `onEvent` is in and ensure you're in the same phase as what you want to dispatch in.\r\n\r\nI also removed the new responder event system from using the plugin event system's bookkeeping logic â€“ it was never actually needed and just added overhead on each event pass. So now the fork for the different event systems happens in `dispatchEvent`.",
  "closed_by": {
    "login": "trueadm",
    "id": 1519870,
    "node_id": "MDQ6VXNlcjE1MTk4NzA=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trueadm",
    "html_url": "https://github.com/trueadm",
    "followers_url": "https://api.github.com/users/trueadm/followers",
    "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
    "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
    "organizations_url": "https://api.github.com/users/trueadm/orgs",
    "repos_url": "https://api.github.com/users/trueadm/repos",
    "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trueadm/received_events",
    "type": "User",
    "site_admin": false
  }
}
