{
  "url": "https://api.github.com/repos/facebook/react/issues/6914",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/6914/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/6914/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/6914/events",
  "html_url": "https://github.com/facebook/react/pull/6914",
  "id": 157359809,
  "node_id": "MDExOlB1bGxSZXF1ZXN0NzE4MTMyNDE=",
  "number": 6914,
  "title": "Add React.PureComponent, inherit purity for functional components",
  "user": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 92,
  "created_at": "2016-05-28T22:37:05Z",
  "updated_at": "2017-03-01T21:34:04Z",
  "closed_at": "2017-03-01T21:34:04Z",
  "author_association": "COLLABORATOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/6914",
    "html_url": "https://github.com/facebook/react/pull/6914",
    "diff_url": "https://github.com/facebook/react/pull/6914.diff",
    "patch_url": "https://github.com/facebook/react/pull/6914.patch"
  },
  "body": "## React.PureComponent\n\nThis provides an easy way to indicate that components should only rerender when given new props, like PureRenderMixin. If you rely on mutation in your React components, you can continue to use `React.Component`.\n\nInheriting from `React.PureComponent` indicates to React that your component doesn't need to rerender when the props are unchanged. We'll compare the old and new props before each render and short-circuit if they're unchanged. It's like an automatic shouldComponentUpdate, but it also affects the behavior of functional children that are rendered:\n## Functional components\n\nWe've heard clearly that most React users intend for their functional components to be pure and to produce different output only if the component's props have changed (https://mobile.twitter.com/reactjs/status/736412808372314114). However, a significant fraction of users still rely on mutation in their apps; when used with mutation, comparing props on each render could lead to components not updating even when the data is changed.\n\nTherefore, we're changing functional components to behave as pure when they're used inside a React.PureComponent but to rerender unconditionally when contained in a React.Component:\n\n``` js\nclass Post extends React.PureComponent {  // or React.Component\n  render() {\n    return (\n      <div className=\"post\">\n        <PostHeader model={this.props.model} />\n        <PostBody model={this.props.model} />\n      </div>\n    );\n  }\n}\n\nfunction PostHeader(props) {\n  // ...\n}\n\nfunction PostBody(props) {\n  // ...\n}\n```\n\nIn this example, the functional components PostHeader and PostBody will be treated as pure because they're rendered by a pure parent component (Post). If our app used mutable models instead, Post should extend React.Component, which would cause PostHeader and PostBody to rerender whenever Post does, even if the model object is the same.\n\nWe anticipate that this behavior will work well in real-world apps: if you use immutable data, your class-based components can extend React.PureComponent and your functional components will be pure too; if you use mutable data, your class-based components will extend React.Component and your functional components will update accordingly.\n\nIn the future, we might adjust these heuristics to improve performance. For example, we might do runtime detection of components like\n\n``` js\nfunction FancyButton(props) {\n  return <Button style=\"fancy\" text={props.text} />;\n}\n```\n\nand optimize them to \"inline\" the child Button component and call it immediately, so that React doesn't need to store the props for Button nor allocate a backing instance for it -- causing less work to be performed and reducing GC pressure.\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
