{
  "url": "https://api.github.com/repos/facebook/react/issues/1599",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/1599/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/1599/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/1599/events",
  "html_url": "https://github.com/facebook/react/pull/1599",
  "id": 34260430,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTYzMTMyNDY=",
  "number": 1599,
  "title": "Split escapeTextForBrowser into escapeTextContentForBrowser and quoteAttributeValueForBrowser",
  "user": {
    "login": "syranide",
    "id": 1714255,
    "node_id": "MDQ6VXNlcjE3MTQyNTU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/1714255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/syranide",
    "html_url": "https://github.com/syranide",
    "followers_url": "https://api.github.com/users/syranide/followers",
    "following_url": "https://api.github.com/users/syranide/following{/other_user}",
    "gists_url": "https://api.github.com/users/syranide/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/syranide/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/syranide/subscriptions",
    "organizations_url": "https://api.github.com/users/syranide/orgs",
    "repos_url": "https://api.github.com/users/syranide/repos",
    "events_url": "https://api.github.com/users/syranide/events{/privacy}",
    "received_events_url": "https://api.github.com/users/syranide/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 16,
  "created_at": "2014-05-25T10:43:01Z",
  "updated_at": "2015-02-05T08:41:38Z",
  "closed_at": "2015-02-05T08:41:37Z",
  "author_association": "CONTRIBUTOR",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/1599",
    "html_url": "https://github.com/facebook/react/pull/1599",
    "diff_url": "https://github.com/facebook/react/pull/1599.diff",
    "patch_url": "https://github.com/facebook/react/pull/1599.patch"
  },
  "body": "IMHO the preferable solution to #1461, my comment from that PR:\n\nChrome only escapes `<`, `>` and `&` when setting `textContent`, it only escapes `&` and `\"` when setting an attribute. Which I would say makes my suggestion above quite a lot less alien (to me at least).\n1. It aligns with OWASPs stance that that _only_ `\"` can be used to break out of `\"` for quoted attribute values.\n2. It also aligns with OWASPs recommendation for text/html, `'` and `\"` is unnecessary because we're dealing with plain text and `/` is unnecessary because it's a precaution against there being an unescaped `<` before the injected content.\n3. Attribute names **cannot** be escaped, invalid chars invalidate the entire attribute name. Since we already very strictly filter against invalid attribute names we don't need to do anything further for attribute names.\n\nAttribute names: discard invalid\nAttribute values: `&` + `\"`\nText content: `&` + `<` + `>`\n\n---\n\nWith these rules we generate the same HTML that browsers do, no extra clutter.\n\nThe _only_ danger I see is if `dangerouslySetInnerHTML` is used with invalid HTML, if there's an unclosed quoted attribute then anyone can now add as many attributes as they want (an unclosed tag is not an issue though), whereas if we quote `\"` they can only add more data to that attribute. But really, if what you're sending to `dangerouslySetInnerHTML` is not rigorously vetted (or at the very least valid HTML) you're knee deep in trouble regardless. The safest solution would be to not include `dangerouslySetInnerHMTL` in the initial markup at all, but to always set it with `innerHTML`.\n\n---\n\nNote that `escapeTextForBrowser` was renamed to `escapeTextContentForBrowser`, so any external uses of it will now be greeted with an error (instead of a potentially dangerous situation).\n\nI also added a test that explicitly verifies the output of ReactDOMComponent against a manually and correctly escaped string.\n\nPS. Even if you don't like these \"minimal rules\", the separation between `escapeTextContentForBrowser` and `quoteAttributeValueForBrowser` makes a lot of sense to me, this PR also does away with all the incorrect escaping of attribute names.\n",
  "closed_by": {
    "login": "syranide",
    "id": 1714255,
    "node_id": "MDQ6VXNlcjE3MTQyNTU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/1714255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/syranide",
    "html_url": "https://github.com/syranide",
    "followers_url": "https://api.github.com/users/syranide/followers",
    "following_url": "https://api.github.com/users/syranide/following{/other_user}",
    "gists_url": "https://api.github.com/users/syranide/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/syranide/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/syranide/subscriptions",
    "organizations_url": "https://api.github.com/users/syranide/orgs",
    "repos_url": "https://api.github.com/users/syranide/repos",
    "events_url": "https://api.github.com/users/syranide/events{/privacy}",
    "received_events_url": "https://api.github.com/users/syranide/received_events",
    "type": "User",
    "site_admin": false
  }
}
