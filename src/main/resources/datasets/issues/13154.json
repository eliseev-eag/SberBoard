{
  "url": "https://api.github.com/repos/facebook/react/issues/13154",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/13154/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/13154/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/13154/events",
  "html_url": "https://github.com/facebook/react/issues/13154",
  "id": 338842808,
  "node_id": "MDU6SXNzdWUzMzg4NDI4MDg=",
  "number": 13154,
  "title": "DOM elements (DIVs) has incorrect properties in componentDidMount",
  "user": {
    "login": "gsbelarus",
    "id": 5175764,
    "node_id": "MDQ6VXNlcjUxNzU3NjQ=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5175764?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gsbelarus",
    "html_url": "https://github.com/gsbelarus",
    "followers_url": "https://api.github.com/users/gsbelarus/followers",
    "following_url": "https://api.github.com/users/gsbelarus/following{/other_user}",
    "gists_url": "https://api.github.com/users/gsbelarus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gsbelarus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gsbelarus/subscriptions",
    "organizations_url": "https://api.github.com/users/gsbelarus/orgs",
    "repos_url": "https://api.github.com/users/gsbelarus/repos",
    "events_url": "https://api.github.com/users/gsbelarus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gsbelarus/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 620368407,
      "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
      "name": "Resolution: Needs More Information",
      "color": "fffde7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2018-07-06T08:01:18Z",
  "updated_at": "2018-07-16T16:45:46Z",
  "closed_at": "2018-07-16T16:45:46Z",
  "author_association": "NONE",
  "body": "I need to render a list of items inside flex-box column. Every item is a div and has arbitrary height. The list of items can be huge so my tactics is to render initially one item and check available space. For that I save refs to parent div and to item's div and then access their **clientHeight** and **offsetHeight** properties. If there is a free space I add one more item and rerender whole thing. The process is repeated until whole column is filled.\r\n\r\nThe problem is that if I try immediately calculate available space in **componenDidMount** I've got incorrect value of child div's **offsetTop**. I.e. the following method:\r\n```typescript\r\n  public componentDidMount() {\r\n    this.setState({ recalc: true });\r\n  } \r\n```\r\nWill not work. But if I add some small pause it works:\r\n\r\n```typescript\r\n  public componentDidMount() {\r\n    setTimeout( () => this.setState({ recalc: true }), 100);\r\n  }\r\n```\r\n\r\nThe other method, **componentDidUpdate**, works excellently without any delays:\r\n\r\n```typescript\r\n  public componentDidUpdate() {\r\n    this.calcVisibleCount();\r\n  } \r\n```\r\n\r\nSeems like there is some rendering in parallel going when **componentDidMount** is invoked and all refs could be incomplete/incorrect until this process is finished.\r\n\r\nJust for the reference:\r\n\r\n```typescript\r\n  private calcVisibleCount() {\r\n    const { nlpDialog } = this.props;\r\n    const { showFrom, showTo, recalc } = this.state;\r\n\r\n    if (recalc) {\r\n      if (this.shownItems.length) {\r\n        if (this.shownItems[0].offsetTop > 38) {\r\n          if (this.shownItems.length < nlpDialog.items.size && showFrom > 0) {\r\n            this.setState({ showFrom: showFrom - 1 });\r\n          } else {\r\n            this.setState({ recalc: false });\r\n          }\r\n        }\r\n        else if (this.shownItems[0].offsetTop <= 0) {\r\n          if (showFrom < showTo) {\r\n            this.setState({\r\n              showFrom: showFrom + 1,\r\n              recalc: false\r\n            });\r\n          } else {\r\n            this.setState({ recalc: false });\r\n          }\r\n        }\r\n      } else {\r\n        this.setState({\r\n          showFrom: 0,\r\n          showTo: 0,\r\n          recalc: false\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { nlpDialog } = this.props;\r\n    this.shownItems = [];\r\n    return (\r\n      <Fragment>\r\n        <div styleName=\"NLPDialog\" ref={ elem => this.nlpDialogDiv = elem }>\r\n          {\r\n            nlpDialog && nlpDialog.items.map(\r\n              (i, idx) => i && typeof idx === 'number' && idx >= this.state.showFrom && idx <= this.state.showTo &&\r\n                <div key={idx} styleName=\"NLPItem\" ref={ elem => elem && this.shownItems.push(elem) } >\r\n                  <span styleName=\"Circle\">{i.who}</span>\r\n                  <span styleName=\"Message\">{i.text}</span>\r\n                </div>\r\n            )\r\n          }\r\n          <div styleName=\"NLPInput\">\r\n            <textarea\r\n              spellCheck={false}\r\n              value={this.state.text}\r\n              onKeyPress={this.onPressEnter.bind(this)}\r\n              onChange={ (e: ChangeEvent<HTMLTextAreaElement>) => this.setState({ text: e.target.value }) }\r\n            />\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n```\r\n",
  "closed_by": {
    "login": "gsbelarus",
    "id": 5175764,
    "node_id": "MDQ6VXNlcjUxNzU3NjQ=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5175764?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gsbelarus",
    "html_url": "https://github.com/gsbelarus",
    "followers_url": "https://api.github.com/users/gsbelarus/followers",
    "following_url": "https://api.github.com/users/gsbelarus/following{/other_user}",
    "gists_url": "https://api.github.com/users/gsbelarus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gsbelarus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gsbelarus/subscriptions",
    "organizations_url": "https://api.github.com/users/gsbelarus/orgs",
    "repos_url": "https://api.github.com/users/gsbelarus/repos",
    "events_url": "https://api.github.com/users/gsbelarus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gsbelarus/received_events",
    "type": "User",
    "site_admin": false
  }
}
