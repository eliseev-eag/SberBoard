{
  "url": "https://api.github.com/repos/facebook/react/issues/6015",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/6015/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/6015/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/6015/events",
  "html_url": "https://github.com/facebook/react/issues/6015",
  "id": 132780467,
  "node_id": "MDU6SXNzdWUxMzI3ODA0Njc=",
  "number": 6015,
  "title": "Porting ReactPerf to the new DevTools API",
  "user": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 40929153,
      "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
      "name": "Type: Enhancement",
      "color": "84b6eb",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2016-02-10T18:28:41Z",
  "updated_at": "2016-02-28T14:30:29Z",
  "closed_at": "2016-02-16T19:04:06Z",
  "author_association": "MEMBER",
  "body": "There are a few concerns that I heard about `ReactPerf`, in the order of importance:\n- (1) It is gated by `__DEV__` but React Native wants to have a way to enable it in production builds and pass the accumulated info into systrace\n- (2) It is often broken by refactoring\n- (3) It appears generic but depends on specific module and method names\n- (4) It has some obscure bugs that are hard to fix because of the coupling\n- (5) The `console.table()` visualization is poor\n- (6) We are working on a new DevTools API so they should align\n\nIf I’m mistaken here, please let me know!\n\nIn #5306, we started introducing a new set of APIs for first-class instrumentation. It makes sense that we transition `ReactPerf` to the new API, and fix some of these issues while we’re at it.\n\nI talked to some people on the React Native about this. What I understand so far is:\n### ASAP\n- We want to remove `ReactPerf` function wrapping completely (addresses 2, somewhat mitigates overhead from fixing 1)\n- We want to create a devtool like `ReactDOMDebugTool`, e.g. `ReactPerfTool` (addresses 6)\n- Unlike `ReactDOMDebugTool`, `ReactPerfTool` will _not_ be gated by `__DEV__` (addresses 1)\n- `ReactPerfTool` will have `startMeasurement()` and `endMeasurement()` methods for profiling functions (addresses 1)\n- It can have more granular methods for specific parts of React lifecycle if needed (addresses 2, 3, 5)\n- Calls to `ReactPerfTool` will be gated by a runtime flag, e.g. `ReactPerfTool.isActive` (addresses 1)\n### In the Future\n- Rather than reach out into the profiled functions, `startMeasurement()` will accept arbitrary arguments (addresses 3)\n- We would separate generating user-meaningful data from its accumulation so it would be easy to test (addresses 4)\n- (Bonus) We can use a noop decorator + Babel plugin to insert `if (ReactPerfTool.isActive) ReactPerfTool.startMeasurement()` and `.endMeasurement()` calls (mitigates pain and potential breakage from addressing 1)\n- (Bonus) Rather than `console.table()` API we can provide a component that interprets that data and displays it in an overlay, both on web and native (addresses 5)\n\nThe decorator + Babel plugin part is the one I’m not sure about because it would involve complicating tooling. On the other hand, it will allow adding performance measurement to any functions in the codebase without risking having early `return`s, missing `endMeasurement()` calls, and similar breakage during refactorings.\n\nThe first actionable step, in my opinion, would be to remove the function wrapping and the `__DEV__` gate from the existing `ReactPerf`, and replace `measure()` with explicit `startMeasurement()` and `endMeasurement()` calls gated by `ReactPerf.isActive` wherever it is used.\n\nWe would still pass the function as an argument so we don’t have to rewrite everything at once, but this would give the RN team more freedom, and unlock future refactorings. We can also combine this with introducing decorator + Babel transform if this is the way we want to go, to avoid adding manual `startMeasurement()` and `endMeasurement()` calls all over the place.\n\nDoes this make sense? What have I missed?\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
