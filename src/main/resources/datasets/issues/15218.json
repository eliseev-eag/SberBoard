{
  "url": "https://api.github.com/repos/facebook/react/issues/15218",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15218/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15218/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15218/events",
  "html_url": "https://github.com/facebook/react/issues/15218",
  "id": 425684984,
  "node_id": "MDU6SXNzdWU0MjU2ODQ5ODQ=",
  "number": 15218,
  "title": "No stable way to get current state of component when using hooks",
  "user": {
    "login": "bvisness",
    "id": 4707402,
    "node_id": "MDQ6VXNlcjQ3MDc0MDI=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/4707402?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bvisness",
    "html_url": "https://github.com/bvisness",
    "followers_url": "https://api.github.com/users/bvisness/followers",
    "following_url": "https://api.github.com/users/bvisness/following{/other_user}",
    "gists_url": "https://api.github.com/users/bvisness/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bvisness/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bvisness/subscriptions",
    "organizations_url": "https://api.github.com/users/bvisness/orgs",
    "repos_url": "https://api.github.com/users/bvisness/repos",
    "events_url": "https://api.github.com/users/bvisness/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bvisness/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2019-03-26T22:57:06Z",
  "updated_at": "2019-03-27T00:01:33Z",
  "closed_at": "2019-03-26T23:35:34Z",
  "author_association": "NONE",
  "body": "Because the identity of the value returned by returned by the `useState` hook is not stable between renders, some tasks that were easy with class components are challenging or impossible with hooks.\r\n\r\nFor example, here is a simplified example of a component that can be clicked and dragged, written first as a class component and second as a functional component with hooks:\r\n\r\n```js\r\nclass DraggableClass extends React.Component {\r\n  state = {\r\n    isDragging: false,\r\n    position: [0, 0],\r\n  };\r\n\r\n  handleMouseMove = event => {\r\n    if (this.state.isDragging) {\r\n      const newX = this.state.position[0] + event.movementX;\r\n      const newY = this.state.position[1] + event.movementY;\r\n      this.setState({ position: [newX, newY] });\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.setState({ isDragging: false });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    window.addEventListener('mouseup', handleMouseUp);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('mousemove', handleMouseMove);\r\n    window.removeEventListener('mouseup', handleMouseUp);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          left: this.state.position[0],\r\n          top: this.state.position[1],\r\n        }}\r\n        onMouseDown={ () => this.setState({ isDragging: true }) }\r\n      >\r\n        Drag me!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction DraggableHooks() {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [position, setPosition] = useState([0, 0]);\r\n\r\n  useEffect(() => {\r\n    function handleMouseMove(event) {\r\n      if (isDragging) {\r\n        const newX = position[0] + event.movementX;\r\n        const newY = position[1] + event.movementY;\r\n        setPosition([newX, newY]);\r\n      }\r\n    }\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n\r\n    function handleMouseUp() {\r\n      setIsDragging(false);\r\n    }\r\n    window.addEventListener('mouseup', handleMouseUp);\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      window.removeEventListener('mouseup', handleMouseUp);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'absolute',\r\n        left: position[0],\r\n        top: position[1],\r\n      }}\r\n      onMouseDown={ () => setIsDragging(true) }\r\n    >\r\n      Drag me!\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nThe hooks version does not work because the `isDragging` and `position` variables within `handleMouseMove` are stuck with the old identities of both variables, and never see any new values. The observed behavior in this case is that `if (isDragging)` always evaluates to false, even though the value of isDragging in state does change.\r\n\r\nI suspect that the fix for this isn't as simple as \"just make the state value stable like `setState`\", since I'm guessing that would mess with async rendering. But perhaps something like the following could help:\r\n\r\n```js\r\n// This advanced hook would have a stable identity for both value and setValue.\r\nconst [value, setValue] = useStableState(defaultValue);\r\n\r\n// This would add a third return value to useState which has a stable identity.\r\nconst [value, setValue, getValue] = useState(defaultValue);\r\n```\r\n\r\nI am currently using something like the latter in my own code, using refs to persist values for me:\r\n\r\n```js\r\nexport function useStableState(defaultValue) {\r\n  const [value, setValue] = useState(defaultValue);\r\n  const valueRef = useRef(defaultValue);\r\n\r\n  return [\r\n    value,\r\n    newValue => {\r\n      if (typeof newValue === 'function') {\r\n        newValue = newValue(valueRef.current);\r\n      }\r\n\r\n      valueRef.current = newValue;\r\n      setValue(newValue);\r\n    },\r\n    () => valueRef.current,\r\n  ];\r\n}\r\n```",
  "closed_by": {
    "login": "aweary",
    "id": 6886061,
    "node_id": "MDQ6VXNlcjY4ODYwNjE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6886061?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aweary",
    "html_url": "https://github.com/aweary",
    "followers_url": "https://api.github.com/users/aweary/followers",
    "following_url": "https://api.github.com/users/aweary/following{/other_user}",
    "gists_url": "https://api.github.com/users/aweary/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aweary/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aweary/subscriptions",
    "organizations_url": "https://api.github.com/users/aweary/orgs",
    "repos_url": "https://api.github.com/users/aweary/repos",
    "events_url": "https://api.github.com/users/aweary/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aweary/received_events",
    "type": "User",
    "site_admin": false
  }
}
