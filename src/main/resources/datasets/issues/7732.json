{
  "url": "https://api.github.com/repos/facebook/react/issues/7732",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/7732/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/7732/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/7732/events",
  "html_url": "https://github.com/facebook/react/issues/7732",
  "id": 177011408,
  "node_id": "MDU6SXNzdWUxNzcwMTE0MDg=",
  "number": 7732,
  "title": "JSX: alternative syntax for passing JSX content to props",
  "user": {
    "login": "danielearwicker",
    "id": 365934,
    "node_id": "MDQ6VXNlcjM2NTkzNA==",
    "avatar_url": "https://avatars3.githubusercontent.com/u/365934?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/danielearwicker",
    "html_url": "https://github.com/danielearwicker",
    "followers_url": "https://api.github.com/users/danielearwicker/followers",
    "following_url": "https://api.github.com/users/danielearwicker/following{/other_user}",
    "gists_url": "https://api.github.com/users/danielearwicker/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/danielearwicker/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/danielearwicker/subscriptions",
    "organizations_url": "https://api.github.com/users/danielearwicker/orgs",
    "repos_url": "https://api.github.com/users/danielearwicker/repos",
    "events_url": "https://api.github.com/users/danielearwicker/events{/privacy}",
    "received_events_url": "https://api.github.com/users/danielearwicker/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2016-09-14T20:26:15Z",
  "updated_at": "2016-09-14T22:34:58Z",
  "closed_at": "2016-09-14T22:25:32Z",
  "author_association": "NONE",
  "body": "Silly (but succinct) example:\n\n``` js\nconst If = ({test, yes, no}) => test ? yes : no;\n```\n\nToday we can say this:\n\n``` jsx\nconst eg1 = (\n    <If test={allowed}\n        yes={\n            <button>Launch missiles</button>\n        }\n        no={\n            <span>Access denied</span>\n        } />\n);\n```\n\nProposal is to support this alternative, inspired by XAML:\n\n``` jsx\nconst eg2 = (\n    <If test={allowed}>\n        <If.yes>\n            <button>Launch missiles</button>\n        </If.yes>\n        <If.no>\n            <span>Access denied</span>\n        </If.no>\n    </If>\n)\n```\n\nIn short, if an element name contains `.` and the first part is the parent element's name, the second part is a prop name and the content becomes the value passed to that prop. Nothing else changes - it's merely an alternative way to specify the prop value.\n\nIt remains consistent with XML, where `.` is allowed; indeed, XAML was forced to do this in order to be an XML dialect and yet be flexible about how properties are specified on objects. JSX doesn't have that challenge, nevertheless in more complex examples it would lessen brain- and eye-strain to keep the structure of the tree obvious by staying in JSX syntax instead of `{ ... }` blocks stretching across many lines, and with a few layers of nesting alternating syntaxes.\n\nAnd a further enhancement, say we have:\n\n``` jsx\nconst For = ({items, each}) => <div>{items.map(each)} </div>\n```\n\nToday we can say this:\n\n``` jsx\nconst eg3 = (\n    <ul>\n        <For items={things} \n            each={item => (\n                <li>{item}</li>\n            )} />\n    </ul>\n);\n```\n\nBut how about:\n\n``` jsx\nconst eg4 = (\n    <ul>\n        <For items={things}>\n            <For.each item>\n                <li>{item}</li>\n            </For.each>\n        </For>\n    </ul>\n);\n```\n\nThat is, in these \"prop elements\", which have no other purpose for their attributes, they can optionally specify valueless attributes. These become the parameter names of a function, and that function is then is passed to the prop. (Once again, it maps exactly to the previous example.) If no attributes are specified, as in `eg2`, then there is nothing variable for the content to depend on and hence it can just be a simple value rather than a function returning a value.\n\nI found a prior issue https://github.com/facebook/react/issues/848 that seemed to be asking for something similar but wasn't as precisely mapped to existing concepts. Here I'm not talking about anything that changes the model, just a way of staying in JSX and reducing the mental overload of switching syntaxes when writing/reading trees.\n",
  "closed_by": {
    "login": "zpao",
    "id": 8445,
    "node_id": "MDQ6VXNlcjg0NDU=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/8445?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zpao",
    "html_url": "https://github.com/zpao",
    "followers_url": "https://api.github.com/users/zpao/followers",
    "following_url": "https://api.github.com/users/zpao/following{/other_user}",
    "gists_url": "https://api.github.com/users/zpao/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zpao/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zpao/subscriptions",
    "organizations_url": "https://api.github.com/users/zpao/orgs",
    "repos_url": "https://api.github.com/users/zpao/repos",
    "events_url": "https://api.github.com/users/zpao/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zpao/received_events",
    "type": "User",
    "site_admin": false
  }
}
