{
  "url": "https://api.github.com/repos/facebook/react/issues/11809",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11809/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11809/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11809/events",
  "html_url": "https://github.com/facebook/react/issues/11809",
  "id": 280411871,
  "node_id": "MDU6SXNzdWUyODA0MTE4NzE=",
  "number": 11809,
  "title": "Feature request: Global state at the render/hydrate level",
  "user": {
    "login": "johnnysprinkles",
    "id": 32530010,
    "node_id": "MDQ6VXNlcjMyNTMwMDEw",
    "avatar_url": "https://avatars1.githubusercontent.com/u/32530010?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/johnnysprinkles",
    "html_url": "https://github.com/johnnysprinkles",
    "followers_url": "https://api.github.com/users/johnnysprinkles/followers",
    "following_url": "https://api.github.com/users/johnnysprinkles/following{/other_user}",
    "gists_url": "https://api.github.com/users/johnnysprinkles/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/johnnysprinkles/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/johnnysprinkles/subscriptions",
    "organizations_url": "https://api.github.com/users/johnnysprinkles/orgs",
    "repos_url": "https://api.github.com/users/johnnysprinkles/repos",
    "events_url": "https://api.github.com/users/johnnysprinkles/events{/privacy}",
    "received_events_url": "https://api.github.com/users/johnnysprinkles/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 7,
  "created_at": "2017-12-08T08:31:37Z",
  "updated_at": "2018-01-06T03:07:08Z",
  "closed_at": "2018-01-06T03:07:08Z",
  "author_association": "NONE",
  "body": "This is a feature request. It relates to https://discuss.reactjs.org/t/suggestion-for-global-context/9035\r\n\r\nThis has been a pain point for me, and I'm sure we can do better. The issue: How to have some state available to all components without passing everything down on props through the component tree.\r\n\r\nI'm speaking about global state. So why not use context? I have a couple of issue with it.\r\n\r\n1. It's not the root component's job to receive and disseminate state. The root component is just some component. It shouldn't care if it's root or not. Maybe you have (example using Express):\r\n\r\n    `res.render('homepage.jsx', {});`\r\n\r\nBut some other page might just as well have:\r\n\r\n    res.render('otherpage.jsx', {}) where otherpage has:\r\n\r\n    <div>\r\n      <Something />\r\n      <Homepage />\r\n    </div>\r\n\r\nComponents can be composed however you like, they shouldn't care what depth they're at.\r\n\r\n2. Above is talking about a multipage app. The thinking around React seems to be so skewed toward to the special case of Single Page App. SPA is sometimes the right choice. If you're Google Maps it's clearly right. If you're something broader in scope like Amazon.com it's clearly not. The general case is much more interesting to solve.\r\n\r\n3. Having every root component wrapped in some `<Provider>` that publishes context downwards, and every non-root component wrapped in some \"receiver\" higher level component that declares context is just boilerplate. It's not expressive, it's bookkeeping.\r\n\r\n4. Alternatives: There aren't any as far as I know. Each component only knows about the props (and possibly context) passed in, it doesn't have any handle on data for the current render() call. Simply importing global state through CommonJS or ES6 modules is impossible on the serverside for anything request scoped (like query params, route params, cookies, headers, anything generated by middleware based on these things).\r\n\r\n-- PROPOSAL --\r\n\r\nWhy not just handle global state at a higher level than props passed component to component? Why not extend ReactDOM.render to take a 4th argument for global context? It would just make everyone's life easier. Don't even worry about changes firing componentWillReceiveProps, at least as a first version.\r\n\r\nThink of it as analogous to Express and the \"req\" object that's passed around. One should always have access to some \"per request\" object. So many things would be useful to put in there (authenticated user, geolocation, \"store\" from Redux, query and route params, etc, etc).\r\n\r\nIt would look like:\r\n\r\n    ReactDOM.render(rootComponent, someDiv, callback, {... request specific data ...})\r\n\r\nWhere request specific data might have things that are truly request specific and also things that are the same across requests. The latter can be done with imports but it's a bit messy -- you end up with code like:\r\n\r\n    if (typeof window != 'undefined') {\r\n      // Client, get value from window object\r\n    } else {\r\n      // Server, get value from filesystem or wherever\r\n    }\r\n\r\nJust having global data available to all components in the tree simplifies things a lot. Don't you think?\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
