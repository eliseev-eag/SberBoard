{
  "url": "https://api.github.com/repos/facebook/react/issues/3258",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/3258/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/3258/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/3258/events",
  "html_url": "https://github.com/facebook/react/issues/3258",
  "id": 58832332,
  "node_id": "MDU6SXNzdWU1ODgzMjMzMg==",
  "number": 3258,
  "title": "Refs passed along with SyntheticMouseEvent and reactid?",
  "user": {
    "login": "MoonTahoe",
    "id": 5952082,
    "node_id": "MDQ6VXNlcjU5NTIwODI=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/5952082?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MoonTahoe",
    "html_url": "https://github.com/MoonTahoe",
    "followers_url": "https://api.github.com/users/MoonTahoe/followers",
    "following_url": "https://api.github.com/users/MoonTahoe/following{/other_user}",
    "gists_url": "https://api.github.com/users/MoonTahoe/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MoonTahoe/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MoonTahoe/subscriptions",
    "organizations_url": "https://api.github.com/users/MoonTahoe/orgs",
    "repos_url": "https://api.github.com/users/MoonTahoe/repos",
    "events_url": "https://api.github.com/users/MoonTahoe/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MoonTahoe/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2015-02-25T00:47:33Z",
  "updated_at": "2015-02-26T23:04:17Z",
  "closed_at": "2015-02-26T23:04:17Z",
  "author_association": "NONE",
  "body": "I am not sure which way is the best approach for the following issue:\n### Dot\n\nconsider this React Class...\n\n``` javascript\n      var Dot = React.createClass({\n        getInitialState: function() {\n          return { \n            selected: false\n          };\n        },\n        render: function() {    \n          return   <circle id={this.props.ref}\n                    cx={this.props.x} \n                    cy={this.props.y} \n                    r={window.innerWidth/20} \n                    fill={this.props.color}\n                    stroke={ this.state.selected ? 'red' : '' }\n                    strokeWidth={ this.state.selected ? 4 : 0 }\n                    strokeDasharray={ this.state.selected ? '5' : '' }\n                    onClick={this.props.onSelect} />;\n        } \n      }); \n```\n### Whiteboard\n\nWhen I use the dot in the whiteboard, how do I know which dot was selected?  When I click the circle the **SyntheticMouseEvent** is returned and **e.target** refers to the **<circle>**.  How do I reference the Dot?\n\n``` javascript\n     var Whiteboard = React.createClass({\n        select: function(e) {\n\n             e.target; //  This is the <circle>\n\n             //\n             //  How can I refrence the Dot?  A Ref?\n             //\n\n\n        },\n        render: function() {\n          return <svg width={window.innerWidth} height={window.innerHeight}>\n\n              <Dot ref=\"myDot\"\n                   color=\"yellow\"\n                   x={window.innerWidth/2 + 100} \n                   y={window.innerHeight/2}\n                   onSelect={this.select} />\n\n              <Dot ref=\"yourDot\"\n                   color=\"blue\"\n                   x={window.innerWidth/2}  \n                   y={window.innerHeight/2}\n                   onSelect={this.select} />\n\n            </svg>\n        }\n      }); \n```\n### This feels wrong\n\nThis seems dirty\n\n``` javascript\n        select: function(e) {  \n           this.refs.myDot.setState({ selected: this.refs.myDot.getDOMNode() === e.target });\n           this.refs.yourDot.setState({ selected: this.refs.yourDot.getDOMNode() === e.target });\n        }\n```\n### This feels better\n\nThis feels like a better solution...  I have a [sample on jsbin](http://jsbin.com/nakod/2/edit), of this approach.\n\n``` javascript\n      var Dot = React.createClass({\n        getInitialState: function() {\n          return { \n            selected: false\n          };\n        },\n        select: function(e) {\n          this.props.onSelect(e, this);\n        },\n        render: function() {    \n          return <circle id={this.props.ref}\n                    cx={this.props.x} \n                    cy={this.props.y} \n                    r={window.innerWidth/20} \n                    fill={this.props.color}\n                    stroke={ this.state.selected ? 'red' : '' }\n                    strokeWidth={ this.state.selected ? 4 : 0 }\n                    strokeDasharray={ this.state.selected ? '5' : '' }\n                    onClick={this.select} />\n        } \n      }); \n\n      var Whiteboard = React.createClass({\n        deselect: function() {\n          if (this.selected) {\n            this.selected.setState({ selected: false });\n          }\n        },\n        select: function(e, dot) { \n           this.deselect();\n           dot.setState({ selected: true });\n           this.selected = dot;\n        },\n        render: function() {\n          return <svg width={window.innerWidth} height={window.innerHeight}>\n\n              <Dot ref=\"myDot\"\n                   color=\"yellow\"\n                   x={window.innerWidth/2 + 100} \n                   y={window.innerHeight/2}\n                   onSelect={this.select} />\n\n              <Dot ref=\"yourDot\"\n                   color=\"blue\"\n                   x={window.innerWidth/2}  \n                   y={window.innerHeight/2}\n                   onSelect={this.select} />\n\n            </svg>\n\n        }\n      }); \n\n      React.render(<Whiteboard />, document.body);\n```\n### What is the best solution\n\nAre any of these solutions better than one another.  Would it make sense to pass a **ref** along with the react id to the event callback?\n\n``` javascript\n        select: function(e, id, ref) {  \n           this.deselect();\n           this.selected = this.refs[ref];\n           this.selected.setState({ selected: true });\n        }\n```\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
