{
  "url": "https://api.github.com/repos/facebook/react/issues/15027",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15027/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15027/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15027/events",
  "html_url": "https://github.com/facebook/react/issues/15027",
  "id": 417560447,
  "node_id": "MDU6SXNzdWU0MTc1NjA0NDc=",
  "number": 15027,
  "title": "Gotcha when using state hooks and async callbacks",
  "user": {
    "login": "EthanRutherford",
    "id": 5589147,
    "node_id": "MDQ6VXNlcjU1ODkxNDc=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/5589147?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/EthanRutherford",
    "html_url": "https://github.com/EthanRutherford",
    "followers_url": "https://api.github.com/users/EthanRutherford/followers",
    "following_url": "https://api.github.com/users/EthanRutherford/following{/other_user}",
    "gists_url": "https://api.github.com/users/EthanRutherford/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/EthanRutherford/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/EthanRutherford/subscriptions",
    "organizations_url": "https://api.github.com/users/EthanRutherford/orgs",
    "repos_url": "https://api.github.com/users/EthanRutherford/repos",
    "events_url": "https://api.github.com/users/EthanRutherford/events{/privacy}",
    "received_events_url": "https://api.github.com/users/EthanRutherford/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 3,
  "created_at": "2019-03-06T00:06:37Z",
  "updated_at": "2019-03-06T18:12:57Z",
  "closed_at": "2019-03-06T18:12:56Z",
  "author_association": "NONE",
  "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nMaybe not exactly a bug, but it certainly was surprising behavior when I ran into it.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using a `useState` hook, it is preferable (and even recommended in the docs about hooks) to use an individual `useState` hook for each atomic piece of state your component may contain.\r\n\r\nThis is all well and good, except that `setState`s are not batched in async code. I was writing a component that used a few different pieces of state, but had some pieces which all needed to be set at more or less the same time, and as a response to an asynchronous action.\r\n\r\nI set both pieces of state, and when I went to test it the whole page crashed. It then took me several minutes of debugging to realize why not all of my state was set, despite my handler looking sound: the component was rerendered *during* the `setState` call.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis is a contrived example, but you can imagine how a real asynchronous method like a web request or other promise-based api could easily lead to the issue: https://codesandbox.io/s/zk1kwlmp4p\r\n\r\nIn my exact case, `a` was actually a `currentPage` string, and `b` was an object which a child component needed in order to render, which was fetched asynchronously and passed down.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm not here to say that this is necessarily a bug per se, since this has also been true for class components for a long time and hasn't really been an issue. I've been working in react for two years and have never had a problem with class components and async code, for example.\r\n\r\nI'm also well aware of possible workarounds, like storing both fields in the same state object, or reordering the `setState`s such that the render doesn't switch to the new \"mode\" until the required state has been set. The first simple seems like it's non-idiomatic for hooks, and as for the second, one could imagine that it would become complicated once there are more modes, and the inter-dependencies between different pieces of state get messier.\r\nI could also use the unstable batched updates api, but I don't like the idea of depending on an unstable api, especially in code where I can't easily insulate myself from breaking changes in the api down the line.\r\n\r\nI'd just like to point out that this was what to me seemed like a very natural way to write the component, and that the crash caught me entirely by surprise.\r\n\r\nI know that it has been mentioned elsewhere that react may move to always batching `setState`s, and I think this gotcha may increase the impetus to go ahead and do so.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAny version since hooks were released, independent of browser or operating system.\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
