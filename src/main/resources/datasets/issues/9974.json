{
  "url": "https://api.github.com/repos/facebook/react/issues/9974",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/9974/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/9974/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/9974/events",
  "html_url": "https://github.com/facebook/react/issues/9974",
  "id": 236053117,
  "node_id": "MDU6SXNzdWUyMzYwNTMxMTc=",
  "number": 9974,
  "title": "Error: addComponentAsRefTo(...) (ES6 class)",
  "user": {
    "login": "dcramer",
    "id": 23610,
    "node_id": "MDQ6VXNlcjIzNjEw",
    "avatar_url": "https://avatars0.githubusercontent.com/u/23610?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dcramer",
    "html_url": "https://github.com/dcramer",
    "followers_url": "https://api.github.com/users/dcramer/followers",
    "following_url": "https://api.github.com/users/dcramer/following{/other_user}",
    "gists_url": "https://api.github.com/users/dcramer/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dcramer/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dcramer/subscriptions",
    "organizations_url": "https://api.github.com/users/dcramer/orgs",
    "repos_url": "https://api.github.com/users/dcramer/repos",
    "events_url": "https://api.github.com/users/dcramer/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dcramer/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-06-15T01:31:46Z",
  "updated_at": "2017-06-16T19:33:14Z",
  "closed_at": "2017-06-15T10:11:59Z",
  "author_association": "NONE",
  "body": "This is React 15.3.2.\r\n\r\nThis is a bit complicated to report as I dont have a super isolated use case, our application is extremely complex, I can't confirm on the latest of React, and I can't 100% confirm it's React's fault. So if any of thats unacceptable feel free to close.\r\n\r\nHere's the general layout of things:\r\n\r\n- https://github.com/getsentry/sentry exports a bunch of JavaScript (including React) via webpack[1]\r\n- a private repo loads that code and extends it. It imports things like React from window.React using webpack's external feature[2]\r\n- we're attempting to use React.Compnent to provide a base class for some complex functionality. This worked fine when using React.createClass\r\n- I'm **fairly** confident there's not two copies of React loading on the page. It's really hard to understand webpack internals, but we're only loading the React that comes from window.React as I've investigated per webpack's compiled output. It does however do some odd referencing internally.\r\n- This only happens when specifying an attribute with some static HTML, with specific HTML, but also not that specific\r\n- The reference error is unrelated to the generated output, and exists elsewhere as a parent element to the generated children.\r\n\r\nSo first, here's the core issue in our case:\r\n\r\n```jsx\r\n<a foo={this.tooltip(point)}>\r\n```\r\n\r\nThe output of tooltip is raw HTML:\r\n\r\n```jsx\r\n  tooltip(point) {\r\n    let {projected, totals, ts} = point;\r\n    let otherDropped =\r\n      totals.dropped.total - totals.dropped.overQuota - totals.dropped.spikeProtection;\r\n    return ReactDOMServer.renderToStaticMarkup(\r\n      <div className=\"usage-tooltip\">\r\n        <div className=\"time-label\">\r\n          {moment(ts * 1000).format('LL')}\r\n          {projected ? <span> &mdash; <em>projected</em></span> : ''}\r\n        </div>\r\n        <dl className=\"usage\">\r\n          <dt>Events</dt>\r\n          <dd>{totals.total.toLocaleString()}</dd>\r\n          <dt>Accepted</dt>\r\n          <dd>{totals.accepted.toLocaleString()}</dd>\r\n          <dt>Dropped</dt>\r\n          <dd>{totals.dropped.total.toLocaleString()}</dd>\r\n          <dt className=\"sub\">Over Quota</dt>\r\n          <dd className=\"sub\">{totals.dropped.overQuota.toLocaleString()}</dd>\r\n          <dt className=\"sub\">Spike Protection</dt>\r\n          <dd className=\"sub\">{totals.dropped.spikeProtection.toLocaleString()}</dd>\r\n          <dt className=\"sub\">Other</dt>\r\n          <dd className=\"sub\">{otherDropped.toLocaleString()}</dd>\r\n        </dl>\r\n      </div>\r\n    );\r\n  }\r\n```\r\n\r\nEverything works fine if I change the above to:\r\n\r\n```jsx\r\nreturn '<div class=\"usage-tooltip\"><div class=\"time-label\">adfasdf</div><dl class=\"usage\"></dl></div>';\r\n```\r\n\r\nBut if I return the result of the stripped down above, it once again errors:\r\n\r\n```jsx\r\n    return ReactDOMServer.renderToStaticMarkup(\r\n      <div className=\"usage-tooltip\">\r\n        <div className=\"time-label\">adfasdf\r\n        </div>\r\n        <dl className=\"usage\">\r\n        </dl>\r\n      </div>\r\n    );\r\n```\r\n\r\nIf I dump console.log([my version of that text] === generateHtmlViaReactDOMServer) I get true. If I do '' + [output of DOMServer] i still receive the same ref error.\r\n\r\nI'm literally baffled at this point as to what's going on. This might be something obvious, but I've been debugging this for the last few hours to no avail.\r\n\r\n[1] sentry's exports\r\n\r\n```jsx\r\nexport default {\r\n  React: React,\r\n  ReactDOM: {\r\n    findDOMNode: ReactDOM.findDOMNode,\r\n    render: ReactDOM.render\r\n  },\r\n  ReactDOMServer: {\r\n    renderToStaticMarkup: renderToStaticMarkup\r\n  },\r\n```\r\n[2] sentry.io's externals config\r\n\r\n```jsx\r\nvar config = {\r\n  externals: {\r\n    'react': 'React',\r\n    'react-dom': 'ReactDOM',\r\n    'react-dom/server': 'ReactDOMServer',\r\n    // ...\r\n  },\r\n```\r\n\r\nI originally thought this might have been related to bootstrap's tooltips (since thats what this is for), but I removed anything relevant to that and still triggered it.\r\n\r\n--- full source for the component, though clearly won't work on its own ----\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport jQuery from 'jquery';\r\nimport {displayNumber, getSlot} from '../../utils/billing';\r\nimport {utils} from 'sentry';\r\nimport moment from 'moment';\r\n\r\nlet gutterSize = 30;\r\nlet leftGutter = 125;\r\nlet graphPadding = 5;\r\n\r\nclass UsageChart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    ['bar', 'line', 'onClick', 'onLineDrag', 'onLineRelease', 'onLineSelect', 'onResize', 'tooltip'].forEach(n => {\r\n      this[n] = this[n].bind(this);\r\n    });\r\n    this.state = {\r\n      width: 500,\r\n      height: 200\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.onResize);\r\n    this.onResize();\r\n    // this.attachTooltips();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.onResize);\r\n    this.removeTooltips();\r\n    jQuery(ReactDOM.findDOMNode(this)).unbind();\r\n  }\r\n\r\n  attachTooltips() {\r\n    jQuery(ReactDOM.findDOMNode(this)).tooltip({\r\n      container: 'body',\r\n      selector: '.tip',\r\n    });\r\n  }\r\n\r\n  removeTooltips() {\r\n    jQuery(ReactDOM.findDOMNode(this))\r\n      .tooltip('destroy') // destroy tooltips on parent ...\r\n      .find('.tip')\r\n      .tooltip('destroy'); // ... and descendents\r\n  }\r\n\r\n  tallestThing() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  scale() {\r\n    return (this.state.height - gutterSize) * 0.78 / this.tallestThing();\r\n  }\r\n\r\n  flip(h) {\r\n    return this.state.height - gutterSize - h;\r\n  }\r\n\r\n  distance(a, b) {\r\n    return Math.abs(a - b);\r\n  }\r\n\r\n  onResize() {\r\n    if (!this.refs.svgElement)\r\n      return;\r\n    this.setState({\r\n      width: this.refs.svgElement.getBoundingClientRect().width\r\n    });\r\n  }\r\n\r\n  onLineSelect(e) { }\r\n\r\n  onLineRelease(e) { }\r\n\r\n  onLineDrag(e) { }\r\n\r\n  onClick(e) { }\r\n\r\n  tooltip(point) {\r\n    let {projected, totals, ts} = point;\r\n    let otherDropped =\r\n      totals.dropped.total - totals.dropped.overQuota - totals.dropped.spikeProtection;\r\n    return ReactDOMServer.renderToStaticMarkup(\r\n      <div className=\"usage-tooltip\">\r\n        <div className=\"time-label\">\r\n          {moment(ts * 1000).format('LL')}\r\n          {projected ? <span> &mdash; <em>projected</em></span> : ''}\r\n        </div>\r\n        <dl className=\"usage\">\r\n          <dt>Events</dt>\r\n          <dd>{totals.total.toLocaleString()}</dd>\r\n          <dt>Accepted</dt>\r\n          <dd>{totals.accepted.toLocaleString()}</dd>\r\n          <dt>Dropped</dt>\r\n          <dd>{totals.dropped.total.toLocaleString()}</dd>\r\n          <dt className=\"sub\">Over Quota</dt>\r\n          <dd className=\"sub\">{totals.dropped.overQuota.toLocaleString()}</dd>\r\n          <dt className=\"sub\">Spike Protection</dt>\r\n          <dd className=\"sub\">{totals.dropped.spikeProtection.toLocaleString()}</dd>\r\n          <dt className=\"sub\">Other</dt>\r\n          <dd className=\"sub\">{otherDropped.toLocaleString()}</dd>\r\n        </dl>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBars(point) {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  bar(point, i, a) {\r\n    // TODO(MAX): these are disabled < 767px wide because of zoom screwyness\r\n    let zoom = window.matchMedia('(max-width: 767px)').matches ? 0.85 : 1;\r\n    if (!zoom) return null;\r\n\r\n    let {projected, totals} = point;\r\n\r\n    // XXX(dcramer): i ahve no idea what sQ means\r\n    let minBarHeight = 3;\r\n    let baseScale = this.scale();\r\n    if (!(baseScale >= 0)) {\r\n      throw new Error('Invalid base scale');\r\n    }\r\n    let totalScale = Math.max(\r\n      (totals.accepted + totals.dropped.total) * baseScale,\r\n      minBarHeight);\r\n\r\n    let width = this.state.width - leftGutter - graphPadding * 2;\r\n    let bwidth = width / a.length;\r\n\r\n    let tooltip = (\r\n      <foreignObject\r\n        x={(leftGutter + graphPadding + bwidth * i) * zoom}\r\n        y={this.flip(totalScale) * zoom}\r\n        width={bwidth * zoom}\r\n        height={totalScale * zoom}>\r\n        <div style={{position: 'relative'}}>\r\n          <a className=\"tip\" data-title={this.tooltip(point)} data-html=\"true\">\r\n            <div style={{height: totalScale * zoom}} />\r\n          </a>\r\n        </div>\r\n      </foreignObject>\r\n    );\r\n\r\n    return (\r\n      <g key={point.ts}>\r\n        {tooltip}\r\n        {this.getBars(point).map((r, n) => {\r\n          if (!(r.y >= 0)) {\r\n            throw new Error('Invalid point');\r\n          }\r\n          let scale = Math.max(r.y * baseScale, minBarHeight);\r\n          // if (projected) {\r\n          //   scale = Math.max(scale, Math.min(sQ, totalScale), minBarHeight);\r\n          // }\r\n          return (\r\n            <rect\r\n              key={n}\r\n              x={leftGutter + graphPadding + bwidth * i}\r\n              y={this.flip(scale)}\r\n              className={'chart-bar over ' + (projected ? 'projected' : '')}\r\n              width={bwidth * 0.8}\r\n              height={scale}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n    );\r\n  }\r\n\r\n  getLines() {\r\n    return [];\r\n  }\r\n\r\n  lines() {\r\n    return (\r\n      <g>\r\n        {this.getLines().map(l => {\r\n          if (!(l.quota >= 0)) {\r\n            throw new Error('Invalid line');\r\n          }\r\n          return this.line({\r\n            name: l.name,\r\n            quota: l.quota,\r\n            height: l.quota * this.scale(),\r\n            demandHeight: l.demand * this.scale(),\r\n            drop: l.drop,\r\n            canSelect: l.canSelect || false,\r\n          });\r\n        })}\r\n      </g>\r\n    );\r\n  }\r\n\r\n  line(props) {\r\n    let className = 'line ' + 'line-' + props.name + ' ' + props.name;\r\n    let cursor = props.canSelect ? 'ns-resize' : 'inherit';\r\n\r\n    return (\r\n      <g\r\n        key={props.name}\r\n        className=\"line-group\"\r\n        onMouseDown={props.canSelect && this.onLineSelect}\r\n        style={{\r\n          cursor,\r\n          transform: `translate(0px,${this.flip(props.height)}px)`\r\n        }}>\r\n        <rect x=\"0\" y=\"-7\" width=\"100%\" height=\"14\" fill=\"rgba(0,0,0,0.001)\" />\r\n        <line\r\n          x1={leftGutter * 0.1}\r\n          y1=\"0\"\r\n          x2={this.state.width}\r\n          y2=\"0\"\r\n          className={'rule ' + props.name}\r\n        />\r\n        <rect\r\n          x={leftGutter * 0.1}\r\n          y=\"-10px\"\r\n          rx=\"1px\"\r\n          ry=\"1px\"\r\n          width={leftGutter * 0.8}\r\n          height=\"20\"\r\n          className={className + ' line-box'}\r\n        />\r\n        <rect\r\n          className={className + '-demand-bar'}\r\n          x={leftGutter}\r\n          y={-(props.demandHeight || 0)}\r\n          width={this.state.width - leftGutter}\r\n          height={props.demandHeight || 0}\r\n        />\r\n        <text\r\n          x={leftGutter * 0.5}\r\n          y=\"5px\"\r\n          className={'line-label ' + props.name}\r\n          style={{\r\n            textAnchor: 'middle',\r\n            fill: 'white'\r\n          }}>\r\n          {`${props.name} ${displayNumber(props.quota)}`}\r\n        </text>\r\n      </g>\r\n    );\r\n  }\r\n\r\n  slotsRules() {\r\n    let tt = this.tallestThing();\r\n\r\n    let slotOptions = [{events: 5000}, {events: 15000}, {events: 25000}].concat(\r\n      this.props.slots\r\n    );\r\n\r\n    let rules = [0.2, 0.5, 0.8].map((p, i) => {\r\n      let s = slotOptions[getSlot(tt * p, slotOptions)];\r\n\r\n      if (!s) {\r\n        return <g key={i} />;\r\n      }\r\n\r\n      let y = this.flip(s.events * this.scale());\r\n      return (\r\n        <g key={i}>\r\n          <line\r\n            key={s.events}\r\n            x1=\"0\"\r\n            y1={y}\r\n            x2={this.state.width}\r\n            y2={y}\r\n            className=\"rule\"\r\n          />\r\n          <rect\r\n            x={leftGutter * 0.35}\r\n            y={y - 10}\r\n            height=\"20px\"\r\n            width={leftGutter * 0.3}\r\n            style={{fill: '#fafafa'}}\r\n          />\r\n          <text\r\n            x={leftGutter * 0.5}\r\n            y={y + 5}\r\n            className=\"rule-label\"\r\n            style={{\r\n              textAnchor: 'middle'\r\n            }}>\r\n            {displayNumber(s.events)}\r\n          </text>\r\n        </g>\r\n      );\r\n    });\r\n\r\n    return <g>{rules}</g>;\r\n  }\r\n\r\n  getLegendItems() {\r\n    throw new Error('Not Implemented');\r\n  }\r\n\r\n  legend(props) {\r\n    let size = 18;\r\n    let r = 4;\r\n    let items = this.getLegendItems();\r\n    let sum = 0;\r\n    let offsets = items.map(n => {\r\n      let last = sum;\r\n      sum += n.length * 7 + size * 2;\r\n      return last;\r\n    });\r\n\r\n    let blots = items.map((name, i) => (\r\n      <g\r\n        className={name}\r\n        key={i}\r\n        style={{\r\n          transform: `translate(${offsets[i] * 1}px, 0px)`\r\n        }}>\r\n        <rect rx={r} ry={r} y=\"0\" x=\"0\" width={size} height={size} />\r\n        <text x={size + 5} y={size - 5}> {name} </text>\r\n      </g>\r\n    ));\r\n\r\n    let midpoint = leftGutter + (this.state.width - leftGutter - sum) / 2;\r\n    return (\r\n      <g\r\n        className=\"legend\"\r\n        style={{\r\n          transform: `translate(${midpoint}px, ${this.state.height - (gutterSize + size) / 2}px)`\r\n        }}>\r\n        {blots}\r\n      </g>\r\n    );\r\n  }\r\n\r\n  bars() {\r\n    let usageData = this.props.usageData;\r\n    let totals = {\r\n      total: 0,\r\n      accepted: 0,\r\n      dropped: {\r\n        total: 0,\r\n        overQuota: 0,\r\n        spikeProtection: 0\r\n      },\r\n      filtered: 0\r\n    };\r\n    return usageData\r\n      .map(p => {\r\n        totals.total += p.total;\r\n        totals.accepted += p.accepted;\r\n        totals.dropped.total += p.dropped.total;\r\n        totals.dropped.overQuota += p.dropped.overQuota;\r\n        totals.dropped.spikeProtection += p.dropped.spikeProtection;\r\n        totals.filtered += p.filtered;\r\n        return {\r\n          ...p,\r\n          totals: {\r\n            ...totals,\r\n            dropped: {...totals.dropped},\r\n          },\r\n          ts: p.ts\r\n        };\r\n      })\r\n      .map(this.bar);\r\n  }\r\n\r\n  renderChart() {\r\n    let usageData = this.props.usageData;\r\n\r\n    let blur = false;\r\n    if (usageData.length === 0) {\r\n      blur = true;\r\n    }\r\n\r\n    let realData = usageData.filter(p => !p.projected);\r\n    let nRealDataPoints = realData.length;\r\n\r\n    let todayX =\r\n      leftGutter + nRealDataPoints * ((this.state.width - leftGutter) / usageData.length);\r\n\r\n    let trialX = 100000;\r\n    if (this.props.trialEnd) {\r\n      let trialDays =\r\n        (new Date(this.props.trialEnd).getTime() / 1000 - usageData[0].ts) / 3600 / 24;\r\n      trialX =\r\n        leftGutter + trialDays * ((this.state.width - leftGutter) / usageData.length);\r\n    }\r\n\r\n    return (\r\n      <div className=\"usage-chart-container\">\r\n        <div\r\n          id=\"usage-chart\"\r\n          onMouseMove={this.onLineDrag}\r\n          onMouseUp={this.onLineRelease}\r\n          onMouseLeave={this.onLineRelease}>\r\n          {blur &&\r\n            <div className=\"blur-disclaimer\">\r\n              <h5>We don't have enough data to be useful quite yet.</h5>\r\n              <p>\r\n                Once we do, we'll show you a graphical overview of your usage and capacity here\r\n              </p>\r\n            </div>}\r\n          <svg\r\n            ref=\"svgElement\"\r\n            width={this.state.width}\r\n            height={this.state.height}\r\n            onClick={this.onClick}\r\n            className={blur ? ' blur' : ''}>\r\n            <pattern\r\n              id=\"diagonalHatch\"\r\n              width=\"5\"\r\n              height=\"5\"\r\n              patternTransform=\"rotate(45 0 0)\"\r\n              patternUnits=\"userSpaceOnUse\">\r\n              <rect\r\n                x=\"0\"\r\n                y=\"0\"\r\n                width=\"5\"\r\n                height=\"5\"\r\n                style={{fill: 'rgba(93,144,201,0.1)'}}\r\n              />\r\n              <line\r\n                x1=\"0\"\r\n                y1=\"0\"\r\n                x2=\"0\"\r\n                y2=\"5\"\r\n                style={{stroke: '#55f', strokeWidth: 0.1}}\r\n              />\r\n            </pattern>\r\n            <rect\r\n              x=\"0\"\r\n              y=\"0\"\r\n              width={leftGutter}\r\n              height={this.state.height}\r\n              style={{fill: 'rgba(144,144,144,0.05)'}}\r\n            />\r\n            <line\r\n              x1=\"0\"\r\n              y1={this.state.height - gutterSize}\r\n              x2={this.state.width}\r\n              y2={this.state.height - gutterSize}\r\n              className=\"rule\"\r\n            />\r\n            <line\r\n              x1={leftGutter}\r\n              y1={0}\r\n              x2={leftGutter}\r\n              y2={this.state.height}\r\n              className=\"rule\"\r\n            />\r\n\r\n            {this.slotsRules()}\r\n\r\n            <line\r\n              x1={todayX}\r\n              y1={0}\r\n              x2={todayX}\r\n              y2={this.state.height - gutterSize}\r\n              className=\"rule-label\"\r\n            />\r\n            <rect x={todayX} y=\"3\" width={2} height={16} className=\"rule-label\" />\r\n            <text\r\n              x={todayX + (trialX - todayX < 60 ? -50 : 6)}\r\n              y={15}\r\n              className=\"rule-label\">\r\n              TODAY\r\n            </text>\r\n\r\n            <line\r\n              x1={trialX}\r\n              y1={0}\r\n              x2={trialX}\r\n              y2={this.state.height - gutterSize}\r\n              className=\"New\"\r\n            />\r\n            <rect x={trialX} y=\"3\" width={2} height={16} className=\"New\" />\r\n            <text x={trialX + 6} y={15} className=\"rule-label New\">\r\n              TRIAL ENDS\r\n            </text>\r\n            {this.bars()}\r\n            {this.legend()}\r\n            {this.lines()}\r\n            <text\r\n              x={leftGutter + graphPadding}\r\n              y={this.state.height - 10}\r\n              className=\"rule-label\">\r\n              {moment(usageData[0].ts * 1000).format('MMM D')}\r\n            </text>\r\n            <text\r\n              x={this.state.width - graphPadding}\r\n              y={this.state.height - 10}\r\n              style={{textAnchor: 'end'}}\r\n              className=\"rule-label\">\r\n              {moment(usageData[usageData.length - 1].ts * 1000).format('MMM D')}\r\n            </text>\r\n            {/* <text x={todayX} y={this.state.height} style={{textAnchor:'middle'}}> */}\r\n            {/* Today */}\r\n            {/* </text> */}\r\n          </svg>\r\n          {/* {(blur || <p className=\"projection-disclaimer\"> * projections may not accurately predict your usage paterns</p>)} */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    try {\r\n      return this.renderChart();\r\n    } catch (ex) {\r\n      utils.logging.logException(ex);\r\n      return (\r\n        <div className=\"alert alert-block alert-error\">\r\n          {\r\n            \"Un oh! We hit an error trying to render your usage chart. Don't worry, Sentry has let us know about it and we're on it!\"\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nUsageChart.propTypes = {\r\n  usageData: React.PropTypes.arrayOf(\r\n    React.PropTypes.shape({\r\n      accepted: React.PropTypes.number.isRequired,\r\n      total: React.PropTypes.number.isRequired,\r\n      ts: React.PropTypes.any.isRequired,\r\n      dropped: React.PropTypes.shape({\r\n        total: React.PropTypes.number.isRequired,\r\n        overQuota: React.PropTypes.number.isRequired,\r\n        spikeProtection: React.PropTypes.number.isRequired\r\n      }).isRequired\r\n    })\r\n  ),\r\n  trialEnd: React.PropTypes.string,\r\n  slots: React.PropTypes.arrayOf(React.PropTypes.object),\r\n};\r\n\r\nUsageChart.defaultProps = {\r\n  usageData: [],\r\n};\r\n\r\nexport default UsageChart;\r\n```",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
