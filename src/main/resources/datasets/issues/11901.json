{
  "url": "https://api.github.com/repos/facebook/react/issues/11901",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11901/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11901/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11901/events",
  "html_url": "https://github.com/facebook/react/pull/11901",
  "id": 283815852,
  "node_id": "MDExOlB1bGxSZXF1ZXN0MTU5NjA2ODk5",
  "number": 11901,
  "title": "Capture and recover from errors within a single render phase",
  "user": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 196858374,
      "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
      "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
      "name": "CLA Signed",
      "color": "e7e7e7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 1,
  "created_at": "2017-12-21T09:08:00Z",
  "updated_at": "2018-02-10T00:14:51Z",
  "closed_at": "2018-02-10T00:14:51Z",
  "author_association": "MEMBER",
  "pull_request": {
    "url": "https://api.github.com/repos/facebook/react/pulls/11901",
    "html_url": "https://github.com/facebook/react/pull/11901",
    "diff_url": "https://github.com/facebook/react/pull/11901.diff",
    "patch_url": "https://github.com/facebook/react/pull/11901.patch"
  },
  "body": "A rewrite of error handling, with semantics that more closely match stack unwinding.\r\n\r\nErrors that are thrown during the render phase unwind to the nearest error boundary, like before. But rather than synchronously unmount the children before retrying, we restart the failed subtree within the same render phase. The failed children are still unmounted (as if all their keys changed) but without an extra commit.\r\n\r\nCommit phase errors are different. They work by scheduling an error on the update queue of the error boundary. When we enter the render phase, the error is popped off the queue. The rest of the algorithm is the same.\r\n\r\nIn the future, this same algorithm will be used for throwing non-errors, though those will be handled slightly differently: rather than unwind directly to the boundary, we'll continue rendering the siblings. Unwinding will work using the normal complete phase algorithm.\r\n\r\nThis is required for blockers, unless we ship the two implementations side-by-side.\r\n\r\nOpen question: could we release this in a minor version? Error boundaries are a public feature. On the other hand, the changes are only observable if an error is thrown. We also warn, so nobody should be relying on error boundaries for anything other than their intended purpose.\r\n\r\nBehavior that has changed:\r\n\r\n- Render phase error recovery is no longer synchronous in async mode. They have the same priority as whatever component threw the error.\r\n- Previously, when an error boundary captured an error, the children were deleted and committed first, before attempting to re-render. Now they are re-rendered in a single pass without an extra commit to unmount.\r\n- `componentDidCatch` used to always fire in the commit phase. Now it's always called in the render phase.\r\n- All errors are modeled as render phase errors. Even errors that are thrown during the commit phase are implemented by scheduling an update, entering the render phase, then capturing. Modeling it this way has many benefits, the most obvious being that we no longer need to keep track of a global set of failed error boundaries. But it means that this will now cause an infinite loop:\r\n\r\n```js\r\nclass InfiniteErrorLoop extends React.Component {\r\n  componentDidCatch() {\r\n    // Noop. ThrowsOnMount will mount and throw infinitely,\r\n    // until the stack overflows (\"Maximum update depth\" error).\r\n  }\r\n  render() {\r\n    return <ThrowsOnMount />;\r\n  }\r\n}\r\n```\r\n\r\nI think this is fine. In fact, I think these semantics make more sense. In my head, I model it like this:\r\n\r\n```js\r\nfunction performWork() {\r\n  renderPhase(); // Has its own try-catch, so doesn't throw\r\n  try {\r\n    commitPhase(); // Throws\r\n  } catch (error) {\r\n    componentDidCatch();\r\n    // Try again\r\n    // If componentDidCatch is a noop, we'll eventually get a stack overflow.\r\n    performWork();\r\n  }\r\n}\r\n```\r\n\r\nIt's similar to the case where you call `setState` inside `componentDidUpdate` without a guard. Please tell me if you disagree and I'll do my best to convince you :D\r\n\r\nTODO:\r\n\r\n- [x] Test that render phase error recovery now works in async\r\n- [x] Don't capture non-errors.\r\n- [x] Use \"resume mount\" instead of \"resume update\" path on initial mount\r\n- [x] Don't complete parents of children that threw\r\n- [ ] Moar comments\r\n\r\nPotential follow-ups\r\n\r\n- Add `this.unstable_dispatchError` for capturing errors outside React lifecycles? I've implemented internally (it's how React lifecycles work, too) but it's not exposed.",
  "closed_by": {
    "login": "acdlite",
    "id": 3624098,
    "node_id": "MDQ6VXNlcjM2MjQwOTg=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/3624098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/acdlite",
    "html_url": "https://github.com/acdlite",
    "followers_url": "https://api.github.com/users/acdlite/followers",
    "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
    "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
    "organizations_url": "https://api.github.com/users/acdlite/orgs",
    "repos_url": "https://api.github.com/users/acdlite/repos",
    "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
    "received_events_url": "https://api.github.com/users/acdlite/received_events",
    "type": "User",
    "site_admin": false
  }
}
