{
  "url": "https://api.github.com/repos/facebook/react/issues/3939",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/3939/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/3939/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/3939/events",
  "html_url": "https://github.com/facebook/react/issues/3939",
  "id": 79585489,
  "node_id": "MDU6SXNzdWU3OTU4NTQ4OQ==",
  "number": 3939,
  "title": "Server-Side Rendering Help",
  "user": {
    "login": "weyfarere",
    "id": 12563216,
    "node_id": "MDQ6VXNlcjEyNTYzMjE2",
    "avatar_url": "https://avatars3.githubusercontent.com/u/12563216?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/weyfarere",
    "html_url": "https://github.com/weyfarere",
    "followers_url": "https://api.github.com/users/weyfarere/followers",
    "following_url": "https://api.github.com/users/weyfarere/following{/other_user}",
    "gists_url": "https://api.github.com/users/weyfarere/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/weyfarere/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/weyfarere/subscriptions",
    "organizations_url": "https://api.github.com/users/weyfarere/orgs",
    "repos_url": "https://api.github.com/users/weyfarere/repos",
    "events_url": "https://api.github.com/users/weyfarere/events{/privacy}",
    "received_events_url": "https://api.github.com/users/weyfarere/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 5,
  "created_at": "2015-05-22T19:51:20Z",
  "updated_at": "2015-05-25T18:07:48Z",
  "closed_at": "2015-05-25T18:07:48Z",
  "author_association": "NONE",
  "body": "I'm having a bit of trouble finding a reasonable way to handle server-side rendering while still allowing for SEO. There are three approaches I can think of:\n1. Send a bare bones HTML skeleton to the client. After the JavaScript has loaded, make an AJAX request to get the data and render it out.\n2. Send a bare bones HTML skeleton to the client bundled with the JSON data necessary to render the page. Once the JavaScript loads, the page is rendered immediately using the JSON.\n3. Send the fully rendered HTML page and bundled JSON data together. Once the JavaScript has loaded, React will \"rerender\" the page using the JSON data.\n\nThe first option is the worst. The second option fixes the need for a round trip back to the server to retrieve data, which is a step in the right direction. The third option seems to be the best, but I'm having trouble figuring out an approach.\n\nDuring the talks at React Conf, there was a suggestion to make two separate components for each piece of functionality, a data-fetching component and a pure UI component. This would allow the server to render markup using the pure UI components without including client-side logic via the data-fetching components.\n\nI'm concerned this will lead to two separate versions of a page's structure to exist, one which the server uses to render the markup and one which is wrapped in \"containers\" on the client. The UI components used will be the same, but the structure will need to be separately maintained, resulting in changes requiring two updates. Am I mistaken?\n\nFor example, let's say we have a `Foo` component and a `Bar` component. The server might look like:\n\n```\nReact.createClass({\n    render: function () {\n        return (\n            <Column>\n                <Foo />\n                <Bar />\n            </Column>\n        );\n    }\n});\n```\n\nHowever, on the client, the `Foo` and `Bar` components might need to fetch data from the server. The recommendation is to wrap them in containers, so the client-side code might look like:\n\n```\nReact.createClass({\n    render: function () {\n        return (\n            <Column>\n                <FooContainer />\n                <BarContainer />\n            </Column>\n        );\n    }\n});\n```\n\nThe idea behind each is the same, but the children of the `Column` component change depending on the environment.  Does this mean I'll have to keep the two versions synchronized anytime I want to add, remove, or update the structure? Is there an established pattern to avoid this?\n\nI'm dipping my toes into React, but I want to make sure I'm structuring it correctly and following best practices. I'm not interested in running Flux on my server, which is why I want to keep the client's \"data-fetching\" components and their dependencies on the client side.\n\nAre there any recommendations? Have I missed anything?\n",
  "closed_by": {
    "login": "sophiebits",
    "id": 6820,
    "node_id": "MDQ6VXNlcjY4MjA=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sophiebits",
    "html_url": "https://github.com/sophiebits",
    "followers_url": "https://api.github.com/users/sophiebits/followers",
    "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
    "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
    "organizations_url": "https://api.github.com/users/sophiebits/orgs",
    "repos_url": "https://api.github.com/users/sophiebits/repos",
    "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sophiebits/received_events",
    "type": "User",
    "site_admin": false
  }
}
