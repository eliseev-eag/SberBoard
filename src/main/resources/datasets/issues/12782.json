{
  "url": "https://api.github.com/repos/facebook/react/issues/12782",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/12782/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/12782/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/12782/events",
  "html_url": "https://github.com/facebook/react/issues/12782",
  "id": 322229487,
  "node_id": "MDU6SXNzdWUzMjIyMjk0ODc=",
  "number": 12782,
  "title": "React 16.3.1, setState of parent onMouseEnter in child incredibly sluggish",
  "user": {
    "login": "CSMR-DB",
    "id": 11158693,
    "node_id": "MDQ6VXNlcjExMTU4Njkz",
    "avatar_url": "https://avatars1.githubusercontent.com/u/11158693?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CSMR-DB",
    "html_url": "https://github.com/CSMR-DB",
    "followers_url": "https://api.github.com/users/CSMR-DB/followers",
    "following_url": "https://api.github.com/users/CSMR-DB/following{/other_user}",
    "gists_url": "https://api.github.com/users/CSMR-DB/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CSMR-DB/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CSMR-DB/subscriptions",
    "organizations_url": "https://api.github.com/users/CSMR-DB/orgs",
    "repos_url": "https://api.github.com/users/CSMR-DB/repos",
    "events_url": "https://api.github.com/users/CSMR-DB/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CSMR-DB/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 620368407,
      "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
      "name": "Resolution: Needs More Information",
      "color": "fffde7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2018-05-11T09:27:31Z",
  "updated_at": "2018-05-16T08:08:53Z",
  "closed_at": "2018-05-16T08:08:52Z",
  "author_association": "NONE",
  "body": "Issue Type: **Bug?**\r\n\r\n**What is the current behavior?**\r\n\r\nI'm refactoring code from my graph Components, built with d3. I am using Composition to create an instance that looks somewhat like this:\r\n\r\n```\r\n<Vizzy>\r\n    <VizzyHeader title=\"Guests staying\" />\r\n    <VizzySVG>\r\n        <Line\r\n            data={data}\r\n        />\r\n        <Bars\r\n            data={data}\r\n            isHelper\r\n        />\r\n    </VizzySVG>\r\n    <VizzyLegend />\r\n</Vizzy>\r\n```\r\n\r\nI have defined a method on \"Vizzy\" which lets me set the current index of the data shown in the graph and I am passing that as a function to the child Components. Like so:\r\n\r\n```\r\nclass Vizzy extends Component {\r\n    state = {\r\n        currentActiveData: \"Value\"\r\n    };\r\n    setActiveData = dataIndex => {\r\n        this.setState({\r\n            currentActiveData: dataIndex\r\n        });\r\n    };\r\n    render() {\r\n        const { currentActiveData } = this.state;\r\n        const setActiveData = this.setActiveData;\r\n\r\n        const childrenWithProps = React.Children.map(\r\n            this.props.children,\r\n            child =>\r\n                React.cloneElement(child, { currentActiveData, setActiveData })\r\n        );\r\n        return <VizzyContainer>{childrenWithProps}</VizzyContainer>;\r\n    }\r\n}\r\n```\r\n\r\nIt then gets passed to the child \"VizzySVG\", because that's where I need the method to run onMouseEnter. So, a little bit of prop drilling to make it look like this:\r\n\r\nThe data from Vizzy's state gets passed to \"VizzyLegend\", because that's where I ultimately need the data to be available.\r\n\r\n```\r\nclass VizzySVG extends Component {\r\n    state = { vizzyWidth: 0, vizzyHeight: 0 };\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            vizzyWidth: this.refs.VizzyRef.offsetWidth,\r\n            vizzyHeight: this.refs.VizzyRef.offsetHeight\r\n        });\r\n    };\r\n    render() {\r\n        const { vizzyWidth, vizzyHeight } = this.state;\r\n        const { setActiveData, currentActiveData } = this.props;\r\n\r\n        const childrenWithProps = React.Children.map(\r\n            this.props.children,\r\n            child =>\r\n                React.cloneElement(child, {\r\n                    vizzyWidth,\r\n                    vizzyHeight,\r\n                    setActiveData,\r\n                    currentActiveData\r\n                })\r\n        );\r\n\r\n        return (\r\n            <div ref=\"VizzyRef\" style={{ display: \"flex\", height: \"100%\" }}>\r\n                <Svg\r\n                    width={vizzyWidth}\r\n                    height={vizzyHeight}\r\n                    viewBox={`0 0 ${vizzyWidth} ${vizzyHeight}`}\r\n                >\r\n                    {childrenWithProps}\r\n                </Svg>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nThen, in Bars.jsx, I call the method onMouseEnter. The major issue is that it is **extremely** sluggish / slow. Even causing issues with the CSS to transition on `:hover`. If I put the that method as an onClick, the problem is gone. However, that eliminates the intended behavior I'm going for. When constructing a similar graph using my old Component built with d3 to handle interaction (updating the DOM), this problem doesn't arise. But that code is less scalable and maintainable, so I need to get this refactor to work.\r\n\r\nAlso, when I just use `onMouseEnter={() => console.log(\"hovered\")}` inside Bars.jsx, the console just updates as expected and animation is fluent. No issues with CSS `:hover` whatsoever.\r\n\r\nI would expect the data to get updated fluently when using the onMouseEnter to setState(), just like updating the DOM using d3 or even jQuery would. I figured drilling props just 2 levels would not be an issue, albeit not ideal.\r\n\r\nThis is running React 16.3.1 on Ubuntu 16.04. I don't know about the behavior in older versions of React because I only started to refactor after updating to 16.3.x.\r\n\r\n**EDIT:** This may just be an issue with my version of Firefox for some reason, the behavior in Chrome is much smoother. Will check if updating Firefox helps.\r\n\r\n**EDIT 2:** It seems that updating Firefox has helped and that it can no longer be considered a bug. It is now performing pretty much on par with Chrome, yet it is still slower than using d3 to directly manipulate the DOM using d3's `.html()`. Is this as much as I can expect from using prop drilling and setting state from nested components using just React?",
  "closed_by": {
    "login": "CSMR-DB",
    "id": 11158693,
    "node_id": "MDQ6VXNlcjExMTU4Njkz",
    "avatar_url": "https://avatars1.githubusercontent.com/u/11158693?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/CSMR-DB",
    "html_url": "https://github.com/CSMR-DB",
    "followers_url": "https://api.github.com/users/CSMR-DB/followers",
    "following_url": "https://api.github.com/users/CSMR-DB/following{/other_user}",
    "gists_url": "https://api.github.com/users/CSMR-DB/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/CSMR-DB/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/CSMR-DB/subscriptions",
    "organizations_url": "https://api.github.com/users/CSMR-DB/orgs",
    "repos_url": "https://api.github.com/users/CSMR-DB/repos",
    "events_url": "https://api.github.com/users/CSMR-DB/events{/privacy}",
    "received_events_url": "https://api.github.com/users/CSMR-DB/received_events",
    "type": "User",
    "site_admin": false
  }
}
