{
  "url": "https://api.github.com/repos/facebook/react/issues/6292",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/6292/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/6292/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/6292/events",
  "html_url": "https://github.com/facebook/react/issues/6292",
  "id": 141853425,
  "node_id": "MDU6SXNzdWUxNDE4NTM0MjU=",
  "number": 6292,
  "title": "Wierd functionality when try to display complex array",
  "user": {
    "login": "stavenko",
    "id": 200597,
    "node_id": "MDQ6VXNlcjIwMDU5Nw==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/200597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stavenko",
    "html_url": "https://github.com/stavenko",
    "followers_url": "https://api.github.com/users/stavenko/followers",
    "following_url": "https://api.github.com/users/stavenko/following{/other_user}",
    "gists_url": "https://api.github.com/users/stavenko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stavenko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stavenko/subscriptions",
    "organizations_url": "https://api.github.com/users/stavenko/orgs",
    "repos_url": "https://api.github.com/users/stavenko/repos",
    "events_url": "https://api.github.com/users/stavenko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stavenko/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2016-03-18T12:36:45Z",
  "updated_at": "2016-03-21T10:58:14Z",
  "closed_at": "2016-03-18T15:48:34Z",
  "author_association": "NONE",
  "body": "Hello.\n\nI got one strange error-like thing. \nI got array of commands in very special component, eg:\n\n```\nclass ScenarioForm extends Component{\n  constructor(props){ \n    super(props);\n    this.state= {scenario : props.scenario}\n  }\n  componentWillReceiveProps(props){\n    this.setState({scenario : props.scenario});\n  }\n\n  commandsUpdated(commandsArray){\n    this.state.scenario.commands=commandsArray;\n    this.forceUpdate();\n  }\n\n  render(){\n    if(!this.state.scenario) {\n      return <span>nothing</span>;\n    }\n    return <div>\n      //skipped\n      <div className='form-group'>\n        <div className={'col-xs-12'}> \n          <div className={[ cs.commandsContainer].join(' ')}>\n            {\n              this.state.scenario.commands.map((c,ix)=>{\n                return <Command \n                  key={ c.id } \n                  command={c} \n                  ix={ix}\n                  array={this.state.scenario.commands}\n                  parent={this}\n                />\n                    })\n            }\n          </div>\n        </div>\n      </div>\n      // skipped...\n  }\n}\n```\n\nEach command is a:\n\n```\nexport class Command extends Component{\n  constructor(props){\n    super(props);\n  }\n\n  componentWillReceiveProps(props){\n    this.props = props\n    this.forceUpdate();\n  }\n\n  render(){\n    let { children, array, parent, command,ix } = this.props;\n\n    let index = command.id;\n    let CurrentCommand = Commands[command.type];\n\n    return <div className={s.command} >\n      <div className={s.commandHead}>\n        <span>#</span> <input className={s.ixInput} value={index} onChange=    {this.changeOrder.bind(this)}/>\n        <span>{ix}</span>\n        <div className={s.commandButtons}>\n          <div className={[s.button,s.clone].join(' ')} onClick={this.clone.bind(this)}>\n            <span className='glyphicon glyphicon-link'/>\n          </div>\n          <div className={[s.button,s.remove].join(' ')} onClick={this.remove.bind(this)}>\n            <span className='glyphicon glyphicon-remove'/>\n          </div>\n        </div>\n      </div>\n      <div className={s.commandBody}>\n        <CurrentCommand {...{command, array, parent}} />\n      </div>\n    </div>\n  }\n\n  changeOrder(e){\n    let {array, command} = this.props;\n        let index = command.id;\n\n    let newIndex = parseInt(e.currentTarget.value);\n    let otherCommandWithSameIndexId = array\n      .map((c,ix)=>c.id==newIndex?ix:-1)\n      .filter(x=>x>=0);\n\n    let otherId; \n    if(!otherCommandWithSameIndexId.length) otherId = array.length - 1;\n    else otherId = otherCommandWithSameIndexId[0];\n\n    let other = array[otherId];\n    let me    = array[index];\n    let id_ = other.id;\n    other.id = me.id;\n    me.id = id_;\n   array.sort((a,b)=>a.id - b.id);\n   this.commandsUpdated(array);\n  }\n\n  remove(){\n    let {array, command} = this.props;\n    let index = command.id;\n\n    let me = array.splice(index,1)[0];\n    for(let ix = 0; ix < array.length; ++ix){\n      array[ix].id =ix;\n    }\n    this.commandsUpdated(JSON.parse(JSON.stringify(array)));\n  }\n  clone(){\n    let {array} = this.props;\n    let me = array[this.props.index];\n    let newMe = JSON.parse(JSON.stringify(me));\n    newMe.id +=1;\n    array.splice(me.id,0, newMe);\n    for(let ix = newMe.id+1; ix < array.length; ++ix){\n      array[ix].id +=1;\n    }\n    this.commandsUpdated();\n  }\n  commandsUpdated(...args){\n    let {parent} = this.props;\n    parent.commandsUpdated(...args);\n  }\n}\n```\n\nAnd `CurrentCommand` is a:\n\n```\nclass SleepCommand extends Component{\n  constructor(props){\n    super(props)\n  }\n  componentWillReceiveProps(props){\n    this.props=props;\n    this.forceUpdate();\n  }\n  render(){\n    let {index, array, parent, command} = this.props;\n    return <div className={s.sleepCommand}> \n      <span> Sleep for </span>\n          <input className={s.sleepInput}  value={command.sleepFor} onChange={(e)=>{\n        let v = parseInt(e.currentTarget.value);\n        v = isNaN(v)?0:v;\n        command.sleepFor = v;\n        parent.commandsUpdated(array);\n      }}/> \n    <span>ms</span>\n    </div>\n  }\n}\n```\n\nor\n\n```\nclass UnknownCommand extends Component{\n  constructor(props){\n    console.log(\"PROPS\", props);\n    super(props)\n  }\n  componentWillReceiveProps(props){\n    this.props=props;\n    this.forceUpdate();\n  }\n\n  render(){\n    let {command, array, parent} = this.props\n    console.info(\"Unknow command\", command, array, parent);\n    let index = command.id;\n    return <div> \n      <div>\n        <label>Select command type</label>\n      </div>\n      <select onChange={this.selectType.bind(this)}>\n        <option>-----</option>\n        {CommandTypes.map((c,ix)=><option key={ix} value={ix}>{c}</option>)}\n      </select>\n    </div>\n\n  }\n\n  selectType(e){\n    let {command, array, parent} = this.props\n    let index = command.id;\n    console.info(\"Unknow command st\", command, array, parent);\n    let id = e.currentTarget.value;\n    let type = CommandTypes[id];\n    console.log('change', array);\n    array[index].type=type;\n    parent.commandsUpdated(array);\n  }\n}\n```\n\nThere is a remove button in command root. The main idea is to remove certain element in array and then redraw it. Sometimes i can see, that array is spliced correctly - it identity stored correctly. But sometimes, wrong element is deleted with exception: \n\n```\nUncaught Invariant Violation: findComponentRoot(..., .0.0.1.0.4.1.1.0.0.$2.0.4.0): Unable to find element. \n```\n\nThere's explanation in this exception:\n\n```\n usually due to forgetting a <tbody> when using tables, nesting tags like <form>, <p>, or <a>, or using non-SVG elements in an <svg> parent. Try inspecting the child nodes of the element with React ID ``. \n```\n\nI have no any of this elements, I have putted keys to commands, and it seems to me, that react doesn't handle elements with `key` property correctly. \n\nWhen i try too look at available elements, it was exists before `remove` function called.\n\nI have no idea, why incorrect dom element is removed(since removed element left on page), and when I have correct array when i `console.log` it's items in `ScenarioForm::render` method.\n",
  "closed_by": {
    "login": "stavenko",
    "id": 200597,
    "node_id": "MDQ6VXNlcjIwMDU5Nw==",
    "avatar_url": "https://avatars1.githubusercontent.com/u/200597?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stavenko",
    "html_url": "https://github.com/stavenko",
    "followers_url": "https://api.github.com/users/stavenko/followers",
    "following_url": "https://api.github.com/users/stavenko/following{/other_user}",
    "gists_url": "https://api.github.com/users/stavenko/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stavenko/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stavenko/subscriptions",
    "organizations_url": "https://api.github.com/users/stavenko/orgs",
    "repos_url": "https://api.github.com/users/stavenko/repos",
    "events_url": "https://api.github.com/users/stavenko/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stavenko/received_events",
    "type": "User",
    "site_admin": false
  }
}
