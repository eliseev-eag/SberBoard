{
  "url": "https://api.github.com/repos/facebook/react/issues/5047",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/5047/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/5047/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/5047/events",
  "html_url": "https://github.com/facebook/react/issues/5047",
  "id": 109631671,
  "node_id": "MDU6SXNzdWUxMDk2MzE2NzE=",
  "number": 5047,
  "title": "Default lifecycle methods on React.Component ?",
  "user": {
    "login": "arcanis",
    "id": 1037931,
    "node_id": "MDQ6VXNlcjEwMzc5MzE=",
    "avatar_url": "https://avatars2.githubusercontent.com/u/1037931?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/arcanis",
    "html_url": "https://github.com/arcanis",
    "followers_url": "https://api.github.com/users/arcanis/followers",
    "following_url": "https://api.github.com/users/arcanis/following{/other_user}",
    "gists_url": "https://api.github.com/users/arcanis/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/arcanis/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/arcanis/subscriptions",
    "organizations_url": "https://api.github.com/users/arcanis/orgs",
    "repos_url": "https://api.github.com/users/arcanis/repos",
    "events_url": "https://api.github.com/users/arcanis/events{/privacy}",
    "received_events_url": "https://api.github.com/users/arcanis/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 9,
  "created_at": "2015-10-03T16:36:36Z",
  "updated_at": "2018-01-17T14:48:48Z",
  "closed_at": "2016-10-27T14:50:32Z",
  "author_association": "CONTRIBUTOR",
  "body": "Just a small API detail: would it make sense to implement default (empty) lifecycle methods in the base React.Component class? It would allow to have homogenous implementations as far as super() calls are concerned.\n\nFor example, the following will throw due to the missing `componentDidMount` implementation in the parent class:\n\n```\nclass Foo extends React.Component {\n    componentDidMount( ) {\n        super.componentDidMount( );\n    }\n};\n```\n\nHowever, when overloading the `Foo` class, a missing super call might introduce some bugs. That's what got me to think that maybe it was safer to always put the super-call, and then I discovered that it was not possible when heriting from the base class.\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
