{
  "url": "https://api.github.com/repos/facebook/react/issues/15452",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/15452/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/15452/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/15452/events",
  "html_url": "https://github.com/facebook/react/issues/15452",
  "id": 435051002,
  "node_id": "MDU6SXNzdWU0MzUwNTEwMDI=",
  "number": 15452,
  "title": "Add error as argument to ReactDOM.render callback",
  "user": {
    "login": "joeldenning",
    "id": 5524384,
    "node_id": "MDQ6VXNlcjU1MjQzODQ=",
    "avatar_url": "https://avatars1.githubusercontent.com/u/5524384?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/joeldenning",
    "html_url": "https://github.com/joeldenning",
    "followers_url": "https://api.github.com/users/joeldenning/followers",
    "following_url": "https://api.github.com/users/joeldenning/following{/other_user}",
    "gists_url": "https://api.github.com/users/joeldenning/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/joeldenning/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/joeldenning/subscriptions",
    "organizations_url": "https://api.github.com/users/joeldenning/orgs",
    "repos_url": "https://api.github.com/users/joeldenning/repos",
    "events_url": "https://api.github.com/users/joeldenning/events{/privacy}",
    "received_events_url": "https://api.github.com/users/joeldenning/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-04-19T05:07:46Z",
  "updated_at": "2019-09-04T11:32:28Z",
  "closed_at": null,
  "author_association": "CONTRIBUTOR",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nCurrently, if the initial render for an application fails during `ReactDOM.render(reactElement, domElement, callback)`, the callback will still be called, but without a way of knowing whether the render succeeded or not. See https://codepen.io/joeldenning/pen/mgLVLY?editors=0010.\r\n\r\nThis makes it tedious to know at the time that the initial render finishes whether the render was successful or not. Consider the tedious code required to reject a promise with an error if first render fails but resolve the promise with instance of component if it succeeds. As far as I can tell, this is the *simplest possible code to achieve this*.\r\n\r\n```jsx\r\nnew Promise((resolve, reject) => {\r\n  let firstRenderErr = null\r\n  try {\r\n    const instanceOfComponent = ReactDOM.render(reactElement, domElement, () => {\r\n      // setTimeout is necessary to give time for synchronous execution of\r\n      // ReactDOM.render to finish so that the `instanceOfComponent` and \r\n      // `firstRenderErr` variables are defined when we call resolve\r\n      setTimeout(() => {\r\n        if (firstRenderErr) {\r\n          reject(firstRenderErr)\r\n        } else {\r\n          resolve(instanceOfComponent)\r\n        }\r\n      })\r\n    })\r\n  } catch (err) {\r\n    firstRenderErr = err\r\n  }\r\n})\r\n```\r\n\r\n**What is the expected behavior?**\r\nI propose react starts calling the callback with two arguments, errback style:\r\n\r\n```js\r\nReactDOM.render(reactElement, domElement, (err, instanceOfComponent) => {\r\n})\r\n```\r\n\r\nThis change sets ReactDOM up for easy success/failure detection if ReactDOM.render() ever is performed asynchronously.\r\n\r\nAdditionally, it very much simplifies the tedious code from above:\r\n```js\r\nnew Promise((resolve, reject) => {\r\n  ReactDOM.render(reactElement, domElement, (err, instanceOfComponent) => {\r\n    if (err) {\r\n      reject(err)\r\n    } else {\r\n      resolve(instanceOfComponent)\r\n    }\r\n  })\r\n})\r\n```\r\n\r\nThis would not be a breaking change, since adding arguments to the callback would not negatively affect any code (except situations where people are depending on the callback having zero arguments?? Seems unlikely).\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions. I'm happy to attempt a PR for this if maintainers agree with the proposed change.",
  "closed_by": null
}
