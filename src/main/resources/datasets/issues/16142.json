{
  "url": "https://api.github.com/repos/facebook/react/issues/16142",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16142/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16142/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16142/events",
  "html_url": "https://github.com/facebook/react/issues/16142",
  "id": 468572851,
  "node_id": "MDU6SXNzdWU0Njg1NzI4NTE=",
  "number": 16142,
  "title": "Need to get all the values of all the child component instances and use it in parents method: ReactJS",
  "user": {
    "login": "vjr12",
    "id": 42905121,
    "node_id": "MDQ6VXNlcjQyOTA1MTIx",
    "avatar_url": "https://avatars3.githubusercontent.com/u/42905121?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vjr12",
    "html_url": "https://github.com/vjr12",
    "followers_url": "https://api.github.com/users/vjr12/followers",
    "following_url": "https://api.github.com/users/vjr12/following{/other_user}",
    "gists_url": "https://api.github.com/users/vjr12/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vjr12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vjr12/subscriptions",
    "organizations_url": "https://api.github.com/users/vjr12/orgs",
    "repos_url": "https://api.github.com/users/vjr12/repos",
    "events_url": "https://api.github.com/users/vjr12/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vjr12/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-07-16T10:23:37Z",
  "updated_at": "2019-07-17T15:53:22Z",
  "closed_at": "2019-07-17T15:53:22Z",
  "author_association": "NONE",
  "body": "I have this scenario where I have a table(react-table), where I am applying column level filtering. I have extracted this as a separate component(DropdDown Component) and this can be attached to any column . I am maintaining  a method inside parent component which picks up the union of all the values i.e., selected values of all the dropdowns and then apply server side filtering.\r\n\r\nNow the challenge here is , How can i get this consolidated values inside the parent component method? \r\n\r\nThis DropDown component has list of unique values with respect to that column, there is an Apply button , which applies the server side filtering. Now if I jump onto another column, I need to get the previously checked values and also the current values.\r\n\r\nInside handleSetData() filtering logic is written, I need to get the data from DropDown Component. Everytime I click on Apply on a column filter, I need to get the previously checked values as well.\r\n\r\nCan someone help me with this:\r\n\r\nCode Sandbox: https://codesandbox.io/s/quizzical-glitter-np8iw\r\n\r\n\r\nApp Component\r\n----------------\r\n`````````````````````\r\nimport * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport ReactTable from \"react-table\";\r\nimport \"./styles.css\";\r\nimport \"react-table/react-table.css\";\r\nimport DropDownComponent from \"./DropDown\";\r\ninterface IState {\r\n  data: {}[];\r\n  columns: {}[];\r\n}\r\n\r\ninterface IProps {}\r\n\r\nexport default class App extends React.Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      data: [\r\n        { firstName: \"aaaaa\", status: \"Pending\", visits: 155 },\r\n        { firstName: \"aabFaa\", status: \"Pending\", visits: 155 },\r\n        { firstName: \"adaAAaaa\", status: \"Approved\", visits: 1785 },\r\n        { firstName: \"aAaaaa\", status: \"Approved\", visits: 175 },\r\n        { firstName: \"adaSaaa\", status: \"Cancelled\", visits: 165 },\r\n        { firstName: \"aaaaa\", status: \"Cancelled\", visits: 157 },\r\n        { firstName: \"aaaaa\", status: \"Approved\", visits: 153 },\r\n        { firstName: \"aaaaa\", status: \"Pending\", visits: 155 }\r\n      ],\r\n      columns: []\r\n    };\r\n  }\r\n\r\n  handleSetState = (columns: any) => {\r\n    this.setState({ columns });\r\n  };\r\n\r\n  handleSetData = (value: any) => {\r\n    console.log(value); // Here filtering logic is written, I need to get the data from DropDown Component. Everytime I click on Apply on a column filter, I need to get the previously checked values as well\r\n  };\r\n\r\n  componentDidMount() {\r\n    let columns = [\r\n      {\r\n        Header: () => (\r\n          <div>\r\n            <div style={{ position: \"absolute\", marginLeft: \"10px\" }}>\r\n              <DropDownComponent\r\n                data={this.state.data}\r\n                handleSetData={this.handleSetData}\r\n                param=\"firstName\"\r\n              />\r\n            </div>\r\n            <span>First Name</span>\r\n          </div>\r\n        ),\r\n        accessor: \"firstName\",\r\n        sortable: false,\r\n        show: true,\r\n        displayValue: \" First Name\"\r\n      },\r\n      {\r\n        Header: () => (\r\n          <div>\r\n            <div style={{ position: \"absolute\", marginLeft: \"10px\" }}>\r\n              <DropDownComponent\r\n                data={this.state.data}\r\n                handleSetData={this.handleSetData}\r\n                param=\"status\"\r\n              />\r\n            </div>\r\n            <span>Status</span>\r\n          </div>\r\n        ),\r\n        accessor: \"status\",\r\n        sortable: false,\r\n        show: true,\r\n        displayValue: \" Status \"\r\n      },\r\n      {\r\n        Header: \"Visits\",\r\n        accessor: \"visits\",\r\n        sortable: false,\r\n        show: true,\r\n        displayValue: \" Visits \"\r\n      }\r\n    ];\r\n    this.setState({ columns });\r\n  }\r\n\r\n  render() {\r\n    const { data, columns } = this.state;\r\n    return (\r\n      <div>\r\n        <ReactTable\r\n          data={data}\r\n          columns={columns}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n\r\n``````````````````````````````\r\n\r\nDropDown Component\r\n-----------------------\r\n``````````````````````````````\r\nimport * as React from \"react\";\r\nimport { Button, Checkbox, Icon } from \"semantic-ui-react\";\r\ninterface IProps {\r\n  data: {}[];\r\n  handleSetData(arr: any): void;\r\n  handleSetData(arr: any): void;\r\n  param: string;\r\n}\r\ninterface IState {\r\n  showList: boolean;\r\n  optionsArr: {}[];\r\n  originalState: {}[];\r\n}\r\n\r\nexport default class DropDownComponent extends React.Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      showList: false,\r\n      optionsArr: [],\r\n      originalState: []\r\n    };\r\n  }\r\n\r\n  toggleList = () => {\r\n    this.setState(prevState => ({ showList: !prevState.showList }));\r\n  };\r\n\r\n  handleItemClick = (event: React.FormEvent<HTMLInputElement>, data: any) => {\r\n    const index = this.state.optionsArr.findIndex(\r\n      (item: any) => item.text === data.name\r\n    );\r\n    const optionsArr = this.state.optionsArr.map((prevState: any, i: any) =>\r\n      i === index\r\n        ? {\r\n            key: prevState.key,\r\n            text: prevState.text,\r\n            checked: !prevState.checked\r\n          }\r\n        : prevState\r\n    );\r\n    this.setState({ optionsArr });\r\n  };\r\n\r\n  submitSelection = () => {\r\n    console.log(this.state.optionsArr.filter((item: any) => item.checked)); // This gives me selecte ones\r\n    let checkedValues: any = this.state.optionsArr.filter(\r\n      (item: any) => item.checked\r\n    );\r\n    this.setState({ originalState: this.state.optionsArr }, () =>\r\n      this.props.handleSetData(checkedValues)\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.data) {\r\n      let arr = this.props.data;\r\n      let uniqueValues = Array.from(\r\n        new Set(arr.map((arr: any) => arr[this.props.param]))\r\n      );\r\n      var optionsArr = [];\r\n      for (let i = 0; i < uniqueValues.length; i++) {\r\n        var options: any = {};\r\n        options[\"key\"] = uniqueValues[i];\r\n        options[\"text\"] = uniqueValues[i];\r\n        options[\"checked\"] = false;\r\n        optionsArr.push(options);\r\n      }\r\n      this.setState({ optionsArr: optionsArr, originalState: optionsArr });\r\n    }\r\n  }\r\n\r\n  clearSelection = (event: any) => {\r\n    // Push it to previous state, before cancel was clicked\r\n    this.setState({ showList: false, optionsArr: this.state.originalState });\r\n  };\r\n\r\n  render() {\r\n    let { showList } = this.state;\r\n    let visibleFlag: string;\r\n    if (showList === true) visibleFlag = \"visible\";\r\n    else visibleFlag = \"\";\r\n    return (\r\n      <div>\r\n        <div style={{ position: \"absolute\" }}>\r\n          <div\r\n            className={\r\n              \"ui scrolling dropdown column-settings customized \" +\r\n              visibleFlag +\r\n              \" \" +\r\n              this.props.menuDirection\r\n            }\r\n          >\r\n            <Icon className=\"filter\" onClick={this.toggleList} />\r\n              {this.state.optionsArr.length > 0 ? (\r\n                <>\r\n                  <div className=\"menu-item-holder\">\r\n                    {this.state.optionsArr.map((item: any, i: number) => (\r\n                      <div className=\"menu-item\" key={i}>\r\n                        <Checkbox\r\n                          name={item.text}\r\n                          onChange={this.handleItemClick}\r\n                          checked={item.checked}\r\n                          label={item.text}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <div className=\"menu-btn-holder\">\r\n                    <Button size=\"small\" onClick={this.submitSelection}>\r\n                      Apply\r\n                    </Button>\r\n                    <Button size=\"small\" onClick={this.clearSelection}>\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  ",
  "closed_by": {
    "login": "vjr12",
    "id": 42905121,
    "node_id": "MDQ6VXNlcjQyOTA1MTIx",
    "avatar_url": "https://avatars3.githubusercontent.com/u/42905121?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vjr12",
    "html_url": "https://github.com/vjr12",
    "followers_url": "https://api.github.com/users/vjr12/followers",
    "following_url": "https://api.github.com/users/vjr12/following{/other_user}",
    "gists_url": "https://api.github.com/users/vjr12/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vjr12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vjr12/subscriptions",
    "organizations_url": "https://api.github.com/users/vjr12/orgs",
    "repos_url": "https://api.github.com/users/vjr12/repos",
    "events_url": "https://api.github.com/users/vjr12/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vjr12/received_events",
    "type": "User",
    "site_admin": false
  }
}
