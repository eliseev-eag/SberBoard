{
  "url": "https://api.github.com/repos/facebook/react/issues/11211",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11211/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11211/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11211/events",
  "html_url": "https://github.com/facebook/react/issues/11211",
  "id": 265143974,
  "node_id": "MDU6SXNzdWUyNjUxNDM5NzQ=",
  "number": 11211,
  "title": "Use the native `beforeinput` event if it's supported",
  "user": {
    "login": "ianstormtaylor",
    "id": 311752,
    "node_id": "MDQ6VXNlcjMxMTc1Mg==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/311752?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ianstormtaylor",
    "html_url": "https://github.com/ianstormtaylor",
    "followers_url": "https://api.github.com/users/ianstormtaylor/followers",
    "following_url": "https://api.github.com/users/ianstormtaylor/following{/other_user}",
    "gists_url": "https://api.github.com/users/ianstormtaylor/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ianstormtaylor/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ianstormtaylor/subscriptions",
    "organizations_url": "https://api.github.com/users/ianstormtaylor/orgs",
    "repos_url": "https://api.github.com/users/ianstormtaylor/repos",
    "events_url": "https://api.github.com/users/ianstormtaylor/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ianstormtaylor/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "id": 127893911,
      "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
      "name": "Component: DOM",
      "color": "fef2c0",
      "default": false
    },
    {
      "id": 121709921,
      "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
      "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
      "name": "Type: Feature Request",
      "color": "c7def8",
      "default": false
    }
  ],
  "state": "open",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 10,
  "created_at": "2017-10-13T01:45:04Z",
  "updated_at": "2019-04-10T16:05:05Z",
  "closed_at": null,
  "author_association": "NONE",
  "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nImprovement.\r\n\r\n**What is the current behavior?**\r\n\r\nRight now, the synthetic `onBeforeInput` event is being created based on two other events:\r\n\r\n- `textInput` when possible—which is in Webkit.\r\n- `keypress` as a fallback.\r\n\r\nBut these days in Chrome, Safari and Opera the spec'd `beforeinput` event is available and actually fires. And when it does, it includes other [spec'd properties](https://developer.mozilla.org/en-US/docs/Web/API/InputEvent) which can be extremely helpful:\r\n\r\n- `inputType` tells you whether the event is inserting text, replacing text, inserting a line break, etc.\r\n- `getTargetRanges()` tells you where the input is taking place in the DOM.\r\n\r\nRight now this information isn't exposed, because even if the browser supports `beforeinput`, it's not being checked for.\r\n\r\n**What is the expected behavior?**\r\n\r\nInstead React should treat `textInput` as a slightly-preferred fallback for native `beforeinput` support, but add `beforeinput` as the true goal. So we'd end up with a fallback stack of:\r\n\r\n- `beforeinput`\r\n- `textInput`\r\n- `keypress`\r\n\r\nWhich guarantees that the `nativeEvent` will always be the most spec'd and have the most relevant information associated with it.\r\n\r\n---\r\n\r\nThe `beforeinput` event's extra properties are critical in `contenteditable` situations, when you want to prevent the default browser behavior from firing but perform the logic on an internal model instead. (I'm looking to do this for [Slate](https://github.com/ianstormtaylor/slate).) \r\n\r\nWithout that extra information you have to fallback to hackier behavior—allowing the event to occur, trying to parse the DOM for what the change was, then re-rendering to remove it, etc. I want to avoid this on the more modern browsers, because it results in reduced performance.\r\n\r\n---\r\n\r\nThere is another situation that this fixes, which is that spellcheck right now doesn't trigger React's `onBeforeInput` handler, even though modern browsers fire the `beforeinput` event, because it's not being listened for right now.\r\n\r\n\r\n",
  "closed_by": null
}
