{
  "url": "https://api.github.com/repos/facebook/react/issues/11718",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/11718/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/11718/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/11718/events",
  "html_url": "https://github.com/facebook/react/issues/11718",
  "id": 278137021,
  "node_id": "MDU6SXNzdWUyNzgxMzcwMjE=",
  "number": 11718,
  "title": "TypeError: Attempted to assign to readonly property (node._store)",
  "user": {
    "login": "TempaGoGo",
    "id": 26924512,
    "node_id": "MDEyOk9yZ2FuaXphdGlvbjI2OTI0NTEy",
    "avatar_url": "https://avatars0.githubusercontent.com/u/26924512?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TempaGoGo",
    "html_url": "https://github.com/TempaGoGo",
    "followers_url": "https://api.github.com/users/TempaGoGo/followers",
    "following_url": "https://api.github.com/users/TempaGoGo/following{/other_user}",
    "gists_url": "https://api.github.com/users/TempaGoGo/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TempaGoGo/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TempaGoGo/subscriptions",
    "organizations_url": "https://api.github.com/users/TempaGoGo/orgs",
    "repos_url": "https://api.github.com/users/TempaGoGo/repos",
    "events_url": "https://api.github.com/users/TempaGoGo/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TempaGoGo/received_events",
    "type": "Organization",
    "site_admin": false
  },
  "labels": [
    {
      "id": 620368407,
      "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
      "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
      "name": "Resolution: Needs More Information",
      "color": "fffde7",
      "default": false
    }
  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 6,
  "created_at": "2017-11-30T14:23:36Z",
  "updated_at": "2017-12-08T11:09:37Z",
  "closed_at": "2017-12-08T10:57:17Z",
  "author_association": "NONE",
  "body": "Folks,\r\n\r\nI have a the following fairly standard component:\r\n\r\n```\r\n    export const Alert = (props: {message: string, type?: AlertType, createAgainButton?: Object} ) =>\r\n    {\r\n           \r\n    const type = props.type || 'Message'\r\n\r\n    switch(type)\r\n        {\r\n            case 'Warning':\r\n                return (\r\n                    <div className='tgg-alert-danger'>\r\n                        <div className='tgg-alert-icon'><Icon name='exclamation-circle'/></div>\r\n                        <div className='tgg-alert-text'>{props.message}</div>\r\n                    </div> )\r\n            case 'Spinner':\r\n                return (\r\n                    <div className='tgg-alert-danger'>\r\n                        <div className='tgg-alert-icon'><Icon name='circle-o-notch fa-spin'/></div>\r\n                        <div className='tgg-alert-text'>{props.message}</div>\r\n                    </div>)\r\n            default:\r\n                return (\r\n                    <div className='tgg-alert-success'>\r\n                        <div className='tgg-alert-icon'><Icon name='check-circle'/></div>\r\n                        <div className='tgg-alert-text'>{props.message}</div>\r\n                        { props.createAgainButton }\r\n                    </div>)\r\n        }\r\n    }\r\n\r\n```\r\n\r\n\r\n\r\nMy code raises the following React error, The error is reported to be located in a React module. Here's the output. (Fails in both Chrome and Safari - I haven't tried other browsers):\r\n\r\n```\r\nTypeError: Attempted to assign to readonly property.\r\n\r\nvalidateChildKeys\r\nnode_modules/react/cjs/react.development.js:1136\r\n  1133 | } else if (isValidElement(node)) {\r\n  1134 |   // This element was passed in a valid location.\r\n  1135 |   if (node._store) {\r\n> 1136 |     node._store.validated = true;\r\n  1137 |   }\r\n  1138 | } else if (node) {\r\n  1139 |   var iteratorFn = getIteratorFn(node);\r\nView compiled\r\ncreateElementWithValidation\r\nnode_modules/react/cjs/react.development.js:1261\r\n  1258 | // fixed, the key warnings will appear.)\r\n  1259 | if (validType) {\r\n  1260 |   for (var i = 2; i < arguments.length; i++) {\r\n> 1261 |     validateChildKeys(arguments[i], type);\r\n  1262 |   }\r\n  1263 | }\r\n  1264 | \r\nView compiled\r\nmountIndeterminateComponent\r\nnode_modules/react-dom/cjs/react-dom.development.js:8032\r\n  8029 |     warning(false, \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\r\n  8030 |   }\r\n  8031 |   ReactCurrentOwner.current = workInProgress;\r\n> 8032 |   value = fn(props, context);\r\n  8033 | }\r\n  8034 | // React DevTools reads this flag.\r\n  8035 | workInProgress.effectTag |= PerformedWork;\r\nView compiled\r\nperformUnitOfWork\r\nnode_modules/react-dom/cjs/react-dom.development.js:10224\r\n  10221 |   ReactDebugCurrentFiber.setCurrentFiber(workInProgress);\r\n  10222 | }\r\n  10223 | \r\n> 10224 | var next = beginWork(current, workInProgress, nextRenderExpirationTime);\r\n  10225 | {\r\n  10226 |   ReactDebugCurrentFiber.resetCurrentFiber();\r\n  10227 | }\r\nView compiled\r\nworkLoop\r\nnode_modules/react-dom/cjs/react-dom.development.js:10288\r\n  10285 | if (nextRenderExpirationTime <= mostRecentCurrentTime) {\r\n  10286 |   // Flush all expired work.\r\n  10287 |   while (nextUnitOfWork !== null) {\r\n> 10288 |     nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\r\n  10289 |   }\r\n  10290 | } else {\r\n  10291 |   // Flush asynchronous work until the deadline runs out of time.\r\nView compiled\r\ncallCallback\r\nnode_modules/react-dom/cjs/react-dom.development.js:542\r\n  539 |   // nested call would trigger the fake event handlers of any call higher\r\n  540 |   // in the stack.\r\n  541 |   fakeNode.removeEventListener(evtType, callCallback, false);\r\n> 542 |   func.apply(context, funcArgs);\r\n  543 |   didError = false;\r\n  544 | }\r\n  545 | \r\nView compiled\r\ninvokeGuardedCallbackDev\r\nnode_modules/react-dom/cjs/react-dom.development.js:581\r\n  578 | // errors, it will trigger our global error handler.\r\n  579 | var evt = document.createEvent('Event');\r\n  580 | evt.initEvent(evtType, false, false);\r\n> 581 | fakeNode.dispatchEvent(evt);\r\n  582 | \r\n  583 | if (didError) {\r\n  584 |   if (!didSetError) {\r\nView compiled\r\ninvokeGuardedCallback\r\nnode_modules/react-dom/cjs/react-dom.development.js:438\r\n  435 |  * @param {...*} args Arguments for function\r\n  436 |  */\r\n  437 | invokeGuardedCallback: function (name, func, context, a, b, c, d, e, f) {\r\n> 438 |   invokeGuardedCallback.apply(ReactErrorUtils, arguments);\r\n  439 | },\r\n  440 | \r\n  441 | /**\r\nView compiled\r\nrenderRoot\r\nnode_modules/react-dom/cjs/react-dom.development.js:10366\r\n  10363 | var didError = false;\r\n  10364 | var error = null;\r\n  10365 | {\r\n> 10366 |   invokeGuardedCallback$1(null, workLoop, null, expirationTime);\r\n  10367 |   if (hasCaughtError()) {\r\n  10368 |     didError = true;\r\n  10369 |     error = clearCaughtError();\r\nView compiled\r\nperformWorkOnRoot\r\nnode_modules/react-dom/cjs/react-dom.development.js:11014\r\n  11011 |   root.remainingExpirationTime = commitRoot(finishedWork);\r\n  11012 | } else {\r\n  11013 |   root.finishedWork = null;\r\n> 11014 |   finishedWork = renderRoot(root, expirationTime);\r\n  11015 |   if (finishedWork !== null) {\r\n  11016 |     // We've completed the root. Commit it.\r\n  11017 |     root.remainingExpirationTime = commitRoot(finishedWork);\r\nView compiled\r\nperformWork\r\nnode_modules/react-dom/cjs/react-dom.development.js:10967\r\n  10964 | }\r\n  10965 | \r\n  10966 | while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && (minExpirationTime === NoWork || nextFlushedExpirationTime <= minExpirationTime) && !deadlineDidExpire) {\r\n> 10967 |   performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime);\r\n  10968 |   // Find the next highest priority work.\r\n  10969 |   findHighestPriorityRoot();\r\n  10970 | }\r\nView compiled\r\nrequestWork\r\nnode_modules/react-dom/cjs/react-dom.development.js:10878\r\n  10875 | \r\n  10876 | // TODO: Get rid of Sync and use current time?\r\n  10877 | if (expirationTime === Sync) {\r\n> 10878 |   performWork(Sync, null);\r\n  10879 | } else {\r\n  10880 |   scheduleCallbackWithExpiration(expirationTime);\r\n  10881 | }\r\nView compiled\r\nscheduleWorkImpl\r\nnode_modules/react-dom/cjs/react-dom.development.js:10732\r\n  10729 |   var root = node.stateNode;\r\n  10730 | \r\n  10731 |   checkRootNeedsClearing(root, fiber, expirationTime);\r\n> 10732 |   requestWork(root, expirationTime);\r\n  10733 |   checkRootNeedsClearing(root, fiber, expirationTime);\r\n  10734 | } else {\r\n  10735 |   {\r\nView compiled\r\nenqueueSetState\r\nnode_modules/react-dom/cjs/react-dom.development.js:6212\r\n  6209 |     next: null\r\n  6210 |   };\r\n  6211 |   insertUpdateIntoFiber(fiber, update);\r\n> 6212 |   scheduleWork(fiber, expirationTime);\r\n  6213 | },\r\n  6214 | enqueueReplaceState: function (instance, state, callback) {\r\n  6215 |   var fiber = get(instance);\r\nView compiled\r\nsetState\r\nnode_modules/react/cjs/react.development.js:237\r\n  234 |  */\r\n  235 | Component.prototype.setState = function (partialState, callback) {\r\n  236 |   !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;\r\n> 237 |   this.updater.enqueueSetState(this, partialState, callback, 'setState');\r\n  238 | };\r\n  239 | \r\n  240 | /**\r\nView compiled\r\n(anonymous function)\r\nsrc/core/utilities/dataLoaderForObject.jsx:282\r\n  279 |     this.props.dispatch(actions.change(track(\"Attachments[]\", {filename : attachment.filename}), response.data)) \r\n  280 |     if ( this.props.attachments.filter( attachment => attachment.uploading ).length === 0)\r\n  281 |     {\r\n> 282 |         this.setState({uploadingAttachments: false})\r\n  283 |     }\r\n  284 | })\r\n  285 | .catch(error => this.props.dispatch(actions.change('error', error.response)))\r\n```\r\n\r\nI have a located a piece of code that appears to cause the issues, but unclear why.  I use the Alert component in two places. Firstly a component called GlobalError, defined as below, which appears based on some global state:\r\n\r\n    // @flow\r\n    import React  from 'react'\r\n    import {connect} from 'react-redux'\r\n    import {Alert} from '../../ui/coreUIComponents'\r\n    import type {AlertType} from '../misc/types'\r\n    \r\n    const mapStateToProps = (state) => {\r\n    \treturn {\r\n            message: state.alert.message,\r\n            danger: state.alert.danger,\r\n            createAgainButton: state.alert.createAgainButton\r\n            }\r\n    }\r\n\r\n    export default connect(mapStateToProps)(\r\n    \r\n        (props: {message: string, danger: boolean, createAgainButton?: Object}) =>\r\n        {\r\n            window.scrollTo(0,0);                                    \r\n            const type: AlertType = props.danger? \"Warning\" : \"Message\"\r\n    \r\n            return (\r\n                props.message ? <div>\r\n                    { props.createAgainButton ?\r\n                        <Alert message={props.message} type={type} createAgainButton={props.createAgainButton} />\r\n                    :\r\n                        <Alert message={props.message} type={type}  />\r\n                    }\r\n                </div>\r\n                :\r\n                    <div></div>\r\n            )\r\n        }\r\n    )\r\n\r\nI then I have this code snippet, which seems to be the root of the issue:\r\n\r\n                            { this.state.uploadingAttachments ?\r\n                                <Alert message={t(\"_text uploading attachments\")} type=\"Spinner\" />\r\n                            :\r\n                                <GlobalAlert />\r\n                            }\r\n\r\nIf I take away the boolean logic here, and display both <Alert .../> and <GlobalAlert /> at the same time, the problem goes away. You can see at the bottom of that stack trace the setting of state.uploadingAttachments.\r\n\r\nI wonder if there is anything obvious I'm doing wrong. Any ideas?\r\n\r\nPhil",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
