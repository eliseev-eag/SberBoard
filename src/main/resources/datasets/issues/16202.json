{
  "url": "https://api.github.com/repos/facebook/react/issues/16202",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/16202/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/16202/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/16202/events",
  "html_url": "https://github.com/facebook/react/issues/16202",
  "id": 472819023,
  "node_id": "MDU6SXNzdWU0NzI4MTkwMjM=",
  "number": 16202,
  "title": "Problem in managing child component's state as a result the child's state will be set to initial value everytime : React JS",
  "user": {
    "login": "vjr12",
    "id": 42905121,
    "node_id": "MDQ6VXNlcjQyOTA1MTIx",
    "avatar_url": "https://avatars3.githubusercontent.com/u/42905121?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vjr12",
    "html_url": "https://github.com/vjr12",
    "followers_url": "https://api.github.com/users/vjr12/followers",
    "following_url": "https://api.github.com/users/vjr12/following{/other_user}",
    "gists_url": "https://api.github.com/users/vjr12/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vjr12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vjr12/subscriptions",
    "organizations_url": "https://api.github.com/users/vjr12/orgs",
    "repos_url": "https://api.github.com/users/vjr12/repos",
    "events_url": "https://api.github.com/users/vjr12/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vjr12/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 2,
  "created_at": "2019-07-25T11:44:15Z",
  "updated_at": "2019-07-29T09:53:14Z",
  "closed_at": "2019-07-29T09:53:14Z",
  "author_association": "NONE",
  "body": "Trying to implement a dropdown component (Child component) that has a list of checkboxes whose values are sent to the parent after an Apply button.\r\n\r\nThe values for this checkboxes are being sent from the parent and these are obtained from a backend server. I am having a table to which this component is attached to , like across multiple columns. Based on selected values, I make a server call that gives me filtered data.\r\n\r\nI am unable to maintain the checkboxes state, as a result after the filteration the values of the checkboxes is lost. \r\n\r\nI am maintaining a local state inside child component for these  options . But still the checkboxes are getting reset to initial value after the filtered data comes in.\r\n\r\nI am maintaining a state something similar to this :\r\n\r\n\r\n```tsx\r\n\r\n//data :data for the table from server\r\n//selectedValues: the data that i receive from the child\r\n//columns: column configuration \r\n//optionsForColumns: these are the options for based on which checkboxes values are defined with the format {columnName:[values:count]}\r\n \r\nthis.state = {\r\n      data: [ \r\n               { firstName: \"Jack\", status: \"Submitted\", age: \"14\" },\r\n               { firstName: \"Simon\", status: \"Pending\", age: \"15\" }\r\n            ],\r\n      selectedValues: {},\r\n      columns: [], \r\n      optionsForColumns:  { \r\n                             firstName: [{ Jack: \"4\" }, { Simon: \"5\" }],      \r\n                             status: [{ Submitted: \"5\" }, { Pending: \"7\" }]\r\n                          }\r\n };\r\n\r\n\r\n```\r\n\r\n\r\n\r\nI have not added the server code here, but I have maintained Child component as a controlled one, but still the checkboxes values are reset.\r\n\r\nNot able to understand why?\r\n\r\nSand box: https://codesandbox.io/s/nervous-elgamal-0zztb\r\n\r\nI have added the sandbox link with proper comments. Please have a look. I am a bit new to react.\r\n\r\nHelp would be really appreciated\r\n\r\nParent\r\n--------\r\n```tsx\r\nimport * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport ReactTable from \"react-table\";\r\nimport \"./styles.css\";\r\nimport \"react-table/react-table.css\";\r\nimport Child from \"./Child\";\r\ninterface IState {\r\n  data: {}[];\r\n  columns: {}[];\r\n  selectedValues: {};\r\n  optionsForColumns: {};\r\n}\r\n\r\ninterface IProps {}\r\n\r\nexport default class App extends React.Component<IProps, IState> {\r\n\r\n  // Here I have  hardcoded the values, but data and optionsForColumns comes from the backend and it is set inside componentDidMount\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      data: [\r\n        { firstName: \"Jack\", status: \"Submitted\", age: \"14\" },\r\n        { firstName: \"Simon\", status: \"Pending\", age: \"15\" }\r\n      ],\r\n      selectedValues: {},\r\n      columns: [],\r\n      optionsForColumns: {\r\n        firstName: [{ Jack: \"4\" }, { Simon: \"5\" }],\r\n        status: [{ Submitted: \"5\" }, { Pending: \"7\" }]\r\n      }\r\n    };\r\n  }\r\n\r\n  // Get the values for checkboxes that will be sent to child\r\n  getValuesFromKey = (key: any) => {\r\n    let data: any = this.state.optionsForColumns[key];\r\n    let result = data.map((value: any) => {\r\n      let keys = Object.keys(value);\r\n      return {\r\n        field: keys[0],\r\n        checked: false\r\n      };\r\n    });\r\n    return result;\r\n  };\r\n\r\n  // Get the consolidated values from child and then pass it for server side filtering\r\n  handleFilter = (fieldName: any, selectedValue: any, modifiedObj: any) => \r\n  {\r\n    this.setState(\r\n      {\r\n        selectedValues: {\r\n          ...this.state.selectedValues,\r\n          [fieldName]: selectedValue\r\n        }\r\n      },\r\n      () => this.handleColumnFilter(this.state.selectedValues)\r\n    );\r\n  };\r\n\r\n  // Function that will make server call based on the checked values from child\r\n  handleColumnFilter = (values: any) => {\r\n    // server side code for filtering\r\n    // After this checkbox content is lost\r\n  };\r\n\r\n  // Function where I configure the columns array for the table . (Also data and column fiter values will be set here, in this case I have hardcoded inside constructor)\r\n  componentDidMount() {\r\n    let columns = [\r\n      {\r\n        Header: () => (\r\n          <div>\r\n            <div>\r\n              <Child\r\n                key=\"firstName\"\r\n                name=\"firstName\"\r\n                options={this.getValuesFromKey(\"firstName\")}\r\n                handleFilter={this.handleFilter}\r\n              />\r\n            </div>\r\n            <span>First Name</span>\r\n          </div>\r\n        ),\r\n        accessor: \"firstName\"\r\n      },\r\n      {\r\n        Header: () => (\r\n          <div>\r\n            <div>\r\n              <Child\r\n                key=\"status\"\r\n                name=\"status\"\r\n                options={this.getValuesFromKey(\"status\")}\r\n                handleFilter={this.handleFilter}\r\n              />\r\n            </div>\r\n            <span>Status</span>\r\n          </div>\r\n        ),\r\n        accessor: \"status\",\r\n      },\r\n      {\r\n        Header: \"Age\",\r\n        accessor: \"age\"\r\n      }\r\n    ];\r\n    this.setState({ columns });\r\n  }\r\n\r\n  //Rendering the data table\r\n  render() {\r\n    const { data, columns } = this.state;\r\n    return (\r\n      <div>\r\n        <ReactTable\r\n          data={data}\r\n          columns={columns}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n\r\n```\r\n\r\n\r\nChild\r\n------------\r\n\r\n```jsx\r\n\r\nimport * as React from \"react\";\r\nimport { Button, Checkbox, Icon } from \"semantic-ui-react\";\r\ninterface IProps {\r\n  options: any;\r\n  name: string;\r\n  handleFilter(val1: any, val2: any, val3: void): void;\r\n}\r\ninterface IState {\r\n  showList: boolean;\r\n  selected: [];\r\n  checkboxOptions: any;\r\n}\r\nexport default class Child extends React.Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      selected: [],\r\n      showList: false,\r\n      checkboxOptions: this.props.options.map((option: any) => option.checked)\r\n    };\r\n  }\r\n\r\n  // Checkbox change handler\r\n  handleValueChange = (event: React.FormEvent<HTMLInputElement>, data: any) => {\r\n    const i = this.props.options.findIndex(\r\n      (item: any) => item.field === data.name\r\n    );\r\n    const optionsArr = this.state.checkboxOptions.map(\r\n      (prevState: any, si: any) => (si === i ? !prevState : prevState)\r\n    );\r\n    this.setState({ checkboxOptions: optionsArr });\r\n  };\r\n\r\n  //Passing the checked values back to parent\r\n  passSelectionToParent = (event: any) => {\r\n    event.preventDefault();\r\n    const result = this.props.options.map((item: any, i: any) =>\r\n      Object.assign({}, item, {\r\n        checked: this.state.checkboxOptions[i]\r\n      })\r\n    );\r\n    const selected = result\r\n      .filter((res: any) => res.checked)\r\n      .map((ele: any) => ele.field);\r\n    console.log(selected);\r\n    this.props.handleFilter(this.props.name, selected, result);\r\n  };\r\n\r\n  //Show/Hide filter\r\n  toggleList = () => {\r\n    this.setState(prevState => ({ showList: !prevState.showList }));\r\n  };\r\n\r\n  //Rendering the checkboxes based on the local state, but still it gets lost after filtering happens\r\n  render() {\r\n    let { showList } = this.state;\r\n    let visibleFlag: string;\r\n    if (showList === true) visibleFlag = \"visible\";\r\n    else visibleFlag = \"\";\r\n    return (\r\n      <div>\r\n        <div style={{ position: \"absolute\" }}>\r\n          <div\r\n            className={\"ui scrolling dropdown column-settings \" + visibleFlag}\r\n          >\r\n            <Icon className=\"filter\" onClick={this.toggleList} />\r\n            <div className={\"menu transition \" + visibleFlag}>\r\n              <div className=\"menu-item-holder\">\r\n                {this.props.options.map((item: any, i: number) => (\r\n                  <div className=\"menu-item\" key={i}>\r\n                    <Checkbox\r\n                      name={item.field}\r\n                      onChange={this.handleValueChange}\r\n                      label={item.field}\r\n                      checked={this.state.checkboxOptions[i]}\r\n                    />\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div className=\"menu-btn-holder\">\r\n                <Button size=\"small\" onClick={this.passSelectionToParent}>\r\n                  Apply\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\n\r\n",
  "closed_by": {
    "login": "vjr12",
    "id": 42905121,
    "node_id": "MDQ6VXNlcjQyOTA1MTIx",
    "avatar_url": "https://avatars3.githubusercontent.com/u/42905121?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vjr12",
    "html_url": "https://github.com/vjr12",
    "followers_url": "https://api.github.com/users/vjr12/followers",
    "following_url": "https://api.github.com/users/vjr12/following{/other_user}",
    "gists_url": "https://api.github.com/users/vjr12/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vjr12/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vjr12/subscriptions",
    "organizations_url": "https://api.github.com/users/vjr12/orgs",
    "repos_url": "https://api.github.com/users/vjr12/repos",
    "events_url": "https://api.github.com/users/vjr12/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vjr12/received_events",
    "type": "User",
    "site_admin": false
  }
}
