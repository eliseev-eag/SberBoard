{
  "url": "https://api.github.com/repos/facebook/react/issues/8340",
  "repository_url": "https://api.github.com/repos/facebook/react",
  "labels_url": "https://api.github.com/repos/facebook/react/issues/8340/labels{/name}",
  "comments_url": "https://api.github.com/repos/facebook/react/issues/8340/comments",
  "events_url": "https://api.github.com/repos/facebook/react/issues/8340/events",
  "html_url": "https://github.com/facebook/react/issues/8340",
  "id": 190206997,
  "node_id": "MDU6SXNzdWUxOTAyMDY5OTc=",
  "number": 8340,
  "title": "Error message / stack trace for `Invariant Violation: Element type is invalid` is still useless most of the time - possible solution enclosed.",
  "user": {
    "login": "clarabstract",
    "id": 2922,
    "node_id": "MDQ6VXNlcjI5MjI=",
    "avatar_url": "https://avatars0.githubusercontent.com/u/2922?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/clarabstract",
    "html_url": "https://github.com/clarabstract",
    "followers_url": "https://api.github.com/users/clarabstract/followers",
    "following_url": "https://api.github.com/users/clarabstract/following{/other_user}",
    "gists_url": "https://api.github.com/users/clarabstract/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/clarabstract/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/clarabstract/subscriptions",
    "organizations_url": "https://api.github.com/users/clarabstract/orgs",
    "repos_url": "https://api.github.com/users/clarabstract/repos",
    "events_url": "https://api.github.com/users/clarabstract/events{/privacy}",
    "received_events_url": "https://api.github.com/users/clarabstract/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [

  ],
  "state": "closed",
  "locked": false,
  "assignee": null,
  "assignees": [

  ],
  "milestone": null,
  "comments": 4,
  "created_at": "2016-11-18T00:42:03Z",
  "updated_at": "2019-05-02T07:32:00Z",
  "closed_at": "2017-10-04T14:34:07Z",
  "author_association": "NONE",
  "body": "Using React v15.3.2 and `ReactServer.renderToString` but I'm reasonably sure the behaviour is the same with `ReactDOM` (and I've not seen anything in the release notes of 15.4 regarding improved error messages from render).\r\n\r\nThe problem is of course that the source of the stack-trace is simply the originating `render` or `renderToString` call. In certain occasions the error messages includes the name of a component class whose `render()` method to check, but even that is not terribly useful for larger components. \r\n\r\nI understand there are limitations to how much debug information can tag along element creation code during normal operation, but might it not be practical to simply re-render and re-check (using more heavy-weight tracing) a faulty call to `createElement` after the error already happened?\r\n\r\nHere is a proof of concept (which works great and has been very helpful):\r\n\r\n```js\r\nlet childContextMap = new WeakMap();\r\nlet findInvalidElement = (el, path, ctx) => {\r\n  // console.log('-path', path)\r\n  if (el === null || typeof el === 'undefined' || typeof el === 'boolean' || typeof el === 'string') {\r\n    return;\r\n  }\r\n  if (Array.isArray(el)) {\r\n    for (let [idx, item] of el.entries()) {\r\n      findInvalidElement(item, `${path}[${idx}]`, ctx);\r\n    }\r\n    return;\r\n  }\r\n  if ( !(\r\n      typeof el.type === 'function'\r\n      || typeof el.type === 'string'\r\n    ) ) {\r\n    console.warn('/!\\\\ INVALID ELEMENT TYPE FOUND /!\\\\');\r\n    console.warn(`At: ${path}`);\r\n    console.warn('Type:', el.type);\r\n  }\r\n\r\n  if (childContextMap.has(el)) {\r\n    ctx = childContextMap.get(el);\r\n  }\r\n\r\n  if (typeof el.type === 'function') {\r\n    if (el.type.prototype instanceof React.Component) {\r\n      let element = new (el.type)(el.props, ctx);\r\n      let childContext = {};\r\n      if (typeof element.getChildContext === 'function') {\r\n        childContext = Object.assign({}, ctx,\r\n          element.getChildContext());\r\n        React.Children.forEach(el.props.children, child => {\r\n          childContextMap.set(child, childContext);\r\n        });\r\n      }\r\n      findInvalidElement(element.render(), `${path}${el.type.displayName || el.type.name || el.type}.render()->`, ctx);\r\n    } else {\r\n      findInvalidElement(el.type(el.props, ctx), `${path}${el.type.displayName || el.type.name || el.type}()->`, ctx);\r\n    }\r\n  } else if (el.props && el.props.children) {\r\n    let idx = 0;\r\n    React.Children.forEach(el.props.children, child => {\r\n\r\n      findInvalidElement(child, `${path}${idx}:${el.type.name || el.type}/`, ctx);\r\n      idx++;\r\n    });\r\n  }\r\n};\r\n```\r\n\r\nIt's just a quick kludged-together element-tree renderer that tracks the 'path' to each individual node in the tree (and is thus able to report it if the type is incorrect). Together with the stack trace this allows for _exact_ identification of the faulty node. \r\n\r\nFor example, the path:\r\n\r\n`Main.render()->Provider.render()->IntlProvider.render()->1:div/0:div/ReactCSSTransitionGroup.render()->ReactTransitionGroup.render()->0:span/ReactCSSTransitionGroupChild.render()->0:div/0:div/Connect(Connect(ExampleForm)).render()->Connect(ExampleForm).render()->ExampleForm.render()->3:form/ExampleSubForm.render()->3:div/`\r\n\r\nThough verbose, it can be followed without ambiguity:\r\n\r\n- (starting where the stack-trace ends)\r\n- In the `render()` method of `Main`\r\n- In the `render()` method of `Provider`\r\n- In the `render()` method of `IntlProvider`\r\n- In the second (`1`) child (a `div`)\r\n- In the first (`0`) child (a `div`)\r\n- In the `render()` method of `ReactCSSTransitionGroup`\r\n- In the `render()` method of `ReactTransitionGroup`\r\n- In the first (`0`) child (a `span`)\r\n- In the `render()` method of `ReactCSSTransitionGroupChild`\r\n- In the first (`0`) child (a `div`)\r\n- In the first (`0`) child (a `div`)\r\n- ... and so on, you get the idea\r\n",
  "closed_by": {
    "login": "gaearon",
    "id": 810438,
    "node_id": "MDQ6VXNlcjgxMDQzOA==",
    "avatar_url": "https://avatars0.githubusercontent.com/u/810438?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/gaearon",
    "html_url": "https://github.com/gaearon",
    "followers_url": "https://api.github.com/users/gaearon/followers",
    "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
    "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
    "organizations_url": "https://api.github.com/users/gaearon/orgs",
    "repos_url": "https://api.github.com/users/gaearon/repos",
    "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
    "received_events_url": "https://api.github.com/users/gaearon/received_events",
    "type": "User",
    "site_admin": false
  }
}
